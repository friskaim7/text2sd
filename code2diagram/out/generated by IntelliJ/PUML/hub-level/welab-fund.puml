@startuml
class com.welab.fund.job.RefundBCAJob_Test {
- RefundBCAJob refundBCAJob
+ void sendCmsg_test()
+ void execute_test()
}
class com.welab.fund.app.command.batchcode.FundTasticRepaymentCmdExe {
- BaseRefundDetailService baseRefundDetailService
- FundBatchcodeService fundBatchcodeService
- BaseFundLoanMatchBatchcodeService baseFundLoanMatchBatchcodeService
+ void refund(Long,FundBaseInfo)
}
class com.welab.fund.app.command.RepaymentReleaseCmdExe {
- FundTradingLocalService fundTradingLocalService
- BaseFundTradingService baseFundTradingService
- FundAccountService fundAccountService
- BaseRefundDetailService baseRefundDetailService
- BaseFundRefundRecordService baseFundRefundRecordService
- FundTransferService fundTransferService
- RefundService refundService
- RefundManager refundManager
- FundServiceManager fundServiceManager
- IBuyerInfoServiceFacade iBuyerInfoServiceFacade
- FundTasticRepaymentCmdExe fundTasticRepaymentCmdExe
+ FundRefundStatusEnum releaseRepaymentAccount(FundRefundRecord,FundBaseInfo)
# void releaseNoSold(FundRefundRecord,FundBaseInfo,String,Long,FundAccount)
- boolean existTradingRecord(Long,FundTradingTypeEnum)
# void transTax(FundRefundRecord,FundBaseInfo,Long,FundAccount,Long)
# void releaseSold(FundRefundRecord,FundBaseInfo,String,Long,FundAccount)
}
interface com.welab.fund.service.FundLoansService {
~ Response addFundLoansRecord(FundLoansDTO)
~ Response updateApprovedAmount(FundLoansDTO)
~ Response addFundLoansRecordNoMatch(FundLoansDTO)
}
class com.welab.fund.dto.response.FundTransferAccountResponseDTO {
- {static} long serialVersionUID
- FundAccountInfoDTO awadAccount
- FundAccountInfoDTO loansAccount
- FundAccountInfoDTO repaymentAccount
- FundAccountInfoDTO fundAccount
}
class com.welab.fund.mode.ext.FundBatchcodeAccountFlowExt {
- String productCode
- Date expiredDate
}
class com.welab.fund.app.base.BaseFundAccountTrackService {
- FundAccountTrackMapper fundAccountTrackMapper
+ void addRecord(FundAccountTrack)
}
class com.welab.fund.mq.TestFundMqListener_Test {
- TestFundMqListener testFundMqListener
}
class com.welab.fund.mode.FundMatchRuleTrack {
- Long id
- String ruleType
- Long updatedUser
- Date createdAt
- Date updatedAt
- String trackContext
+ Long getId()
+ void setId(Long)
+ String getRuleType()
+ void setRuleType(String)
+ Long getUpdatedUser()
+ void setUpdatedUser(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getTrackContext()
+ void setTrackContext(String)
}
interface com.welab.fund.mapper.FundBaseInfoMapper {
~ long countByExample(FundBaseInfoExample)
~ int deleteByExample(FundBaseInfoExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundBaseInfo)
~ int insertSelective(FundBaseInfo)
~ List<FundBaseInfo> selectByExample(FundBaseInfoExample)
~ FundBaseInfo selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundBaseInfo,FundBaseInfoExample)
~ int updateByExample(FundBaseInfo,FundBaseInfoExample)
~ int updateByPrimaryKeySelective(FundBaseInfo)
~ int updateByPrimaryKey(FundBaseInfo)
}
class com.welab.fund.mq.FundMatchRuleUpdateListener {
- List<AbstractFundMatchRuleManager> fundMatchRuleManagerList
+ void onMessage(Message)
}
class com.welab.fund.vo.request.FundAccountInfoVo {
- Long fundBaseId
- String fundCode
- String remoteAmount
- String accountNo
- Long repaymentAmount
- Long amount
- boolean recharging
- String gatewayName
- Byte gatewayType
- Byte accountType
}
class com.welab.fund.job.TestJob {
# Logger log
+ void execute(ShardingContext)
}
class com.welab.fund.configuration.WebAppConfigurer {
+ void addInterceptors(InterceptorRegistry)
}
enum com.welab.fund.enums.FundTransferQueueEnum {
+  LOANS_TO_AWDA
+  REPAYMENT_TO_AWDA
+  AWDA_TO_REPAYMENT
- Byte type
- String remark
- {static} Map<Byte,FundTransferQueueEnum> cache
+ {static} FundTransferQueueEnum getByType(Byte)
}
abstract class com.welab.fund.app.service.loans_repayment.AbstractLoansAndRepaymentService {
# boolean isTransferFee
# FundEnum gateType
# Long transferFee
# Long lowestAmount
- FundConfigService fundConfigService
# JedisCluster jedisCluster
# FundAccountService fundAccountService
# FundTradingLocalService fundTradingLocalService
- BaseFundTradingService baseFundTradingService
# FundTransferService fundTransferService
# FundLoansLocalService fundLoansLocalService
# BaseFundAccountService baseFundAccountService
# FundServiceManager fundServiceManager
+ Long getTransferFee()
+ Long getLowestAmount()
# void initValue(FundEnum)
+ {abstract}void addTransferFee(FundTradingExt)
+ void repayment(FundTradingExt)
+ void loans(FundTradingExt)
}
class com.welab.fund.validated.ValidateUtil {
- {static} Validator validator
- <<Create>> ValidateUtil()
+ {static} boolean validate(T,Class<?>)
+ {static} void validateForException(T,Class<?>)
}
enum com.welab.fund.enums.FundBatchcodeFlowOperateTypeEnum {
+  INIT
+  FREEZE
+  ROLLBACK_CANCEl
+  USE_UNFREEZE
+  DISBURSED_INTEREST
+  CANCEL_LOANS
+  DISBURSED_PRINCIPAL_ROLLBACK
+  DISBURSED_INTEREST_ROLLBACK
+  REPAYMENT
+  REPAYMENT_ROLLBACK
- String type
}
interface com.welab.fund.mapper.FundBatchcodeAccountExtMapper {
~ int addAmount(FundBatchcodeAccount)
~ FundBatchcodeAccount findAccountByBatchCode(String)
~ FundBatchcodeAccount findAccountBlockByBatchCode(String)
~ Long getSumAmount(Long)
~ List<FundBatchcodeAccount> findBatchcodeSumAmountByFundIds(List<Long>)
~ List<FundBatchcodeAccountExt> getAllBatchCode(FundBatchcodeAccountExt)
}
class com.welab.fund.controller.FundConfigController_Test {
- FundConfigController fundConfigController
+ void updateConfig_test()
+ void getConfigList_test()
}
enum com.welab.fund.enums.RefundChannelEnum {
+  DEFAULT
+  FIF
+  FASPAY
+  ASTRA
+  TAPP
+  ASTRA2
+  BCA
- Byte value
- Long fundId
- Integer mapFinanceType
- String fundCode
+ {static} RefundChannelEnum getByFundId(Long)
+ {static} RefundChannelEnum getByValue(Byte)
}
class com.welab.fund.mode.ext.RechargeModel {
- boolean manual
- Long fundId
- Long amount
- String accountType
- Byte rechargeType
- String remark
}
class com.welab.fund.app.command.TopupNotificationsCmdExe_Test {
- TopupNotificationsCmdExe topupNotificationsCmdExe
+ void execute_test()
}
enum com.welab.fund.enums.fundinfo.FundRepaymentMode {
+  ON_LINE
+  OFF_LINE
- String value
- String name
- String enName
+ boolean check(String)
+ {static} List getStatusList(boolean)
}
class com.welab.fund.app.command.FundLoansApplyCmdExe {
- FundConfigService configService
- FundMqProducer fundMqProducer
- BaseFundLoansService baseFundLoansService
- BaseApplyLoansDataService baseApplyLoansDataService
- String loansStatusUpdateKey
+ void applyLoans(JSONObject)
}
class com.welab.fund.job.ReturnSoldJob {
- RefundT1CmdExe refundService
+ void execute(ShardingContext)
}
class com.welab.fund.vo.FundMatchRuleTrackVO {
- String operator
- JSONArray trackContext
- Date updatedDate
}
class com.welab.fund.job.MqResendJob_Test {
- MqResendJob mqResendJob
+ void execute_test()
}
enum com.welab.fund.enums.RecordStatusEnum {
+  INIT
+  SUCCESS
+  FAIL
+  REHANDLE
- String status
}
class com.welab.fund.app.command.RepaymentReleaseCmdExe_Test {
- RepaymentReleaseCmdExe repaymentReleaseCmdExe
+ void releaseRepaymentAccount_test()
}
class com.welab.fund.job.ReturnSoldJob_Test {
- ReturnSoldJob returnSoldJob
+ void execute_test()
}
class com.welab.fund.app.manager.FundBatchcodeRedisManager {
~ String fundStaticKey
- BaseBatchcodeAccountService baseBatchcodeAccountService
- JedisCluster jedisC
+ void addAmount(String,Long)
+ Object reduceAmount(String,Long)
+ Long getAvailableAmount(FundBatchcodeAccount)
+ Set<String> zrangeByScore(Long)
+ void refurbish(FundBatchcodeAccount)
+ void removeMember(String)
+ Long getRedisAmount(String)
}
class com.welab.fund.mode.FundConfigExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundConfigExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundConfigExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andConfigKeyIsNull()
+ Criteria andConfigKeyIsNotNull()
+ Criteria andConfigKeyEqualTo(String)
+ Criteria andConfigKeyNotEqualTo(String)
+ Criteria andConfigKeyGreaterThan(String)
+ Criteria andConfigKeyGreaterThanOrEqualTo(String)
+ Criteria andConfigKeyLessThan(String)
+ Criteria andConfigKeyLessThanOrEqualTo(String)
+ Criteria andConfigKeyLike(String)
+ Criteria andConfigKeyNotLike(String)
+ Criteria andConfigKeyIn(List<String>)
+ Criteria andConfigKeyNotIn(List<String>)
+ Criteria andConfigKeyBetween(String,String)
+ Criteria andConfigKeyNotBetween(String,String)
+ Criteria andConfigDescIsNull()
+ Criteria andConfigDescIsNotNull()
+ Criteria andConfigDescEqualTo(String)
+ Criteria andConfigDescNotEqualTo(String)
+ Criteria andConfigDescGreaterThan(String)
+ Criteria andConfigDescGreaterThanOrEqualTo(String)
+ Criteria andConfigDescLessThan(String)
+ Criteria andConfigDescLessThanOrEqualTo(String)
+ Criteria andConfigDescLike(String)
+ Criteria andConfigDescNotLike(String)
+ Criteria andConfigDescIn(List<String>)
+ Criteria andConfigDescNotIn(List<String>)
+ Criteria andConfigDescBetween(String,String)
+ Criteria andConfigDescNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
+ Criteria andUpdatedUserIdIsNull()
+ Criteria andUpdatedUserIdIsNotNull()
+ Criteria andUpdatedUserIdEqualTo(Long)
+ Criteria andUpdatedUserIdNotEqualTo(Long)
+ Criteria andUpdatedUserIdGreaterThan(Long)
+ Criteria andUpdatedUserIdGreaterThanOrEqualTo(Long)
+ Criteria andUpdatedUserIdLessThan(Long)
+ Criteria andUpdatedUserIdLessThanOrEqualTo(Long)
+ Criteria andUpdatedUserIdIn(List<Long>)
+ Criteria andUpdatedUserIdNotIn(List<Long>)
+ Criteria andUpdatedUserIdBetween(Long,Long)
+ Criteria andUpdatedUserIdNotBetween(Long,Long)
}
class com.welab.fund.mode.FundConfigExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundConfigExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.app.command.RefundAmountRetracementCmdExe {
- BaseRefundDetailService baseRefundDetailService
- BaseRetracementReocrdService baseRetracementReocrdService
- BaseFundRefundRecordService baseFundRefundRecordService
- FundServiceManager fundServiceManager
- FundTradingLocalService fundTradingLocalService
- BaseFundTradingService baseFundTradingService
- BaseRetracementPlanService baseRetracementPlanService
+ void handleRetracement(List<TrackVo>)
- List<TrackVo> filterProcessedData(List<TrackVo>)
- void noRefundRetracement(List<TrackVo>)
- void refundedRetracement(List<RefundDetail>)
}
class com.welab.fund.app.manager.match.FundMatchFundTasticRuleManager {
+ {static} String FUND_TASTIC_RULE
+ <<Create>> FundMatchFundTasticRuleManager()
+ String matchFundInfo(MatchFundModel)
+ void refrush()
}
class com.welab.fund.utils.DateUtils {
+ {static} String TIME_STAMP_FORMAT
+ {static} String DATE_TIME_FORMAT
+ {static} String YYYYMMDD
+ {static} String YYYY_MM_DD
+ {static} String DATE_YYYYMM_FORMAT
- {static} Map<String,SimpleDateFormat> formatPattern
+ {static} String safeFormat(Date,String)
+ {static} String format(Date,String)
+ {static} Date getDayStartTime(Date)
+ {static} Date getDayEndTime(Date)
+ {static} Date addDay(Date,int)
+ {static} Date addMonth(Date,int)
+ {static} Date addYear(Date,int)
+ {static} Calendar getDateCalendar(Date)
+ {static} int getDaysBetween(Date,Date)
}
class com.welab.fund.controller.FundAccountController_Test {
- FundAccountController fundAccountController
+ void getLoansAndRepaymentAccount_test()
+ void recharge_test()
}
class com.welab.fund.mq.FundtasticMqConsumerListener {
- FundtasticLoansService fundtasticLoansService
- FundTasticDubboServiceImpl fundTasticDubboServiceImpl
+ void fundtasticCheck(Message)
+ void loansInterestNotify(Message)
+ void loansNotify(Message)
+ void rollbackLoans(Message)
+ void bindLoans(Message)
+ void retry(Message)
}
class com.welab.fund.mode.ext.FundTradingExt {
- boolean subAccount
- String selectType
- Long fundId
- String bankCode
- String fundCode
- FundTradingTypeEnum typeEnum
- Long accountId
- Byte accountType
- boolean online
- Integer dueIndex
- List<String> loanNumbers
- Date startDate
- Date endDate
- List<String> types
- List<String> statuses
}
class com.welab.fund.app.service.FundTradingLocalService {
- BaseFundTradingService baseFundTradingService
- FundServiceManager fundServiceManager
- Long warnAmount
+ void transferAmount(FundTradingExt,StatusEnum)
+ boolean addRepaymentAccountTrading(FundTradingExt)
+ FundTradingExt buildFundTrading(Long,String,Long,FundTradingTypeEnum,String,Byte,String,String)
+ FundTrading buildFundTrading(Long,Long,String,String,Byte)
+ boolean addLoansAccountTrading(FundTradingExt)
+ Response<PageInfo<FundTrading>> getPage(PageRequestBO<FundTradingExt>)
}
class com.welab.fund.mode.RetracementTradingReocrd {
- Long id
- Long fundAssociateId
- Long fundTradingId
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getFundAssociateId()
+ void setFundAssociateId(Long)
+ Long getFundTradingId()
+ void setFundTradingId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.fund.mode.ext.RefundModel {
- boolean manual
- FundTradingTypeEnum refundType
- RefundRecordTypeEnum recordType
- Long fundId
}
class com.welab.fund.mode.FundMatchRule {
- Long id
- String ruleType
- Boolean ruleStatus
- Integer orderValue
- Long lastUpdatedUser
- Date createdAt
- Date updatedAt
- String rule
+ Long getId()
+ void setId(Long)
+ String getRuleType()
+ void setRuleType(String)
+ Boolean getRuleStatus()
+ void setRuleStatus(Boolean)
+ Integer getOrderValue()
+ void setOrderValue(Integer)
+ Long getLastUpdatedUser()
+ void setLastUpdatedUser(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getRule()
+ void setRule(String)
}
interface com.welab.fund.mapper.FtTopupRecordMapper {
~ long countByExample(FtTopupRecordExample)
~ int deleteByExample(FtTopupRecordExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FtTopupRecord)
~ int insertSelective(FtTopupRecord)
~ List<FtTopupRecord> selectByExample(FtTopupRecordExample)
~ FtTopupRecord selectByPrimaryKey(Long)
~ int updateByExampleSelective(FtTopupRecord,FtTopupRecordExample)
~ int updateByExample(FtTopupRecord,FtTopupRecordExample)
~ int updateByPrimaryKeySelective(FtTopupRecord)
~ int updateByPrimaryKey(FtTopupRecord)
}
class com.welab.fund.app.facade.message.MessageMqServiceFacade {
- MessageMqService MessageMqService
}
class com.welab.fund.mode.FundTradingExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundTradingExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundTradingExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundBaseIdIsNull()
+ Criteria andFundBaseIdIsNotNull()
+ Criteria andFundBaseIdEqualTo(Long)
+ Criteria andFundBaseIdNotEqualTo(Long)
+ Criteria andFundBaseIdGreaterThan(Long)
+ Criteria andFundBaseIdGreaterThanOrEqualTo(Long)
+ Criteria andFundBaseIdLessThan(Long)
+ Criteria andFundBaseIdLessThanOrEqualTo(Long)
+ Criteria andFundBaseIdIn(List<Long>)
+ Criteria andFundBaseIdNotIn(List<Long>)
+ Criteria andFundBaseIdBetween(Long,Long)
+ Criteria andFundBaseIdNotBetween(Long,Long)
+ Criteria andLoanNumberIsNull()
+ Criteria andLoanNumberIsNotNull()
+ Criteria andLoanNumberEqualTo(String)
+ Criteria andLoanNumberNotEqualTo(String)
+ Criteria andLoanNumberGreaterThan(String)
+ Criteria andLoanNumberGreaterThanOrEqualTo(String)
+ Criteria andLoanNumberLessThan(String)
+ Criteria andLoanNumberLessThanOrEqualTo(String)
+ Criteria andLoanNumberLike(String)
+ Criteria andLoanNumberNotLike(String)
+ Criteria andLoanNumberIn(List<String>)
+ Criteria andLoanNumberNotIn(List<String>)
+ Criteria andLoanNumberBetween(String,String)
+ Criteria andLoanNumberNotBetween(String,String)
+ Criteria andOutAccountNoIsNull()
+ Criteria andOutAccountNoIsNotNull()
+ Criteria andOutAccountNoEqualTo(String)
+ Criteria andOutAccountNoNotEqualTo(String)
+ Criteria andOutAccountNoGreaterThan(String)
+ Criteria andOutAccountNoGreaterThanOrEqualTo(String)
+ Criteria andOutAccountNoLessThan(String)
+ Criteria andOutAccountNoLessThanOrEqualTo(String)
+ Criteria andOutAccountNoLike(String)
+ Criteria andOutAccountNoNotLike(String)
+ Criteria andOutAccountNoIn(List<String>)
+ Criteria andOutAccountNoNotIn(List<String>)
+ Criteria andOutAccountNoBetween(String,String)
+ Criteria andOutAccountNoNotBetween(String,String)
+ Criteria andInAccountNoIsNull()
+ Criteria andInAccountNoIsNotNull()
+ Criteria andInAccountNoEqualTo(String)
+ Criteria andInAccountNoNotEqualTo(String)
+ Criteria andInAccountNoGreaterThan(String)
+ Criteria andInAccountNoGreaterThanOrEqualTo(String)
+ Criteria andInAccountNoLessThan(String)
+ Criteria andInAccountNoLessThanOrEqualTo(String)
+ Criteria andInAccountNoLike(String)
+ Criteria andInAccountNoNotLike(String)
+ Criteria andInAccountNoIn(List<String>)
+ Criteria andInAccountNoNotIn(List<String>)
+ Criteria andInAccountNoBetween(String,String)
+ Criteria andInAccountNoNotBetween(String,String)
+ Criteria andTypeIsNull()
+ Criteria andTypeIsNotNull()
+ Criteria andTypeEqualTo(String)
+ Criteria andTypeNotEqualTo(String)
+ Criteria andTypeGreaterThan(String)
+ Criteria andTypeGreaterThanOrEqualTo(String)
+ Criteria andTypeLessThan(String)
+ Criteria andTypeLessThanOrEqualTo(String)
+ Criteria andTypeLike(String)
+ Criteria andTypeNotLike(String)
+ Criteria andTypeIn(List<String>)
+ Criteria andTypeNotIn(List<String>)
+ Criteria andTypeBetween(String,String)
+ Criteria andTypeNotBetween(String,String)
+ Criteria andFundAmountIsNull()
+ Criteria andFundAmountIsNotNull()
+ Criteria andFundAmountEqualTo(Long)
+ Criteria andFundAmountNotEqualTo(Long)
+ Criteria andFundAmountGreaterThan(Long)
+ Criteria andFundAmountGreaterThanOrEqualTo(Long)
+ Criteria andFundAmountLessThan(Long)
+ Criteria andFundAmountLessThanOrEqualTo(Long)
+ Criteria andFundAmountIn(List<Long>)
+ Criteria andFundAmountNotIn(List<Long>)
+ Criteria andFundAmountBetween(Long,Long)
+ Criteria andFundAmountNotBetween(Long,Long)
+ Criteria andAmountIsNull()
+ Criteria andAmountIsNotNull()
+ Criteria andAmountEqualTo(Long)
+ Criteria andAmountNotEqualTo(Long)
+ Criteria andAmountGreaterThan(Long)
+ Criteria andAmountGreaterThanOrEqualTo(Long)
+ Criteria andAmountLessThan(Long)
+ Criteria andAmountLessThanOrEqualTo(Long)
+ Criteria andAmountIn(List<Long>)
+ Criteria andAmountNotIn(List<Long>)
+ Criteria andAmountBetween(Long,Long)
+ Criteria andAmountNotBetween(Long,Long)
+ Criteria andStatusIsNull()
+ Criteria andStatusIsNotNull()
+ Criteria andStatusEqualTo(String)
+ Criteria andStatusNotEqualTo(String)
+ Criteria andStatusGreaterThan(String)
+ Criteria andStatusGreaterThanOrEqualTo(String)
+ Criteria andStatusLessThan(String)
+ Criteria andStatusLessThanOrEqualTo(String)
+ Criteria andStatusLike(String)
+ Criteria andStatusNotLike(String)
+ Criteria andStatusIn(List<String>)
+ Criteria andStatusNotIn(List<String>)
+ Criteria andStatusBetween(String,String)
+ Criteria andStatusNotBetween(String,String)
+ Criteria andRemarkIsNull()
+ Criteria andRemarkIsNotNull()
+ Criteria andRemarkEqualTo(String)
+ Criteria andRemarkNotEqualTo(String)
+ Criteria andRemarkGreaterThan(String)
+ Criteria andRemarkGreaterThanOrEqualTo(String)
+ Criteria andRemarkLessThan(String)
+ Criteria andRemarkLessThanOrEqualTo(String)
+ Criteria andRemarkLike(String)
+ Criteria andRemarkNotLike(String)
+ Criteria andRemarkIn(List<String>)
+ Criteria andRemarkNotIn(List<String>)
+ Criteria andRemarkBetween(String,String)
+ Criteria andRemarkNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
+ Criteria andTransferOrderIsNull()
+ Criteria andTransferOrderIsNotNull()
+ Criteria andTransferOrderEqualTo(String)
+ Criteria andTransferOrderNotEqualTo(String)
+ Criteria andTransferOrderGreaterThan(String)
+ Criteria andTransferOrderGreaterThanOrEqualTo(String)
+ Criteria andTransferOrderLessThan(String)
+ Criteria andTransferOrderLessThanOrEqualTo(String)
+ Criteria andTransferOrderLike(String)
+ Criteria andTransferOrderNotLike(String)
+ Criteria andTransferOrderIn(List<String>)
+ Criteria andTransferOrderNotIn(List<String>)
+ Criteria andTransferOrderBetween(String,String)
+ Criteria andTransferOrderNotBetween(String,String)
+ Criteria andGatewayTypeIsNull()
+ Criteria andGatewayTypeIsNotNull()
+ Criteria andGatewayTypeEqualTo(Byte)
+ Criteria andGatewayTypeNotEqualTo(Byte)
+ Criteria andGatewayTypeGreaterThan(Byte)
+ Criteria andGatewayTypeGreaterThanOrEqualTo(Byte)
+ Criteria andGatewayTypeLessThan(Byte)
+ Criteria andGatewayTypeLessThanOrEqualTo(Byte)
+ Criteria andGatewayTypeIn(List<Byte>)
+ Criteria andGatewayTypeNotIn(List<Byte>)
+ Criteria andGatewayTypeBetween(Byte,Byte)
+ Criteria andGatewayTypeNotBetween(Byte,Byte)
}
class com.welab.fund.mode.FundTradingExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundTradingExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.ApplyLoansData {
- Long id
- String loanNumber
- String approvedData
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getLoanNumber()
+ void setLoanNumber(String)
+ String getApprovedData()
+ void setApprovedData(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.fund.job.RetracementTimerJob {
- RefundAmountRetracementTimerCmdExe refundAmountRetracementTimerCmdExe
+ void execute(ShardingContext)
}
class com.welab.fund.app.facade.finance.LoanDetailRemoteService {
- ILoanService iLoanService
+ List<LoanDetailExtendDto> findByLoanNumberList(List<String>)
}
enum com.welab.fund.enums.FundAccountEnum {
+  BNI
+  PERMATA
- Byte gateway
- Long accountId
+ {static} FundAccountEnum getByGateway(Byte)
}
class com.welab.fund.mode.RetracementReocrdExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> RetracementReocrdExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.RetracementReocrdExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andLoanNumberIsNull()
+ Criteria andLoanNumberIsNotNull()
+ Criteria andLoanNumberEqualTo(String)
+ Criteria andLoanNumberNotEqualTo(String)
+ Criteria andLoanNumberGreaterThan(String)
+ Criteria andLoanNumberGreaterThanOrEqualTo(String)
+ Criteria andLoanNumberLessThan(String)
+ Criteria andLoanNumberLessThanOrEqualTo(String)
+ Criteria andLoanNumberLike(String)
+ Criteria andLoanNumberNotLike(String)
+ Criteria andLoanNumberIn(List<String>)
+ Criteria andLoanNumberNotIn(List<String>)
+ Criteria andLoanNumberBetween(String,String)
+ Criteria andLoanNumberNotBetween(String,String)
+ Criteria andTransIdIsNull()
+ Criteria andTransIdIsNotNull()
+ Criteria andTransIdEqualTo(String)
+ Criteria andTransIdNotEqualTo(String)
+ Criteria andTransIdGreaterThan(String)
+ Criteria andTransIdGreaterThanOrEqualTo(String)
+ Criteria andTransIdLessThan(String)
+ Criteria andTransIdLessThanOrEqualTo(String)
+ Criteria andTransIdLike(String)
+ Criteria andTransIdNotLike(String)
+ Criteria andTransIdIn(List<String>)
+ Criteria andTransIdNotIn(List<String>)
+ Criteria andTransIdBetween(String,String)
+ Criteria andTransIdNotBetween(String,String)
+ Criteria andDueIndexIsNull()
+ Criteria andDueIndexIsNotNull()
+ Criteria andDueIndexEqualTo(Integer)
+ Criteria andDueIndexNotEqualTo(Integer)
+ Criteria andDueIndexGreaterThan(Integer)
+ Criteria andDueIndexGreaterThanOrEqualTo(Integer)
+ Criteria andDueIndexLessThan(Integer)
+ Criteria andDueIndexLessThanOrEqualTo(Integer)
+ Criteria andDueIndexIn(List<Integer>)
+ Criteria andDueIndexNotIn(List<Integer>)
+ Criteria andDueIndexBetween(Integer,Integer)
+ Criteria andDueIndexNotBetween(Integer,Integer)
+ Criteria andStatusIsNull()
+ Criteria andStatusIsNotNull()
+ Criteria andStatusEqualTo(Byte)
+ Criteria andStatusNotEqualTo(Byte)
+ Criteria andStatusGreaterThan(Byte)
+ Criteria andStatusGreaterThanOrEqualTo(Byte)
+ Criteria andStatusLessThan(Byte)
+ Criteria andStatusLessThanOrEqualTo(Byte)
+ Criteria andStatusIn(List<Byte>)
+ Criteria andStatusNotIn(List<Byte>)
+ Criteria andStatusBetween(Byte,Byte)
+ Criteria andStatusNotBetween(Byte,Byte)
+ Criteria andFundAssociateIdIsNull()
+ Criteria andFundAssociateIdIsNotNull()
+ Criteria andFundAssociateIdEqualTo(Long)
+ Criteria andFundAssociateIdNotEqualTo(Long)
+ Criteria andFundAssociateIdGreaterThan(Long)
+ Criteria andFundAssociateIdGreaterThanOrEqualTo(Long)
+ Criteria andFundAssociateIdLessThan(Long)
+ Criteria andFundAssociateIdLessThanOrEqualTo(Long)
+ Criteria andFundAssociateIdIn(List<Long>)
+ Criteria andFundAssociateIdNotIn(List<Long>)
+ Criteria andFundAssociateIdBetween(Long,Long)
+ Criteria andFundAssociateIdNotBetween(Long,Long)
+ Criteria andBranchIdIsNull()
+ Criteria andBranchIdIsNotNull()
+ Criteria andBranchIdEqualTo(String)
+ Criteria andBranchIdNotEqualTo(String)
+ Criteria andBranchIdGreaterThan(String)
+ Criteria andBranchIdGreaterThanOrEqualTo(String)
+ Criteria andBranchIdLessThan(String)
+ Criteria andBranchIdLessThanOrEqualTo(String)
+ Criteria andBranchIdLike(String)
+ Criteria andBranchIdNotLike(String)
+ Criteria andBranchIdIn(List<String>)
+ Criteria andBranchIdNotIn(List<String>)
+ Criteria andBranchIdBetween(String,String)
+ Criteria andBranchIdNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.RetracementReocrdExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.RetracementReocrdExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.test.SimpleTest {
}
interface com.welab.fund.mapper.FundBatchcodeAccountMapper {
~ long countByExample(FundBatchcodeAccountExample)
~ int deleteByExample(FundBatchcodeAccountExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundBatchcodeAccount)
~ int insertSelective(FundBatchcodeAccount)
~ List<FundBatchcodeAccount> selectByExample(FundBatchcodeAccountExample)
~ FundBatchcodeAccount selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundBatchcodeAccount,FundBatchcodeAccountExample)
~ int updateByExample(FundBatchcodeAccount,FundBatchcodeAccountExample)
~ int updateByPrimaryKeySelective(FundBatchcodeAccount)
~ int updateByPrimaryKey(FundBatchcodeAccount)
}
class com.welab.fund.app.facade.QueryTaskServiceFacade {
- QueryTaskService queryTaskService
+ List<GatewayTaskRequestVO> queryTaskRequestDetails(Long)
}
interface com.welab.fund.mapper.FundConfigExtMapper {
~ FundConfig getByConfigKey(String)
~ List<FundConfig> selectConfigList(FundConfig)
}
class com.welab.fund.job.TransferBCAJob_Test {
- TransferBCAJob transferBCAJob
+ void execute_test()
}
class com.welab.fund.app.base.BaseFundMatchRuleTrackService {
- FundMatchRuleTrackMapper fundMatchRuleTrackMapper
- FundMatchRuleTrackExtMapper fundMatchRuleTrackExtMapper
+ void insertSelective(FundMatchRuleTrack)
+ List<FundMatchRuleTrack> getLastTenRecord(String)
}
class com.welab.fund.app.manager.FundAccountCheckService {
- BaseFundInfoService baseFundInfoService
- FundMessageLocalService fundMessageLocalServiceImple
- RepaymentTrackRemoteService trackService
- JedisCluster redisClient
+ void sendLoansWarnEmail(FundAccount,Long)
+ boolean validateAdminFeeAndTransferfee(FundBaseInfoExt,Long,Long)
# String getLendAmountKey(Long)
- void updatePending(FundBaseInfoExt,Long,FundAccount)
+ Long getAdminFeeByFundId(Long,Long)
- Long updatePendingAdmingFee(Long,Long)
}
class com.welab.fund.test.refund.RefundTest {
- RefundService refundServiceImple
- RefundAmountRetracementTimerCmdExe refundAmountRetracementTimerCmdExe
+ void sendEmail()
+ void testRetracementTimerCmdExe()
}
interface com.welab.fund.mapper.RetracementReocrdExtMapper {
~ int insertBatch(List<TrackVo>)
~ List<RetracementReocrd> findByTransIds(List<String>)
~ int updateStatus(RetracementReocrd)
}
interface com.welab.fund.mapper.RetracementPlanExtMapper {
~ List<RetracementPlan> getUndonePlan()
}
class com.welab.fund.mode.FundMqErrorExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundMqErrorExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundMqErrorExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andContentIsNull()
+ Criteria andContentIsNotNull()
+ Criteria andContentEqualTo(String)
+ Criteria andContentNotEqualTo(String)
+ Criteria andContentGreaterThan(String)
+ Criteria andContentGreaterThanOrEqualTo(String)
+ Criteria andContentLessThan(String)
+ Criteria andContentLessThanOrEqualTo(String)
+ Criteria andContentLike(String)
+ Criteria andContentNotLike(String)
+ Criteria andContentIn(List<String>)
+ Criteria andContentNotIn(List<String>)
+ Criteria andContentBetween(String,String)
+ Criteria andContentNotBetween(String,String)
+ Criteria andRetriesIsNull()
+ Criteria andRetriesIsNotNull()
+ Criteria andRetriesEqualTo(Integer)
+ Criteria andRetriesNotEqualTo(Integer)
+ Criteria andRetriesGreaterThan(Integer)
+ Criteria andRetriesGreaterThanOrEqualTo(Integer)
+ Criteria andRetriesLessThan(Integer)
+ Criteria andRetriesLessThanOrEqualTo(Integer)
+ Criteria andRetriesIn(List<Integer>)
+ Criteria andRetriesNotIn(List<Integer>)
+ Criteria andRetriesBetween(Integer,Integer)
+ Criteria andRetriesNotBetween(Integer,Integer)
+ Criteria andStatusIsNull()
+ Criteria andStatusIsNotNull()
+ Criteria andStatusEqualTo(Boolean)
+ Criteria andStatusNotEqualTo(Boolean)
+ Criteria andStatusGreaterThan(Boolean)
+ Criteria andStatusGreaterThanOrEqualTo(Boolean)
+ Criteria andStatusLessThan(Boolean)
+ Criteria andStatusLessThanOrEqualTo(Boolean)
+ Criteria andStatusIn(List<Boolean>)
+ Criteria andStatusNotIn(List<Boolean>)
+ Criteria andStatusBetween(Boolean,Boolean)
+ Criteria andStatusNotBetween(Boolean,Boolean)
+ Criteria andMsgTypeIsNull()
+ Criteria andMsgTypeIsNotNull()
+ Criteria andMsgTypeEqualTo(Byte)
+ Criteria andMsgTypeNotEqualTo(Byte)
+ Criteria andMsgTypeGreaterThan(Byte)
+ Criteria andMsgTypeGreaterThanOrEqualTo(Byte)
+ Criteria andMsgTypeLessThan(Byte)
+ Criteria andMsgTypeLessThanOrEqualTo(Byte)
+ Criteria andMsgTypeIn(List<Byte>)
+ Criteria andMsgTypeNotIn(List<Byte>)
+ Criteria andMsgTypeBetween(Byte,Byte)
+ Criteria andMsgTypeNotBetween(Byte,Byte)
+ Criteria andMqQueueIsNull()
+ Criteria andMqQueueIsNotNull()
+ Criteria andMqQueueEqualTo(String)
+ Criteria andMqQueueNotEqualTo(String)
+ Criteria andMqQueueGreaterThan(String)
+ Criteria andMqQueueGreaterThanOrEqualTo(String)
+ Criteria andMqQueueLessThan(String)
+ Criteria andMqQueueLessThanOrEqualTo(String)
+ Criteria andMqQueueLike(String)
+ Criteria andMqQueueNotLike(String)
+ Criteria andMqQueueIn(List<String>)
+ Criteria andMqQueueNotIn(List<String>)
+ Criteria andMqQueueBetween(String,String)
+ Criteria andMqQueueNotBetween(String,String)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.FundMqErrorExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundMqErrorExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.FundFtWithdrawalListExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundFtWithdrawalListExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundFtWithdrawalListExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andBatchCodeFlowIdIsNull()
+ Criteria andBatchCodeFlowIdIsNotNull()
+ Criteria andBatchCodeFlowIdEqualTo(Long)
+ Criteria andBatchCodeFlowIdNotEqualTo(Long)
+ Criteria andBatchCodeFlowIdGreaterThan(Long)
+ Criteria andBatchCodeFlowIdGreaterThanOrEqualTo(Long)
+ Criteria andBatchCodeFlowIdLessThan(Long)
+ Criteria andBatchCodeFlowIdLessThanOrEqualTo(Long)
+ Criteria andBatchCodeFlowIdIn(List<Long>)
+ Criteria andBatchCodeFlowIdNotIn(List<Long>)
+ Criteria andBatchCodeFlowIdBetween(Long,Long)
+ Criteria andBatchCodeFlowIdNotBetween(Long,Long)
+ Criteria andFundTradingIdIsNull()
+ Criteria andFundTradingIdIsNotNull()
+ Criteria andFundTradingIdEqualTo(Long)
+ Criteria andFundTradingIdNotEqualTo(Long)
+ Criteria andFundTradingIdGreaterThan(Long)
+ Criteria andFundTradingIdGreaterThanOrEqualTo(Long)
+ Criteria andFundTradingIdLessThan(Long)
+ Criteria andFundTradingIdLessThanOrEqualTo(Long)
+ Criteria andFundTradingIdIn(List<Long>)
+ Criteria andFundTradingIdNotIn(List<Long>)
+ Criteria andFundTradingIdBetween(Long,Long)
+ Criteria andFundTradingIdNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.FundFtWithdrawalListExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundFtWithdrawalListExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.app.impl.FundLoansDubboServiceImpl {
- FundMatchRuleManager fundMatchService
- FundMqProducer fundMqProducer
- FundConfigService fundConfigService
- {static} long REMATCH_TIME
- JedisCluster jedisCluster
- AdvanceScoreServiceFace advanceScoreServiceFace
- UserProfileServiceFace userServiceFace
- BaseFundLoansService baseFundLoansService
- String loansStatusUpdateKey
+ void rematch(FundLoansDTO)
+ Response<Object> addFundLoansRecord(FundLoansDTO)
+ Response addFundLoansRecordNoMatch(FundLoansDTO)
+ void notifyApplication(FundLoansDTO)
+ void reject(FifCashierRejectedDto)
+ Response updateApprovedAmount(FundLoansDTO)
}
class com.welab.fund.app.command.RefundT1CmdExe {
- JedisCluster jedisCluster
- RefundService refundService
- FundServiceManager fundServiceManager
- FundTransferService fundTransferService
- BaseFundRefundRecordService baseFundRefundRecordService
- BaseFundAccountService baseFundAccountService
- RepaymentTrackRemoteService repaymentTrackRemoteService
+ void refundT1(RefundModel,String)
}
class com.welab.fund.app.impl.FundTasticDubboServiceImpl {
- FundBatchcodeService fundBatchcodeService
- BaseFundInfoService baseFundInfoService
- BaseFundLoanMatchBatchcodeService baseFundLoanMatchBatchcodeService
- BaseFundLoansService baseFundLoansService
- BaseBatchcodeAccountService baseBatchcodeAccountService
- JedisCluster jedis
- FundMqProducer fundMqProducer
- TopupNotificationsCmdExe topupNotificationsCmdExe
+ void loansInterestNotify(LoansNotifyCmd)
+ void loansInterestNotify(LoansNotifyCmd,boolean)
+ TopupNotificationsResDTO topupNotifications(TopupNotificationsCmd)
+ PageInfo<TopupDTO> findTopupByPage(TopupQryDTO)
+ FundTasticResponseDTO getFunder(FundTasticRequestDTO)
+ void rollbackLoans(FundTasticRollbackLoansCmd)
+ void rollbackLoans(FundTasticRollbackLoansCmd,boolean)
+ void loansNotify(LoansNotifyCmd)
+ Response<Map<String,String>> getBatchcode(List<String>)
+ Response<List<String>> getLoannumber(String)
+ void bindLoans(FundLoansDTO)
+ void withdrawal(FundTasticRequestDTO)
}
class com.welab.fund.mode.FundFtCallbackLogExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundFtCallbackLogExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundFtCallbackLogExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andRequestParamsIsNull()
+ Criteria andRequestParamsIsNotNull()
+ Criteria andRequestParamsEqualTo(String)
+ Criteria andRequestParamsNotEqualTo(String)
+ Criteria andRequestParamsGreaterThan(String)
+ Criteria andRequestParamsGreaterThanOrEqualTo(String)
+ Criteria andRequestParamsLessThan(String)
+ Criteria andRequestParamsLessThanOrEqualTo(String)
+ Criteria andRequestParamsLike(String)
+ Criteria andRequestParamsNotLike(String)
+ Criteria andRequestParamsIn(List<String>)
+ Criteria andRequestParamsNotIn(List<String>)
+ Criteria andRequestParamsBetween(String,String)
+ Criteria andRequestParamsNotBetween(String,String)
+ Criteria andSignatureIsNull()
+ Criteria andSignatureIsNotNull()
+ Criteria andSignatureEqualTo(String)
+ Criteria andSignatureNotEqualTo(String)
+ Criteria andSignatureGreaterThan(String)
+ Criteria andSignatureGreaterThanOrEqualTo(String)
+ Criteria andSignatureLessThan(String)
+ Criteria andSignatureLessThanOrEqualTo(String)
+ Criteria andSignatureLike(String)
+ Criteria andSignatureNotLike(String)
+ Criteria andSignatureIn(List<String>)
+ Criteria andSignatureNotIn(List<String>)
+ Criteria andSignatureBetween(String,String)
+ Criteria andSignatureNotBetween(String,String)
+ Criteria andResponseIsNull()
+ Criteria andResponseIsNotNull()
+ Criteria andResponseEqualTo(String)
+ Criteria andResponseNotEqualTo(String)
+ Criteria andResponseGreaterThan(String)
+ Criteria andResponseGreaterThanOrEqualTo(String)
+ Criteria andResponseLessThan(String)
+ Criteria andResponseLessThanOrEqualTo(String)
+ Criteria andResponseLike(String)
+ Criteria andResponseNotLike(String)
+ Criteria andResponseIn(List<String>)
+ Criteria andResponseNotIn(List<String>)
+ Criteria andResponseBetween(String,String)
+ Criteria andResponseNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.FundFtCallbackLogExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.FundFtCallbackLogExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.app.manager.transfer.TransferManager {
- PayRemoteService payRemoteService
- FundTradingLocalService fundTradingLocalService
- BaseFundTradingService baseFundTradingService
- FundMessageLocalService fundMessageLocalService
- FundConfigService fundConfigServiceImpl
- BaseFundAccountService baseFundAccountService
+ Long transferAmount(TransferModel)
+ TransferDto buildRefundDto(FundAccount,FundAccount,FundTrading)
+ void transferAmount(FundTrading,TransferDto)
}
enum com.welab.fund.enums.RefundRecordTypeEnum {
+  CHECK
+  NO_CHECK
+  CHECK_SOLD
+  NO_CHECK_SOLD
- Byte type
- Byte markType
- RefundRecordTypeEnum checkEnum
- String tradingType
+ {static} RefundRecordTypeEnum getByType(Byte)
+ {static} boolean beNoCheck(Byte)
+ {static} boolean beCheck(Byte)
+ {static} boolean isSold(Byte)
}
enum com.welab.fund.enums.DisbursementsFundAccountEnum {
+  BNI_TO_PERMATA
+  BNI_TO_BCA
- Integer type
}
class com.welab.fund.exception.FundException {
- {static} long serialVersionUID
- <<Create>> FundException()
+ <<Create>> FundException(Integer)
+ <<Create>> FundException(Integer,String)
+ <<Create>> FundException(ResponsCodeType.UserResponsCodeTypeEnum)
}
interface com.welab.fund.mapper.RefundDetailMapper {
~ int countByExample(RefundDetailExample)
~ int deleteByExample(RefundDetailExample)
~ int deleteByPrimaryKey(Long)
~ int insert(RefundDetail)
~ int insertSelective(RefundDetail)
~ List<RefundDetail> selectByExample(RefundDetailExample)
~ RefundDetail selectByPrimaryKey(Long)
~ int updateByExampleSelective(RefundDetail,RefundDetailExample)
~ int updateByExample(RefundDetail,RefundDetailExample)
~ int updateByPrimaryKeySelective(RefundDetail)
~ int updateByPrimaryKey(RefundDetail)
}
class com.welab.fund.app.manager.RefundManager {
- BaseRefundJobRecordService baseRefundJobRecordService
- RepaymentTrackRemoteService repaymentTrackRemoteService
- BaseFundTradingService baseFundTradingService
- FundServiceManager fundServiceManager
+ List<Date> checkRefundDate(List<Date>,RefundChannelEnum)
+ Map<Date,Long> calculateFaspayRefundAmount(List<Date>,RefundChannelEnum)
+ RefundJobRecord buildRefundJobRecordForDate(RefundChannelEnum,Date,String,String,Long,Date)
+ void updateRefundJobRecordStatus(RefundChannelEnum)
+ void addRefundJobRecord(FundRefundRecord,Long,Long,Long,Long)
}
class com.welab.fund.app.base.BaseRefundTradingRecordService {
- RefundTradingRecordMapper refundTradingRecordMapper
- RefundTradingRecordExtMapper refundTradingRecordExtMapper
+ int insertRefundTradingRecord(Long,Long,Long)
}
interface com.welab.fund.mapper.FundMatchRuleTrackExtMapper {
~ List<FundMatchRuleTrack> getLastTenRecord(String)
}
class com.welab.fund.mode.FundFtImportData {
- Long id
- Byte fundAccType
- Byte fundRateType
- String fullName
- String accountNumber
- String mobile
- String bankType
- String bankCode
- Date createdAt
- Date updatedAt
- String uploadBody
+ Long getId()
+ void setId(Long)
+ Byte getFundAccType()
+ void setFundAccType(Byte)
+ Byte getFundRateType()
+ void setFundRateType(Byte)
+ String getFullName()
+ void setFullName(String)
+ String getAccountNumber()
+ void setAccountNumber(String)
+ String getMobile()
+ void setMobile(String)
+ String getBankType()
+ void setBankType(String)
+ String getBankCode()
+ void setBankCode(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getUploadBody()
+ void setUploadBody(String)
}
class com.welab.fund.job.FundtasticBatchcodeUpdateJob_Test {
- FundtasticBatchcodeUpdateJob fundtasticBatchcodeUpdateJob
- FundtasticRechargeReportJob fundtasticRechargeReportJob
+ void execute_test()
+ void execute2()
}
class com.welab.fund.dto.LoansNotifyCmd {
- {static} long serialVersionUID
- String loanNumber
- Long interestAmount
}
class com.welab.fund.mode.FundBaseInfoExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundBaseInfoExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundBaseInfoExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
# void addCriterionForJDBCTime(String,Date,String)
# void addCriterionForJDBCTime(String,List<Date>,String)
# void addCriterionForJDBCTime(String,Date,Date,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundNameIsNull()
+ Criteria andFundNameIsNotNull()
+ Criteria andFundNameEqualTo(String)
+ Criteria andFundNameNotEqualTo(String)
+ Criteria andFundNameGreaterThan(String)
+ Criteria andFundNameGreaterThanOrEqualTo(String)
+ Criteria andFundNameLessThan(String)
+ Criteria andFundNameLessThanOrEqualTo(String)
+ Criteria andFundNameLike(String)
+ Criteria andFundNameNotLike(String)
+ Criteria andFundNameIn(List<String>)
+ Criteria andFundNameNotIn(List<String>)
+ Criteria andFundNameBetween(String,String)
+ Criteria andFundNameNotBetween(String,String)
+ Criteria andFundCodeIsNull()
+ Criteria andFundCodeIsNotNull()
+ Criteria andFundCodeEqualTo(String)
+ Criteria andFundCodeNotEqualTo(String)
+ Criteria andFundCodeGreaterThan(String)
+ Criteria andFundCodeGreaterThanOrEqualTo(String)
+ Criteria andFundCodeLessThan(String)
+ Criteria andFundCodeLessThanOrEqualTo(String)
+ Criteria andFundCodeLike(String)
+ Criteria andFundCodeNotLike(String)
+ Criteria andFundCodeIn(List<String>)
+ Criteria andFundCodeNotIn(List<String>)
+ Criteria andFundCodeBetween(String,String)
+ Criteria andFundCodeNotBetween(String,String)
+ Criteria andServiceIdIsNull()
+ Criteria andServiceIdIsNotNull()
+ Criteria andServiceIdEqualTo(String)
+ Criteria andServiceIdNotEqualTo(String)
+ Criteria andServiceIdGreaterThan(String)
+ Criteria andServiceIdGreaterThanOrEqualTo(String)
+ Criteria andServiceIdLessThan(String)
+ Criteria andServiceIdLessThanOrEqualTo(String)
+ Criteria andServiceIdLike(String)
+ Criteria andServiceIdNotLike(String)
+ Criteria andServiceIdIn(List<String>)
+ Criteria andServiceIdNotIn(List<String>)
+ Criteria andServiceIdBetween(String,String)
+ Criteria andServiceIdNotBetween(String,String)
+ Criteria andFundTypeIsNull()
+ Criteria andFundTypeIsNotNull()
+ Criteria andFundTypeEqualTo(String)
+ Criteria andFundTypeNotEqualTo(String)
+ Criteria andFundTypeGreaterThan(String)
+ Criteria andFundTypeGreaterThanOrEqualTo(String)
+ Criteria andFundTypeLessThan(String)
+ Criteria andFundTypeLessThanOrEqualTo(String)
+ Criteria andFundTypeLike(String)
+ Criteria andFundTypeNotLike(String)
+ Criteria andFundTypeIn(List<String>)
+ Criteria andFundTypeNotIn(List<String>)
+ Criteria andFundTypeBetween(String,String)
+ Criteria andFundTypeNotBetween(String,String)
+ Criteria andPhoneIsNull()
+ Criteria andPhoneIsNotNull()
+ Criteria andPhoneEqualTo(String)
+ Criteria andPhoneNotEqualTo(String)
+ Criteria andPhoneGreaterThan(String)
+ Criteria andPhoneGreaterThanOrEqualTo(String)
+ Criteria andPhoneLessThan(String)
+ Criteria andPhoneLessThanOrEqualTo(String)
+ Criteria andPhoneLike(String)
+ Criteria andPhoneNotLike(String)
+ Criteria andPhoneIn(List<String>)
+ Criteria andPhoneNotIn(List<String>)
+ Criteria andPhoneBetween(String,String)
+ Criteria andPhoneNotBetween(String,String)
+ Criteria andAddressIsNull()
+ Criteria andAddressIsNotNull()
+ Criteria andAddressEqualTo(String)
+ Criteria andAddressNotEqualTo(String)
+ Criteria andAddressGreaterThan(String)
+ Criteria andAddressGreaterThanOrEqualTo(String)
+ Criteria andAddressLessThan(String)
+ Criteria andAddressLessThanOrEqualTo(String)
+ Criteria andAddressLike(String)
+ Criteria andAddressNotLike(String)
+ Criteria andAddressIn(List<String>)
+ Criteria andAddressNotIn(List<String>)
+ Criteria andAddressBetween(String,String)
+ Criteria andAddressNotBetween(String,String)
+ Criteria andLicenseNumIsNull()
+ Criteria andLicenseNumIsNotNull()
+ Criteria andLicenseNumEqualTo(String)
+ Criteria andLicenseNumNotEqualTo(String)
+ Criteria andLicenseNumGreaterThan(String)
+ Criteria andLicenseNumGreaterThanOrEqualTo(String)
+ Criteria andLicenseNumLessThan(String)
+ Criteria andLicenseNumLessThanOrEqualTo(String)
+ Criteria andLicenseNumLike(String)
+ Criteria andLicenseNumNotLike(String)
+ Criteria andLicenseNumIn(List<String>)
+ Criteria andLicenseNumNotIn(List<String>)
+ Criteria andLicenseNumBetween(String,String)
+ Criteria andLicenseNumNotBetween(String,String)
+ Criteria andStatusIsNull()
+ Criteria andStatusIsNotNull()
+ Criteria andStatusEqualTo(Byte)
+ Criteria andStatusNotEqualTo(Byte)
+ Criteria andStatusGreaterThan(Byte)
+ Criteria andStatusGreaterThanOrEqualTo(Byte)
+ Criteria andStatusLessThan(Byte)
+ Criteria andStatusLessThanOrEqualTo(Byte)
+ Criteria andStatusIn(List<Byte>)
+ Criteria andStatusNotIn(List<Byte>)
+ Criteria andStatusBetween(Byte,Byte)
+ Criteria andStatusNotBetween(Byte,Byte)
+ Criteria andOrgTypeIsNull()
+ Criteria andOrgTypeIsNotNull()
+ Criteria andOrgTypeEqualTo(String)
+ Criteria andOrgTypeNotEqualTo(String)
+ Criteria andOrgTypeGreaterThan(String)
+ Criteria andOrgTypeGreaterThanOrEqualTo(String)
+ Criteria andOrgTypeLessThan(String)
+ Criteria andOrgTypeLessThanOrEqualTo(String)
+ Criteria andOrgTypeLike(String)
+ Criteria andOrgTypeNotLike(String)
+ Criteria andOrgTypeIn(List<String>)
+ Criteria andOrgTypeNotIn(List<String>)
+ Criteria andOrgTypeBetween(String,String)
+ Criteria andOrgTypeNotBetween(String,String)
+ Criteria andLegalTypeIsNull()
+ Criteria andLegalTypeIsNotNull()
+ Criteria andLegalTypeEqualTo(String)
+ Criteria andLegalTypeNotEqualTo(String)
+ Criteria andLegalTypeGreaterThan(String)
+ Criteria andLegalTypeGreaterThanOrEqualTo(String)
+ Criteria andLegalTypeLessThan(String)
+ Criteria andLegalTypeLessThanOrEqualTo(String)
+ Criteria andLegalTypeLike(String)
+ Criteria andLegalTypeNotLike(String)
+ Criteria andLegalTypeIn(List<String>)
+ Criteria andLegalTypeNotIn(List<String>)
+ Criteria andLegalTypeBetween(String,String)
+ Criteria andLegalTypeNotBetween(String,String)
+ Criteria andLegalNameIsNull()
+ Criteria andLegalNameIsNotNull()
+ Criteria andLegalNameEqualTo(String)
+ Criteria andLegalNameNotEqualTo(String)
+ Criteria andLegalNameGreaterThan(String)
+ Criteria andLegalNameGreaterThanOrEqualTo(String)
+ Criteria andLegalNameLessThan(String)
+ Criteria andLegalNameLessThanOrEqualTo(String)
+ Criteria andLegalNameLike(String)
+ Criteria andLegalNameNotLike(String)
+ Criteria andLegalNameIn(List<String>)
+ Criteria andLegalNameNotIn(List<String>)
+ Criteria andLegalNameBetween(String,String)
+ Criteria andLegalNameNotBetween(String,String)
+ Criteria andLegalNumIsNull()
+ Criteria andLegalNumIsNotNull()
+ Criteria andLegalNumEqualTo(String)
+ Criteria andLegalNumNotEqualTo(String)
+ Criteria andLegalNumGreaterThan(String)
+ Criteria andLegalNumGreaterThanOrEqualTo(String)
+ Criteria andLegalNumLessThan(String)
+ Criteria andLegalNumLessThanOrEqualTo(String)
+ Criteria andLegalNumLike(String)
+ Criteria andLegalNumNotLike(String)
+ Criteria andLegalNumIn(List<String>)
+ Criteria andLegalNumNotIn(List<String>)
+ Criteria andLegalNumBetween(String,String)
+ Criteria andLegalNumNotBetween(String,String)
+ Criteria andLoanStartIsNull()
+ Criteria andLoanStartIsNotNull()
+ Criteria andLoanStartEqualTo(Date)
+ Criteria andLoanStartNotEqualTo(Date)
+ Criteria andLoanStartGreaterThan(Date)
+ Criteria andLoanStartGreaterThanOrEqualTo(Date)
+ Criteria andLoanStartLessThan(Date)
+ Criteria andLoanStartLessThanOrEqualTo(Date)
+ Criteria andLoanStartIn(List<Date>)
+ Criteria andLoanStartNotIn(List<Date>)
+ Criteria andLoanStartBetween(Date,Date)
+ Criteria andLoanStartNotBetween(Date,Date)
+ Criteria andLoanEndIsNull()
+ Criteria andLoanEndIsNotNull()
+ Criteria andLoanEndEqualTo(Date)
+ Criteria andLoanEndNotEqualTo(Date)
+ Criteria andLoanEndGreaterThan(Date)
+ Criteria andLoanEndGreaterThanOrEqualTo(Date)
+ Criteria andLoanEndLessThan(Date)
+ Criteria andLoanEndLessThanOrEqualTo(Date)
+ Criteria andLoanEndIn(List<Date>)
+ Criteria andLoanEndNotIn(List<Date>)
+ Criteria andLoanEndBetween(Date,Date)
+ Criteria andLoanEndNotBetween(Date,Date)
+ Criteria andLoanModeIsNull()
+ Criteria andLoanModeIsNotNull()
+ Criteria andLoanModeEqualTo(String)
+ Criteria andLoanModeNotEqualTo(String)
+ Criteria andLoanModeGreaterThan(String)
+ Criteria andLoanModeGreaterThanOrEqualTo(String)
+ Criteria andLoanModeLessThan(String)
+ Criteria andLoanModeLessThanOrEqualTo(String)
+ Criteria andLoanModeLike(String)
+ Criteria andLoanModeNotLike(String)
+ Criteria andLoanModeIn(List<String>)
+ Criteria andLoanModeNotIn(List<String>)
+ Criteria andLoanModeBetween(String,String)
+ Criteria andLoanModeNotBetween(String,String)
+ Criteria andRepaymentStartIsNull()
+ Criteria andRepaymentStartIsNotNull()
+ Criteria andRepaymentStartEqualTo(Date)
+ Criteria andRepaymentStartNotEqualTo(Date)
+ Criteria andRepaymentStartGreaterThan(Date)
+ Criteria andRepaymentStartGreaterThanOrEqualTo(Date)
+ Criteria andRepaymentStartLessThan(Date)
+ Criteria andRepaymentStartLessThanOrEqualTo(Date)
+ Criteria andRepaymentStartIn(List<Date>)
+ Criteria andRepaymentStartNotIn(List<Date>)
+ Criteria andRepaymentStartBetween(Date,Date)
+ Criteria andRepaymentStartNotBetween(Date,Date)
+ Criteria andRepaymentEndIsNull()
+ Criteria andRepaymentEndIsNotNull()
+ Criteria andRepaymentEndEqualTo(Date)
+ Criteria andRepaymentEndNotEqualTo(Date)
+ Criteria andRepaymentEndGreaterThan(Date)
+ Criteria andRepaymentEndGreaterThanOrEqualTo(Date)
+ Criteria andRepaymentEndLessThan(Date)
+ Criteria andRepaymentEndLessThanOrEqualTo(Date)
+ Criteria andRepaymentEndIn(List<Date>)
+ Criteria andRepaymentEndNotIn(List<Date>)
+ Criteria andRepaymentEndBetween(Date,Date)
+ Criteria andRepaymentEndNotBetween(Date,Date)
+ Criteria andRepaymentModeIsNull()
+ Criteria andRepaymentModeIsNotNull()
+ Criteria andRepaymentModeEqualTo(String)
+ Criteria andRepaymentModeNotEqualTo(String)
+ Criteria andRepaymentModeGreaterThan(String)
+ Criteria andRepaymentModeGreaterThanOrEqualTo(String)
+ Criteria andRepaymentModeLessThan(String)
+ Criteria andRepaymentModeLessThanOrEqualTo(String)
+ Criteria andRepaymentModeLike(String)
+ Criteria andRepaymentModeNotLike(String)
+ Criteria andRepaymentModeIn(List<String>)
+ Criteria andRepaymentModeNotIn(List<String>)
+ Criteria andRepaymentModeBetween(String,String)
+ Criteria andRepaymentModeNotBetween(String,String)
+ Criteria andIsApproveIsNull()
+ Criteria andIsApproveIsNotNull()
+ Criteria andIsApproveEqualTo(String)
+ Criteria andIsApproveNotEqualTo(String)
+ Criteria andIsApproveGreaterThan(String)
+ Criteria andIsApproveGreaterThanOrEqualTo(String)
+ Criteria andIsApproveLessThan(String)
+ Criteria andIsApproveLessThanOrEqualTo(String)
+ Criteria andIsApproveLike(String)
+ Criteria andIsApproveNotLike(String)
+ Criteria andIsApproveIn(List<String>)
+ Criteria andIsApproveNotIn(List<String>)
+ Criteria andIsApproveBetween(String,String)
+ Criteria andIsApproveNotBetween(String,String)
+ Criteria andPaymentMethodIsNull()
+ Criteria andPaymentMethodIsNotNull()
+ Criteria andPaymentMethodEqualTo(String)
+ Criteria andPaymentMethodNotEqualTo(String)
+ Criteria andPaymentMethodGreaterThan(String)
+ Criteria andPaymentMethodGreaterThanOrEqualTo(String)
+ Criteria andPaymentMethodLessThan(String)
+ Criteria andPaymentMethodLessThanOrEqualTo(String)
+ Criteria andPaymentMethodLike(String)
+ Criteria andPaymentMethodNotLike(String)
+ Criteria andPaymentMethodIn(List<String>)
+ Criteria andPaymentMethodNotIn(List<String>)
+ Criteria andPaymentMethodBetween(String,String)
+ Criteria andPaymentMethodNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
+ Criteria andIsForFeeIsNull()
+ Criteria andIsForFeeIsNotNull()
+ Criteria andIsForFeeEqualTo(Boolean)
+ Criteria andIsForFeeNotEqualTo(Boolean)
+ Criteria andIsForFeeGreaterThan(Boolean)
+ Criteria andIsForFeeGreaterThanOrEqualTo(Boolean)
+ Criteria andIsForFeeLessThan(Boolean)
+ Criteria andIsForFeeLessThanOrEqualTo(Boolean)
+ Criteria andIsForFeeIn(List<Boolean>)
+ Criteria andIsForFeeNotIn(List<Boolean>)
+ Criteria andIsForFeeBetween(Boolean,Boolean)
+ Criteria andIsForFeeNotBetween(Boolean,Boolean)
+ Criteria andAlarmBalanceIsNull()
+ Criteria andAlarmBalanceIsNotNull()
+ Criteria andAlarmBalanceEqualTo(Long)
+ Criteria andAlarmBalanceNotEqualTo(Long)
+ Criteria andAlarmBalanceGreaterThan(Long)
+ Criteria andAlarmBalanceGreaterThanOrEqualTo(Long)
+ Criteria andAlarmBalanceLessThan(Long)
+ Criteria andAlarmBalanceLessThanOrEqualTo(Long)
+ Criteria andAlarmBalanceIn(List<Long>)
+ Criteria andAlarmBalanceNotIn(List<Long>)
+ Criteria andAlarmBalanceBetween(Long,Long)
+ Criteria andAlarmBalanceNotBetween(Long,Long)
}
class com.welab.fund.mode.FundBaseInfoExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundBaseInfoExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.ext.FundMatchRuleExt {
- Boolean updatedStatus
}
class com.welab.fund.vo.FundLoansVo {
- Long id
- String loanNumber
- Integer status
- List<Long> ids
}
class com.welab.fund.app.base.BaseRetracementPlanService {
- RetracementPlanMapper retracementPlanMapper
- RetracementPlanExtMapper retracementPlanExtMapper
+ void insertSelective(RetracementPlan)
+ List<RetracementPlan> getUndonePlan()
+ void updateExecedById(Long,boolean)
}
interface com.welab.fund.mapper.FundFtImportDataMapper {
~ long countByExample(FundFtImportDataExample)
~ int deleteByExample(FundFtImportDataExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundFtImportData)
~ int insertSelective(FundFtImportData)
~ List<FundFtImportData> selectByExampleWithBLOBs(FundFtImportDataExample)
~ List<FundFtImportData> selectByExample(FundFtImportDataExample)
~ FundFtImportData selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundFtImportData,FundFtImportDataExample)
~ int updateByExampleWithBLOBs(FundFtImportData,FundFtImportDataExample)
~ int updateByExample(FundFtImportData,FundFtImportDataExample)
~ int updateByPrimaryKeySelective(FundFtImportData)
~ int updateByPrimaryKeyWithBLOBs(FundFtImportData)
~ int updateByPrimaryKey(FundFtImportData)
}
class com.welab.fund.filter.LogFilter {
- {static} String NOTIFICATION_PREFIX
- {static} String REQUEST_PREFIX
- {static} String RESPONSE_PREFIX
- AtomicLong _id
# void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)
+ void destroy()
- void log(StringBuilder)
- StringBuilder prefixId(StringBuilder,long)
- void printRequestLine(StringBuilder,String,long,String,String)
- void printResponseLine(StringBuilder,String,long,int)
- void printPrefixedHeaders(StringBuilder,long,String,HttpServletRequest)
}
class com.welab.fund.mode.FundAccountTrackExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundAccountTrackExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundAccountTrackExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundIdIsNull()
+ Criteria andFundIdIsNotNull()
+ Criteria andFundIdEqualTo(Long)
+ Criteria andFundIdNotEqualTo(Long)
+ Criteria andFundIdGreaterThan(Long)
+ Criteria andFundIdGreaterThanOrEqualTo(Long)
+ Criteria andFundIdLessThan(Long)
+ Criteria andFundIdLessThanOrEqualTo(Long)
+ Criteria andFundIdIn(List<Long>)
+ Criteria andFundIdNotIn(List<Long>)
+ Criteria andFundIdBetween(Long,Long)
+ Criteria andFundIdNotBetween(Long,Long)
+ Criteria andGatewayTypeIsNull()
+ Criteria andGatewayTypeIsNotNull()
+ Criteria andGatewayTypeEqualTo(Byte)
+ Criteria andGatewayTypeNotEqualTo(Byte)
+ Criteria andGatewayTypeGreaterThan(Byte)
+ Criteria andGatewayTypeGreaterThanOrEqualTo(Byte)
+ Criteria andGatewayTypeLessThan(Byte)
+ Criteria andGatewayTypeLessThanOrEqualTo(Byte)
+ Criteria andGatewayTypeIn(List<Byte>)
+ Criteria andGatewayTypeNotIn(List<Byte>)
+ Criteria andGatewayTypeBetween(Byte,Byte)
+ Criteria andGatewayTypeNotBetween(Byte,Byte)
+ Criteria andRemoteAmountIsNull()
+ Criteria andRemoteAmountIsNotNull()
+ Criteria andRemoteAmountEqualTo(Long)
+ Criteria andRemoteAmountNotEqualTo(Long)
+ Criteria andRemoteAmountGreaterThan(Long)
+ Criteria andRemoteAmountGreaterThanOrEqualTo(Long)
+ Criteria andRemoteAmountLessThan(Long)
+ Criteria andRemoteAmountLessThanOrEqualTo(Long)
+ Criteria andRemoteAmountIn(List<Long>)
+ Criteria andRemoteAmountNotIn(List<Long>)
+ Criteria andRemoteAmountBetween(Long,Long)
+ Criteria andRemoteAmountNotBetween(Long,Long)
+ Criteria andLocalAmountIsNull()
+ Criteria andLocalAmountIsNotNull()
+ Criteria andLocalAmountEqualTo(Long)
+ Criteria andLocalAmountNotEqualTo(Long)
+ Criteria andLocalAmountGreaterThan(Long)
+ Criteria andLocalAmountGreaterThanOrEqualTo(Long)
+ Criteria andLocalAmountLessThan(Long)
+ Criteria andLocalAmountLessThanOrEqualTo(Long)
+ Criteria andLocalAmountIn(List<Long>)
+ Criteria andLocalAmountNotIn(List<Long>)
+ Criteria andLocalAmountBetween(Long,Long)
+ Criteria andLocalAmountNotBetween(Long,Long)
+ Criteria andExtIsNull()
+ Criteria andExtIsNotNull()
+ Criteria andExtEqualTo(String)
+ Criteria andExtNotEqualTo(String)
+ Criteria andExtGreaterThan(String)
+ Criteria andExtGreaterThanOrEqualTo(String)
+ Criteria andExtLessThan(String)
+ Criteria andExtLessThanOrEqualTo(String)
+ Criteria andExtLike(String)
+ Criteria andExtNotLike(String)
+ Criteria andExtIn(List<String>)
+ Criteria andExtNotIn(List<String>)
+ Criteria andExtBetween(String,String)
+ Criteria andExtNotBetween(String,String)
+ Criteria andShortfallIsNull()
+ Criteria andShortfallIsNotNull()
+ Criteria andShortfallEqualTo(Long)
+ Criteria andShortfallNotEqualTo(Long)
+ Criteria andShortfallGreaterThan(Long)
+ Criteria andShortfallGreaterThanOrEqualTo(Long)
+ Criteria andShortfallLessThan(Long)
+ Criteria andShortfallLessThanOrEqualTo(Long)
+ Criteria andShortfallIn(List<Long>)
+ Criteria andShortfallNotIn(List<Long>)
+ Criteria andShortfallBetween(Long,Long)
+ Criteria andShortfallNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.FundAccountTrackExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundAccountTrackExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
interface com.welab.fund.mapper.FundRefundRecordMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(FundRefundRecord)
~ int insertSelective(FundRefundRecord)
~ FundRefundRecord selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(FundRefundRecord)
~ int updateByPrimaryKey(FundRefundRecord)
}
class com.welab.fund.mode.FundFtWithdrawalList {
- Long id
- Long batchCodeFlowId
- Long fundTradingId
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getBatchCodeFlowId()
+ void setBatchCodeFlowId(Long)
+ Long getFundTradingId()
+ void setFundTradingId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.fund.mode.RefundTradingRecordExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> RefundTradingRecordExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.RefundTradingRecordExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andRefundRecordIdIsNull()
+ Criteria andRefundRecordIdIsNotNull()
+ Criteria andRefundRecordIdEqualTo(Long)
+ Criteria andRefundRecordIdNotEqualTo(Long)
+ Criteria andRefundRecordIdGreaterThan(Long)
+ Criteria andRefundRecordIdGreaterThanOrEqualTo(Long)
+ Criteria andRefundRecordIdLessThan(Long)
+ Criteria andRefundRecordIdLessThanOrEqualTo(Long)
+ Criteria andRefundRecordIdIn(List<Long>)
+ Criteria andRefundRecordIdNotIn(List<Long>)
+ Criteria andRefundRecordIdBetween(Long,Long)
+ Criteria andRefundRecordIdNotBetween(Long,Long)
+ Criteria andTradingIdIsNull()
+ Criteria andTradingIdIsNotNull()
+ Criteria andTradingIdEqualTo(Long)
+ Criteria andTradingIdNotEqualTo(Long)
+ Criteria andTradingIdGreaterThan(Long)
+ Criteria andTradingIdGreaterThanOrEqualTo(Long)
+ Criteria andTradingIdLessThan(Long)
+ Criteria andTradingIdLessThanOrEqualTo(Long)
+ Criteria andTradingIdIn(List<Long>)
+ Criteria andTradingIdNotIn(List<Long>)
+ Criteria andTradingIdBetween(Long,Long)
+ Criteria andTradingIdNotBetween(Long,Long)
+ Criteria andFundIdIsNull()
+ Criteria andFundIdIsNotNull()
+ Criteria andFundIdEqualTo(Long)
+ Criteria andFundIdNotEqualTo(Long)
+ Criteria andFundIdGreaterThan(Long)
+ Criteria andFundIdGreaterThanOrEqualTo(Long)
+ Criteria andFundIdLessThan(Long)
+ Criteria andFundIdLessThanOrEqualTo(Long)
+ Criteria andFundIdIn(List<Long>)
+ Criteria andFundIdNotIn(List<Long>)
+ Criteria andFundIdBetween(Long,Long)
+ Criteria andFundIdNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.RefundTradingRecordExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.RefundTradingRecordExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.app.command.FundAccountQryExe_Test {
- FundAccountQryExe fundAccountQryExe
+ void getFundAccount_test()
}
class com.welab.fund.dto.request.TopupQryDTO {
- String mobile
- String transId
- String batchCode
- Date beginTime
- Date endTime
}
interface com.welab.fund.mapper.RefundJobRecordMapper {
~ int countByExample(RefundJobRecordExample)
~ int deleteByExample(RefundJobRecordExample)
~ int deleteByPrimaryKey(Long)
~ int insert(RefundJobRecord)
~ int insertSelective(RefundJobRecord)
~ List<RefundJobRecord> selectByExample(RefundJobRecordExample)
~ RefundJobRecord selectByPrimaryKey(Long)
~ int updateByExampleSelective(RefundJobRecord,RefundJobRecordExample)
~ int updateByExample(RefundJobRecord,RefundJobRecordExample)
~ int updateByPrimaryKeySelective(RefundJobRecord)
~ int updateByPrimaryKey(RefundJobRecord)
}
class com.welab.fund.app.facade.collection.IBuyerInfoServiceFacade {
- IBuyerInfoService iBuyerInfoService
+ FundAccount getAccountByBuyerCode(String)
}
interface com.welab.fund.mapper.RefundDetailExtMapper {
~ int insertList(List<RefundDetail>)
~ int updateSendEmailByIds(List<Long>)
}
enum com.welab.fund.enums.fundinfo.FundApproveEnum {
+  NEED_APPROVE
+  NOT_APPROVE
- String value
- String name
- String enName
+ boolean check(String)
+ {static} List<Map<String,Object>> getStatusList(boolean)
}
class com.welab.fund.app.command.FundApprovedCmdExe {
- FundLoansLocalService fundLoansLocalServiceImple
- FundMqProducer fundMqProducer
- BaseFundLoansService baseFundLoansService
- BaseApplyLoansDataService baseApplyLoansDataService
- String loansStatusUpdateKey
+ void approve(FundLoansVo,Long)
}
interface com.welab.fund.mapper.FundFtCallbackLogMapper {
~ long countByExample(FundFtCallbackLogExample)
~ int deleteByExample(FundFtCallbackLogExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundFtCallbackLog)
~ int insertSelective(FundFtCallbackLog)
~ List<FundFtCallbackLog> selectByExample(FundFtCallbackLogExample)
~ FundFtCallbackLog selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundFtCallbackLog,FundFtCallbackLogExample)
~ int updateByExample(FundFtCallbackLog,FundFtCallbackLogExample)
~ int updateByPrimaryKeySelective(FundFtCallbackLog)
~ int updateByPrimaryKey(FundFtCallbackLog)
}
class com.welab.fund.controller.RefundJobController {
- RefundJobService refundJobService
+ Response<Long> calculateRefund(String)
+ Response executeRefund(Long,String)
+ Response<PageInfo<RefundChangeHistoryVO>> getChangeHistoryList(Integer,Integer)
+ Response downLoadRefundRecord(HttpServletResponse)
- List<Date> resolveDateStr(String)
}
class com.welab.fund.vo.FundTasticAccountVO {
- String fundName
- String fundCode
- String batchCode
- Long totalAmount
- Long balanceAmount
- Long interestAmount
- Long fundAmount
- Long id
- Date expiredAt
- List<FundTasticAccountVO> batchCodeList
}
interface com.welab.fund.mapper.FundManagerExtMapper {
~ List<FundManager> getFundManagerList(FundManagerExt)
~ FundManager getFundManagerByMobile(String)
}
class com.welab.fund.mode.RefundJobRecordExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> RefundJobRecordExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.RefundJobRecordExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
# void addCriterionForJDBCDate(String,Date,String)
# void addCriterionForJDBCDate(String,List<Date>,String)
# void addCriterionForJDBCDate(String,Date,Date,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andTypeIsNull()
+ Criteria andTypeIsNotNull()
+ Criteria andTypeEqualTo(Byte)
+ Criteria andTypeNotEqualTo(Byte)
+ Criteria andTypeGreaterThan(Byte)
+ Criteria andTypeGreaterThanOrEqualTo(Byte)
+ Criteria andTypeLessThan(Byte)
+ Criteria andTypeLessThanOrEqualTo(Byte)
+ Criteria andTypeIn(List<Byte>)
+ Criteria andTypeNotIn(List<Byte>)
+ Criteria andTypeBetween(Byte,Byte)
+ Criteria andTypeNotBetween(Byte,Byte)
+ Criteria andChannelIsNull()
+ Criteria andChannelIsNotNull()
+ Criteria andChannelEqualTo(Byte)
+ Criteria andChannelNotEqualTo(Byte)
+ Criteria andChannelGreaterThan(Byte)
+ Criteria andChannelGreaterThanOrEqualTo(Byte)
+ Criteria andChannelLessThan(Byte)
+ Criteria andChannelLessThanOrEqualTo(Byte)
+ Criteria andChannelIn(List<Byte>)
+ Criteria andChannelNotIn(List<Byte>)
+ Criteria andChannelBetween(Byte,Byte)
+ Criteria andChannelNotBetween(Byte,Byte)
+ Criteria andRefundDateIsNull()
+ Criteria andRefundDateIsNotNull()
+ Criteria andRefundDateEqualTo(Date)
+ Criteria andRefundDateNotEqualTo(Date)
+ Criteria andRefundDateGreaterThan(Date)
+ Criteria andRefundDateGreaterThanOrEqualTo(Date)
+ Criteria andRefundDateLessThan(Date)
+ Criteria andRefundDateLessThanOrEqualTo(Date)
+ Criteria andRefundDateIn(List<Date>)
+ Criteria andRefundDateNotIn(List<Date>)
+ Criteria andRefundDateBetween(Date,Date)
+ Criteria andRefundDateNotBetween(Date,Date)
+ Criteria andJobExecuteTimeIsNull()
+ Criteria andJobExecuteTimeIsNotNull()
+ Criteria andJobExecuteTimeEqualTo(Date)
+ Criteria andJobExecuteTimeNotEqualTo(Date)
+ Criteria andJobExecuteTimeGreaterThan(Date)
+ Criteria andJobExecuteTimeGreaterThanOrEqualTo(Date)
+ Criteria andJobExecuteTimeLessThan(Date)
+ Criteria andJobExecuteTimeLessThanOrEqualTo(Date)
+ Criteria andJobExecuteTimeIn(List<Date>)
+ Criteria andJobExecuteTimeNotIn(List<Date>)
+ Criteria andJobExecuteTimeBetween(Date,Date)
+ Criteria andJobExecuteTimeNotBetween(Date,Date)
+ Criteria andDateStrIsNull()
+ Criteria andDateStrIsNotNull()
+ Criteria andDateStrEqualTo(String)
+ Criteria andDateStrNotEqualTo(String)
+ Criteria andDateStrGreaterThan(String)
+ Criteria andDateStrGreaterThanOrEqualTo(String)
+ Criteria andDateStrLessThan(String)
+ Criteria andDateStrLessThanOrEqualTo(String)
+ Criteria andDateStrLike(String)
+ Criteria andDateStrNotLike(String)
+ Criteria andDateStrIn(List<String>)
+ Criteria andDateStrNotIn(List<String>)
+ Criteria andDateStrBetween(String,String)
+ Criteria andDateStrNotBetween(String,String)
+ Criteria andOperationPersonIsNull()
+ Criteria andOperationPersonIsNotNull()
+ Criteria andOperationPersonEqualTo(String)
+ Criteria andOperationPersonNotEqualTo(String)
+ Criteria andOperationPersonGreaterThan(String)
+ Criteria andOperationPersonGreaterThanOrEqualTo(String)
+ Criteria andOperationPersonLessThan(String)
+ Criteria andOperationPersonLessThanOrEqualTo(String)
+ Criteria andOperationPersonLike(String)
+ Criteria andOperationPersonNotLike(String)
+ Criteria andOperationPersonIn(List<String>)
+ Criteria andOperationPersonNotIn(List<String>)
+ Criteria andOperationPersonBetween(String,String)
+ Criteria andOperationPersonNotBetween(String,String)
+ Criteria andJobAmountIsNull()
+ Criteria andJobAmountIsNotNull()
+ Criteria andJobAmountEqualTo(Long)
+ Criteria andJobAmountNotEqualTo(Long)
+ Criteria andJobAmountGreaterThan(Long)
+ Criteria andJobAmountGreaterThanOrEqualTo(Long)
+ Criteria andJobAmountLessThan(Long)
+ Criteria andJobAmountLessThanOrEqualTo(Long)
+ Criteria andJobAmountIn(List<Long>)
+ Criteria andJobAmountNotIn(List<Long>)
+ Criteria andJobAmountBetween(Long,Long)
+ Criteria andJobAmountNotBetween(Long,Long)
+ Criteria andSoldTypeIsNull()
+ Criteria andSoldTypeIsNotNull()
+ Criteria andSoldTypeEqualTo(Byte)
+ Criteria andSoldTypeNotEqualTo(Byte)
+ Criteria andSoldTypeGreaterThan(Byte)
+ Criteria andSoldTypeGreaterThanOrEqualTo(Byte)
+ Criteria andSoldTypeLessThan(Byte)
+ Criteria andSoldTypeLessThanOrEqualTo(Byte)
+ Criteria andSoldTypeIn(List<Byte>)
+ Criteria andSoldTypeNotIn(List<Byte>)
+ Criteria andSoldTypeBetween(Byte,Byte)
+ Criteria andSoldTypeNotBetween(Byte,Byte)
+ Criteria andFundCodeIsNull()
+ Criteria andFundCodeIsNotNull()
+ Criteria andFundCodeEqualTo(String)
+ Criteria andFundCodeNotEqualTo(String)
+ Criteria andFundCodeGreaterThan(String)
+ Criteria andFundCodeGreaterThanOrEqualTo(String)
+ Criteria andFundCodeLessThan(String)
+ Criteria andFundCodeLessThanOrEqualTo(String)
+ Criteria andFundCodeLike(String)
+ Criteria andFundCodeNotLike(String)
+ Criteria andFundCodeIn(List<String>)
+ Criteria andFundCodeNotIn(List<String>)
+ Criteria andFundCodeBetween(String,String)
+ Criteria andFundCodeNotBetween(String,String)
+ Criteria andFunderAmountIsNull()
+ Criteria andFunderAmountIsNotNull()
+ Criteria andFunderAmountEqualTo(Long)
+ Criteria andFunderAmountNotEqualTo(Long)
+ Criteria andFunderAmountGreaterThan(Long)
+ Criteria andFunderAmountGreaterThanOrEqualTo(Long)
+ Criteria andFunderAmountLessThan(Long)
+ Criteria andFunderAmountLessThanOrEqualTo(Long)
+ Criteria andFunderAmountIn(List<Long>)
+ Criteria andFunderAmountNotIn(List<Long>)
+ Criteria andFunderAmountBetween(Long,Long)
+ Criteria andFunderAmountNotBetween(Long,Long)
+ Criteria andAwdaAmountIsNull()
+ Criteria andAwdaAmountIsNotNull()
+ Criteria andAwdaAmountEqualTo(Long)
+ Criteria andAwdaAmountNotEqualTo(Long)
+ Criteria andAwdaAmountGreaterThan(Long)
+ Criteria andAwdaAmountGreaterThanOrEqualTo(Long)
+ Criteria andAwdaAmountLessThan(Long)
+ Criteria andAwdaAmountLessThanOrEqualTo(Long)
+ Criteria andAwdaAmountIn(List<Long>)
+ Criteria andAwdaAmountNotIn(List<Long>)
+ Criteria andAwdaAmountBetween(Long,Long)
+ Criteria andAwdaAmountNotBetween(Long,Long)
+ Criteria andThirdPartyAmountIsNull()
+ Criteria andThirdPartyAmountIsNotNull()
+ Criteria andThirdPartyAmountEqualTo(Long)
+ Criteria andThirdPartyAmountNotEqualTo(Long)
+ Criteria andThirdPartyAmountGreaterThan(Long)
+ Criteria andThirdPartyAmountGreaterThanOrEqualTo(Long)
+ Criteria andThirdPartyAmountLessThan(Long)
+ Criteria andThirdPartyAmountLessThanOrEqualTo(Long)
+ Criteria andThirdPartyAmountIn(List<Long>)
+ Criteria andThirdPartyAmountNotIn(List<Long>)
+ Criteria andThirdPartyAmountBetween(Long,Long)
+ Criteria andThirdPartyAmountNotBetween(Long,Long)
+ Criteria andTaxAmountIsNull()
+ Criteria andTaxAmountIsNotNull()
+ Criteria andTaxAmountEqualTo(Long)
+ Criteria andTaxAmountNotEqualTo(Long)
+ Criteria andTaxAmountGreaterThan(Long)
+ Criteria andTaxAmountGreaterThanOrEqualTo(Long)
+ Criteria andTaxAmountLessThan(Long)
+ Criteria andTaxAmountLessThanOrEqualTo(Long)
+ Criteria andTaxAmountIn(List<Long>)
+ Criteria andTaxAmountNotIn(List<Long>)
+ Criteria andTaxAmountBetween(Long,Long)
+ Criteria andTaxAmountNotBetween(Long,Long)
+ Criteria andRefundStatusIsNull()
+ Criteria andRefundStatusIsNotNull()
+ Criteria andRefundStatusEqualTo(String)
+ Criteria andRefundStatusNotEqualTo(String)
+ Criteria andRefundStatusGreaterThan(String)
+ Criteria andRefundStatusGreaterThanOrEqualTo(String)
+ Criteria andRefundStatusLessThan(String)
+ Criteria andRefundStatusLessThanOrEqualTo(String)
+ Criteria andRefundStatusLike(String)
+ Criteria andRefundStatusNotLike(String)
+ Criteria andRefundStatusIn(List<String>)
+ Criteria andRefundStatusNotIn(List<String>)
+ Criteria andRefundStatusBetween(String,String)
+ Criteria andRefundStatusNotBetween(String,String)
+ Criteria andFundRefundRecordIdIsNull()
+ Criteria andFundRefundRecordIdIsNotNull()
+ Criteria andFundRefundRecordIdEqualTo(Long)
+ Criteria andFundRefundRecordIdNotEqualTo(Long)
+ Criteria andFundRefundRecordIdGreaterThan(Long)
+ Criteria andFundRefundRecordIdGreaterThanOrEqualTo(Long)
+ Criteria andFundRefundRecordIdLessThan(Long)
+ Criteria andFundRefundRecordIdLessThanOrEqualTo(Long)
+ Criteria andFundRefundRecordIdIn(List<Long>)
+ Criteria andFundRefundRecordIdNotIn(List<Long>)
+ Criteria andFundRefundRecordIdBetween(Long,Long)
+ Criteria andFundRefundRecordIdNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.RefundJobRecordExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.RefundJobRecordExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.app.facade.UserProfileServiceFace {
- UserProfilesService userProfilesService
+ UserProfileVO getUserProfile(Long)
+ UserProfileVO getUserProfile(String,Long)
}
class com.welab.fund.app.service.fundaccount.AddLoansAccount {
+ void processAccountAmountByType(FundTradingExt)
+ FundAccount getFundAccount(FundTradingExt)
}
enum com.welab.fund.enums.fundinfo.FundStatusEnum {
+  ENABLE
+  DISABLE
- Byte value
- String name
- String enName
+ {static} List getStatusList(boolean)
}
class com.welab.fund.dto.response.TopupDTO {
- Long id
- Long fundId
- String thirdPartyUqCode
- String batchCode
- Long rechargeAmount
- Long useAmount
- Long interestAmount
- Date createdAt
- Date updatedAt
- Date expiredAt
- Long freezeAmount
- Long withdrawal
}
class com.welab.fund.controller.FundTasticController {
- FundFtImportDataCmdExe fundFtImportDataCmdExe
- FundBatchcodeAccountService fundBatchcodeAccountService
+ Response<Object> importFunder(Long,MultipartFile)
+ Response<FundTasticAccountVO> totalAmount()
+ Response<PageInfo<FundTasticAccountVO>> fundList(Integer,Integer)
+ Response<Object> updateExpiredDate(FundTasticAccountVO)
}
class com.welab.fund.controller.FundManagerController {
- UserServiceFace userService
- FundManagerService fundManagerService
- BaseFundManagerService baseFundManagerService
+ Response<PageInfo<FundManagerExt>> fundManagerList(PageRequestVo<FundManagerVo>)
+ Response<FundManagerResponseVo> getFundManager(FundManagerVo)
+ Response<List<FundAccountInfoResponseVo>> getFundAuthList(FundManagerVo)
+ Response<Object> updateFundAuth(FundManagerVo)
}
class com.welab.fund.app.command.RefundAmountRetracementCmdExe_Test {
- RefundAmountRetracementCmdExe refundAmountRetracementCmdExe
+ void handleRetracement_test()
}
interface com.welab.fund.app.service.recharge_refund.RechargeAndRefundService {
~ void recharge(FundBaseInfo,Long)
~ FundRefundStatusEnum releaseLoansAccount(FundBaseInfo)
~ FundRefundStatusEnum releaseRepaymentAccount(FundRefundRecord,FundBaseInfo)
}
class com.welab.fund.app.base.BaseFtTopupRecordService {
- FtTopupRecordMapper ftTopupRecordMapper
+ int insertSelective(FtTopupRecord)
+ int updateByPrimaryKeySelective(FtTopupRecord)
+ FtTopupRecord selectOne(String)
}
class com.welab.fund.dto.response.FundTasticResponseDTO {
- {static} long serialVersionUID
- Long fundId
- String fundCode
- String fundName
}
class com.welab.fund.mode.RetracementPlan {
- Long id
- Date execTime
- Boolean execed
- Date createdAt
- Date updatedAt
- String execParams
+ Long getId()
+ void setId(Long)
+ Date getExecTime()
+ void setExecTime(Date)
+ Boolean getExeced()
+ void setExeced(Boolean)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getExecParams()
+ void setExecParams(String)
}
class com.welab.fund.app.manager.match.FundMatchMaumodalRuleManager {
+ {static} String MAUMODAL_NORMAL_RULE_KEY
- ExpressRunner runner
+ <<Create>> FundMatchMaumodalRuleManager()
+ void init()
+ String matchFundInfo(MatchFundModel)
+ void refrush()
}
class com.welab.fund.mode.ApplyLoansDataExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> ApplyLoansDataExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.ApplyLoansDataExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andLoanNumberIsNull()
+ Criteria andLoanNumberIsNotNull()
+ Criteria andLoanNumberEqualTo(String)
+ Criteria andLoanNumberNotEqualTo(String)
+ Criteria andLoanNumberGreaterThan(String)
+ Criteria andLoanNumberGreaterThanOrEqualTo(String)
+ Criteria andLoanNumberLessThan(String)
+ Criteria andLoanNumberLessThanOrEqualTo(String)
+ Criteria andLoanNumberLike(String)
+ Criteria andLoanNumberNotLike(String)
+ Criteria andLoanNumberIn(List<String>)
+ Criteria andLoanNumberNotIn(List<String>)
+ Criteria andLoanNumberBetween(String,String)
+ Criteria andLoanNumberNotBetween(String,String)
+ Criteria andApprovedDataIsNull()
+ Criteria andApprovedDataIsNotNull()
+ Criteria andApprovedDataEqualTo(String)
+ Criteria andApprovedDataNotEqualTo(String)
+ Criteria andApprovedDataGreaterThan(String)
+ Criteria andApprovedDataGreaterThanOrEqualTo(String)
+ Criteria andApprovedDataLessThan(String)
+ Criteria andApprovedDataLessThanOrEqualTo(String)
+ Criteria andApprovedDataLike(String)
+ Criteria andApprovedDataNotLike(String)
+ Criteria andApprovedDataIn(List<String>)
+ Criteria andApprovedDataNotIn(List<String>)
+ Criteria andApprovedDataBetween(String,String)
+ Criteria andApprovedDataNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.ApplyLoansDataExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.ApplyLoansDataExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.app.service.RefundJobService {
- RefundManager refundManager
- UserServiceFace userServiceFace
- BaseRefundJobRecordService baseRefundJobRecordService
- FundTransferService fundTransferService
- RefundT1CmdExe refundT1CmdExe
- FundMqProducer fundMqProducer
- RepaymentTrackRemoteService repaymentTrackRemoteService
- FundAccountService fundAccountService
- RemoteAccountManager remoteAccountManager
- BaseFundAccountService baseFundAccountService
+ Response<Long> calculateRefund(List<Date>)
+ Response executeRefund(List<Date>,Long)
+ Response checkFaspayRecharge(long)
- void saveFaspayRefundJobRecord(List<Date>,Long,long)
- void rechargeFaspay(Map<Date,Long>)
- Map<Date,Long> calculateFaspayRechargeAmount(Map<Date,Long>)
+ void faspayRefundJob(String)
- Response<Long> buildErrorDateResponse(List<Date>)
+ PageInfo<RefundJobRecord> getChangeHistoryList(Integer,Integer)
+ Response downLoadRefundRecord(HttpServletResponse)
- void setExportData(List<RefundJobRecord>)
}
class com.welab.fund.app.service.recharge_refund.SingleRecAndRefServiceImpl {
- FundTradingLocalService fundTradingLocalService
- BaseFundTradingService baseFundTradingService
- FundAccountService fundAccountService
- FundTransferService fundTransferService
- FundConfigService fundConfigService
- RepaymentReleaseCmdExe repaymentReleaseCmdExe
- FundServiceManager fundServiceManager
+ void recharge(FundBaseInfo,Long)
+ FundRefundStatusEnum releaseLoansAccount(FundBaseInfo)
+ FundRefundStatusEnum releaseRepaymentAccount(FundRefundRecord,FundBaseInfo)
}
class com.welab.fund.app.facade.AccountServiceFacade {
- AccountService accountService
+ AccountVO getAccount(AccountDto)
}
class com.welab.fund.app.command.BNIRefundCmdExe {
- {static} int WAIT_TIMES
- {static} int WAIT_TIME
- BaseFundInfoService baseFundInfoService
- FundServiceManager fundServiceManager
- FundAccountService fundAccountService
- RemoteAccountManager remoteAccountManager
- FundMessageLocalService fundMessageLocalService
- RepaymentTrackRemoteService repaymentTrackRemoteService
- BaseFundRefundRecordService baseFundRefundRecordService
- Integer profileValue
+ void refundRepayment(RefundModel)
- List<FundRefundRecord> getSoldTrackVo(Long,Byte,RefundRecordTypeEnum)
- void refundSleep(FundTradingTypeEnum)
+ FundRefundRecord getNoSoldTrackVo(Long,Byte,RefundRecordTypeEnum)
}
enum com.welab.fund.enums.fundinfo.FundPaymentMethodEnum {
+  RISK_PAYMENT
+  OTHER_PAYMENT
- String value
- String name
- String enName
+ boolean check(String)
+ {static} List getStatusList(boolean)
}
class com.welab.fund.app.command.NormalFundMatchRuleCmdExe {
- BaseFundMatchRuleService baseFundMatchRuleService
- FundMqProducer fundMqProducer
- BaseFundMatchRuleTrackService baseFundMatchRuleTrackService
- UserServiceFace userServiceFace
+ void updateNormalRule(List<FundMatchRuleExt>)
+ Response<List<FundMatchRuleTrackVO>> getNormalRuleTrackList(String)
+ Response<List<FundMatchRuleVO>> getNormalRule(String)
- String getRuleKey(String)
}
class com.welab.fund.app.base.batchcode.BaseBatchcodeAccountFlowService {
- FundBatchcodeAccountFlowMapper fundBatchcodeAccountFlowMapper
+ void addFlow(FundBatchcodeAccountFlow)
+ FundBatchcodeAccountFlow findOne(String,String)
+ long count(String,String)
}
class com.welab.fund.vo.response.FundAccountInfoResponseVo {
- Long id
- String fundName
- String fundCode
- Long amount
- Long repaymentAmount
}
abstract class com.welab.fund.app.service.fundaccount.AbstractFundAccountLocalService {
# {static} int ADD
# {static} int MINUS
# FundAccountService fundAccountService
- FundMessageLocalService fundMessageLocalService
# FundConfigService fundConfigService
- RemoteAccountManager remoteAccountManager
- JedisCluster redisClient
- RepaymentTrackRemoteService trackService
- BaseFundInfoService baseFundInfoService
# BaseFundAccountService baseFundAccountService
- {static} String LOWSE_AMOUNT
+ {abstract}void processAccountAmountByType(FundTradingExt)
+ {abstract}FundAccount getFundAccount(FundTradingExt)
+ void processAccountAmount(FundTradingExt)
# void sendLoansWarnEmail(FundAccount,Long)
# void sendAwdaWarnEmail(FundAccount)
}
class com.welab.fund.app.command.RefundAmountRetracementTimerCmdExe_Test {
- RefundAmountRetracementTimerCmdExe refundAmountRetracementTimerCmdExe
+ void exec_test()
}
enum com.welab.fund.enums.FundLoansStatusEnum {
+  INIT
+  PASS
+  REFUSED
+  FIF_REJECTED
+  CANCEL
+  DISBURSED_CANCEL
- Integer status
- String desc
}
class com.welab.fund.app.base.BaseFundManagerService {
- FundManagerMapper fundManagerMapper
- FundManagerExtMapper fundManagerExtMapper
+ List<FundManager> getFundManagerList(FundManagerExt)
+ FundManager getByMobile(String)
+ FundManager getByUserId(Long)
+ int insertSelective(FundManager)
+ int updateByPrimaryKeySelective(FundManager)
}
class com.welab.fund.dto.request.FundAccountRequestDTO {
- {static} long serialVersionUID
- String fundName
- Long fundId
- FundAccountTypeEnum accountType
- String fundCode
- String bankCode
- Byte status
}
class com.welab.fund.vo.response.RefundChangeHistoryVO {
- Date jobExecuteTime
- String operationPerson
- String dateStr
- Long jobAmount
}
class com.welab.fund.app.base.BaseFundTradingService {
- FundTradingMapper fundTradingMapper
- FundTradingExtMapper fundTradingExtMapper
+ FundTrading getById(Long)
+ List<FundTrading> getByRefundRecordId(Long)
+ List<FundTradingExtend> getExtByRefundRecordId(List<Long>)
+ int count(FundTrading)
+ List<FundTrading> getByLoanNumbersAndType(List<String>,FundTradingTypeEnum)
+ int countByRefundRecordIdAndType(Long,FundTradingTypeEnum)
+ Long insertSelective(FundTrading)
+ int updateStatusById(Long,RecordStatusEnum)
+ int updateByIdSelective(FundTrading)
+ List<FundTrading> getByParam(Map<String,Object>)
+ List<FundTrading> getByIds(List<Long>)
+ List<FundTrading> findFailRecord(Long)
}
class com.welab.fund.app.command.BCATransferCmdExe_Test {
- BCATransferCmdExe bCATransferCmdExe
+ void transferBCA_test()
}
class com.welab.fund.mq.RabbitMqConfigration {
- String refundCallbackQueue
+ Queue buildRefundQueue()
+ Queue buildRepaymentQueue()
+ Queue buildFundLoansQueue()
+ Queue buildFundLoansRecordQueue()
+ Queue buildTradingRecordResendQueue()
+ Queue buildFaspayQueue()
+ Queue buildResaveDetailQueue()
+ Queue buildRetracementQueue()
+ Queue fundMatchRuleQueue()
+ Exchange fundMatchRuleExchange()
+ Binding fundMatchRuleBinding(SimpleMessageListenerContainer)
+ SimpleMessageListenerContainer ruleUpdateListenerContainer(ConnectionFactory,FundMatchRuleUpdateListener)
+ Exchange rematchExchange()
+ Queue deadLetterQueue()
+ Binding deadLetterBinding()
+ Queue buildApplyQueue()
+ Queue buildGatewayLoansQueue()
+ Queue buildFaspayRefundJobQueue()
+ Queue buildFundTasticCheckQueue()
+ Queue buildFundLoansinterestNotifyQueue()
+ Queue buildFundTasticLoansNotifyQueue()
+ Queue buildFundRollbackLoansQueue()
+ Queue buildBindOldAndNewLoans()
+ Queue buildFundTasticRollbackReTryQueue()
+ FanoutExchange buildSynDelayExchange()
+ Queue buildSynDelay()
+ Binding synDelayBinding()
+ Queue buildReleaseRepaymentQueue()
}
class com.welab.fund.mq.FundRabbitListenerAop {
- FundErrorMqService fundErrorMqService
+ void pointCut(String)
+ Object listener(ProceedingJoinPoint,String)
- FundMqError processErrorMq(String)
}
class com.welab.fund.mode.FundBatchcodeAccountFlow {
- Long id
- Long fundId
- String batchCode
- Long originalAvailableAmount
- Long originalPrincipalAmount
- Long originalUseAmount
- Long originalFreezeAmount
- Date createdAt
- Date updatedAt
- String loanNumber
- Long operateUseAmount
- String operateType
- Long operatePrincipalAmount
- Long operateFreezeAmount
+ Long getId()
+ void setId(Long)
+ Long getFundId()
+ void setFundId(Long)
+ String getBatchCode()
+ void setBatchCode(String)
+ Long getOriginalAvailableAmount()
+ void setOriginalAvailableAmount(Long)
+ Long getOriginalPrincipalAmount()
+ void setOriginalPrincipalAmount(Long)
+ Long getOriginalUseAmount()
+ void setOriginalUseAmount(Long)
+ Long getOriginalFreezeAmount()
+ void setOriginalFreezeAmount(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getLoanNumber()
+ void setLoanNumber(String)
+ Long getOperateUseAmount()
+ void setOperateUseAmount(Long)
+ String getOperateType()
+ void setOperateType(String)
+ Long getOperatePrincipalAmount()
+ void setOperatePrincipalAmount(Long)
+ Long getOperateFreezeAmount()
+ void setOperateFreezeAmount(Long)
}
class com.welab.fund.app.service.fundaccount.NoOperationService {
+ void processAccountAmountByType(FundTradingExt)
+ FundAccount getFundAccount(FundTradingExt)
}
class com.welab.fund.test.mq.MqConsumerTest {
- FundMqConsumerListener fundMqConsumerListener
+ void repaymentAmountRetracementTest()
}
class com.welab.fund.app.manager.FundServiceManager {
- JedisCluster redisClient
- FundAccountService fundAccountService
- BaseFundInfoService baseFundInfoService
+ FundServiceExt getFundService(String)
+ Long mapFundId(String)
+ String mapFundCode(Long)
}
class com.welab.fund.app.command.batchcode.FundTasticMatchCmdExe {
~ String lockKey
- FundBatchcodeRedisManager fundBatchcodeRedisManager
- FundServiceManager fundServiceManager
~ Map<String,String> batchCodeMap
~ Map<String,FundtasticBatchcode> batchCodeOrderMap
- FundMqProducer fundMqProducer
- JedisCluster jedisC
- FundBatchcodeService fundBatchcodeService
- BaseBatchcodeAccountService baseBatchcodeAccountService
- BaseFundLoanMatchBatchcodeService baseFundLoansService
- Boolean testLock
+ void loadBatchcodeAmount()
+ void updateBatchcodeAmount()
+ String matchFund(MatchFundModel)
- String matchFund(MatchFundModel,int)
+ void buildBatchcodeTrading(String,String,MatchFundModel)
}
class com.welab.fund.app.command.batchcode.FundTasticMatchCmdExe$FundtasticBatchcode {
- String batchCode
- int orderValue
- Date expiredAt
}
class com.welab.fund.mode.FundFtImportDataExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundFtImportDataExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundFtImportDataExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundAccTypeIsNull()
+ Criteria andFundAccTypeIsNotNull()
+ Criteria andFundAccTypeEqualTo(Byte)
+ Criteria andFundAccTypeNotEqualTo(Byte)
+ Criteria andFundAccTypeGreaterThan(Byte)
+ Criteria andFundAccTypeGreaterThanOrEqualTo(Byte)
+ Criteria andFundAccTypeLessThan(Byte)
+ Criteria andFundAccTypeLessThanOrEqualTo(Byte)
+ Criteria andFundAccTypeIn(List<Byte>)
+ Criteria andFundAccTypeNotIn(List<Byte>)
+ Criteria andFundAccTypeBetween(Byte,Byte)
+ Criteria andFundAccTypeNotBetween(Byte,Byte)
+ Criteria andFundRateTypeIsNull()
+ Criteria andFundRateTypeIsNotNull()
+ Criteria andFundRateTypeEqualTo(Byte)
+ Criteria andFundRateTypeNotEqualTo(Byte)
+ Criteria andFundRateTypeGreaterThan(Byte)
+ Criteria andFundRateTypeGreaterThanOrEqualTo(Byte)
+ Criteria andFundRateTypeLessThan(Byte)
+ Criteria andFundRateTypeLessThanOrEqualTo(Byte)
+ Criteria andFundRateTypeIn(List<Byte>)
+ Criteria andFundRateTypeNotIn(List<Byte>)
+ Criteria andFundRateTypeBetween(Byte,Byte)
+ Criteria andFundRateTypeNotBetween(Byte,Byte)
+ Criteria andFullNameIsNull()
+ Criteria andFullNameIsNotNull()
+ Criteria andFullNameEqualTo(String)
+ Criteria andFullNameNotEqualTo(String)
+ Criteria andFullNameGreaterThan(String)
+ Criteria andFullNameGreaterThanOrEqualTo(String)
+ Criteria andFullNameLessThan(String)
+ Criteria andFullNameLessThanOrEqualTo(String)
+ Criteria andFullNameLike(String)
+ Criteria andFullNameNotLike(String)
+ Criteria andFullNameIn(List<String>)
+ Criteria andFullNameNotIn(List<String>)
+ Criteria andFullNameBetween(String,String)
+ Criteria andFullNameNotBetween(String,String)
+ Criteria andAccountNumberIsNull()
+ Criteria andAccountNumberIsNotNull()
+ Criteria andAccountNumberEqualTo(String)
+ Criteria andAccountNumberNotEqualTo(String)
+ Criteria andAccountNumberGreaterThan(String)
+ Criteria andAccountNumberGreaterThanOrEqualTo(String)
+ Criteria andAccountNumberLessThan(String)
+ Criteria andAccountNumberLessThanOrEqualTo(String)
+ Criteria andAccountNumberLike(String)
+ Criteria andAccountNumberNotLike(String)
+ Criteria andAccountNumberIn(List<String>)
+ Criteria andAccountNumberNotIn(List<String>)
+ Criteria andAccountNumberBetween(String,String)
+ Criteria andAccountNumberNotBetween(String,String)
+ Criteria andMobileIsNull()
+ Criteria andMobileIsNotNull()
+ Criteria andMobileEqualTo(String)
+ Criteria andMobileNotEqualTo(String)
+ Criteria andMobileGreaterThan(String)
+ Criteria andMobileGreaterThanOrEqualTo(String)
+ Criteria andMobileLessThan(String)
+ Criteria andMobileLessThanOrEqualTo(String)
+ Criteria andMobileLike(String)
+ Criteria andMobileNotLike(String)
+ Criteria andMobileIn(List<String>)
+ Criteria andMobileNotIn(List<String>)
+ Criteria andMobileBetween(String,String)
+ Criteria andMobileNotBetween(String,String)
+ Criteria andBankTypeIsNull()
+ Criteria andBankTypeIsNotNull()
+ Criteria andBankTypeEqualTo(String)
+ Criteria andBankTypeNotEqualTo(String)
+ Criteria andBankTypeGreaterThan(String)
+ Criteria andBankTypeGreaterThanOrEqualTo(String)
+ Criteria andBankTypeLessThan(String)
+ Criteria andBankTypeLessThanOrEqualTo(String)
+ Criteria andBankTypeLike(String)
+ Criteria andBankTypeNotLike(String)
+ Criteria andBankTypeIn(List<String>)
+ Criteria andBankTypeNotIn(List<String>)
+ Criteria andBankTypeBetween(String,String)
+ Criteria andBankTypeNotBetween(String,String)
+ Criteria andBankCodeIsNull()
+ Criteria andBankCodeIsNotNull()
+ Criteria andBankCodeEqualTo(String)
+ Criteria andBankCodeNotEqualTo(String)
+ Criteria andBankCodeGreaterThan(String)
+ Criteria andBankCodeGreaterThanOrEqualTo(String)
+ Criteria andBankCodeLessThan(String)
+ Criteria andBankCodeLessThanOrEqualTo(String)
+ Criteria andBankCodeLike(String)
+ Criteria andBankCodeNotLike(String)
+ Criteria andBankCodeIn(List<String>)
+ Criteria andBankCodeNotIn(List<String>)
+ Criteria andBankCodeBetween(String,String)
+ Criteria andBankCodeNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.FundFtImportDataExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.FundFtImportDataExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.app.base.BaseApplyLoansDataService {
- ApplyLoansDataMapper applyLoansDataMapper
- ApplyLoansDataExtMapper applyLoansDataExtMapper
+ int insertSelective(ApplyLoansData)
+ ApplyLoansData getApplyLoanByLoanNumber(String)
}
class com.welab.fund.app.base.BaseRefundDetailService {
- RefundDetailMapper refundDetailMapper
- RefundDetailExtMapper refundDetailExtMapper
+ List<RefundDetail> getByTransIds(List<String>)
+ List<RefundDetail> getByRefundRecordId(Long)
+ void insertList(List<RefundDetail>)
+ int countByRefundRecordId(Long)
+ int updateSendEmailByIds(List<Long>)
+ List<RefundDetail> getListBetweenCreatedAt(Date,Date)
}
class com.welab.fund.test.redis.RedisLock {
~ JedisCluster jedis
~ String lockKey
+ void testWriteLock()
+ void testReadLock()
}
class com.welab.fund.app.command.FundApprovedCmdExe_Test {
- FundApprovedCmdExe fundApprovedCmdExe
+ void approve_test()
}
class com.welab.fund.app.command.FundLoansApplyCmdExe_Test {
- FundLoansApplyCmdExe fundLoansApplyCmdExe
+ void applyLoans_test()
}
interface com.welab.fund.mapper.FundRefundRecordExtMapper {
~ FundRefundRecord getLastRecord(Long,Byte)
~ FundRefundRecord getLastRecordOrderByEndDate(Long,Byte)
}
class com.welab.fund.test.transfer.CallBackTest {
- FundTradingLocalService fundTradingLocalService
- FundServiceManager fundServiceManager
+ void test()
}
class com.welab.fund.app.service.FundBatchcodeService {
- BaseBatchcodeAccountService baseBatchcodeAccountService
- BaseBatchcodeAccountFlowService baseBatchcodeAccountFlowService
- BaseFundLoansService baseFundLoansService
- FundBatchcodeRedisManager fundBatchcodeRedisManager
+ void addFundBatchcode(FundBatchcodeAccountExt)
+ void freezeAmount(FundBatchcodeAccountFlowExt)
+ void useAndUnfreezeAmount(String)
+ void cancalLoanNumber(String)
+ void rollbackCancel(String)
- void cancel(String,FundBatchcodeFlowOperateTypeEnum)
+ void repaymentAmount(FundBatchcodeAccountExt)
+ void rollbackInterest(FundBatchcodeAccountExt)
+ void rollbackUseAmount(String)
+ void rollbackRepayment(FundBatchcodeAccountExt)
- FundBatchcodeAccountFlow copyOriginalAmount(FundBatchcodeAccount)
- Long getAvailableAmount(FundBatchcodeAccount)
}
class com.welab.fund.dto.request.FundTradingDTO {
- {static} long serialVersionUID
- String loanNumber
- String bankCode
- Long adminFee
- FundTradingTypeEnum typeEnum
- Long amount
- String transferOrder
- Integer dueIndex
- Long fundId
- Byte gatewayType
- boolean online
- String fundCode
- String selectType
- String remark
- String outAccountNo
- String inAccountNo
}
class com.welab.fund.app.manager.match.FundMatchAdminRuleManager {
+ {static} String ADMIN_RULE_KEY
# Map<Object,Map<String,List<String>>> keywordsesCache
# Map<Object,Map<String,Pattern>> likeCache
# Map<Object,Map<String,Set<String>>> contrainsCache
+ <<Create>> FundMatchAdminRuleManager()
+ String matchFundInfo(MatchFundModel)
- boolean keywordses(MatchFundModel,JSONObject,Object)
- boolean like(MatchFundModel,JSONObject,Object)
- boolean neq(MatchFundModel,JSONObject,Object)
- boolean eq(MatchFundModel,JSONObject,Object)
- boolean contrains(MatchFundModel,JSONObject,Object)
+ void refrush()
}
class com.welab.fund.mq.FundMqConsumerListener {
- FundTransferService fundTransferService
- FundLoansLocalService fundLoansLocalService
- FundLoansDubboServiceImpl fundLoansService
- FundTradingLocalService fundTradingLocalService
- RefundService refundService
- FundLoansApplyCmdExe fundLoansApplyCmdExe
- RefundAmountRetracementCmdExe refundAmountRetracementCmdExe
- RefundJobService refundJobService
- FundMqProducer fundMqProducer
- BaseFundAccountService baseFundAccountService
- FundServiceManager fundServiceManager
- FundBatchcodeService fundBatchcodeService
+ void refundCallBack(String)
+ void loans(String)
+ void repayment(String)
+ void addFundLoansRecord(String)
+ void fifReject(String)
+ void newTransfer(String)
+ void newLoans(String)
+ void tradingRecordResend(String)
+ void rematch(String)
+ void applyQueue(Message)
+ void recharge(String)
+ void faspayRefund(String)
+ void refundSaveDetail(String)
+ void repaymentAmountRetracement(String)
+ void faspayRefundJob(String)
+ void onMessage(Message)
+ void releaseRepayment(String)
}
class com.welab.fund.mode.RefundDetail {
- Long id
- String fundCode
- String loanNumber
- String bankCode
- Integer dueIndex
- Boolean sendEmail
- Long refundRecordId
- String orderNo
- String transId
- Boolean soldType
- Long insuredAmount
- Long repaymentAmount
- Long fastPayFee
- Long fundInterestFee
- Long serviceFee
- Long provisionFee
- Long carryingFee
- Long lateFee
- Long principalFee
- Long adminFee
- Long vatFee
- Long hasTaxInsterest
- Long pfVatFee
- Long afVatFee
- Long cfVatFee
- Long lfVatFee
- Long fundInterestWhtFee
- Long fundInterestVatFee
- Long principalVatFee
- String secondProdCode
- Byte repayStatus
- Date dueDate
- Date repaymentDate
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getFundCode()
+ void setFundCode(String)
+ String getLoanNumber()
+ void setLoanNumber(String)
+ String getBankCode()
+ void setBankCode(String)
+ Integer getDueIndex()
+ void setDueIndex(Integer)
+ Boolean getSendEmail()
+ void setSendEmail(Boolean)
+ Long getRefundRecordId()
+ void setRefundRecordId(Long)
+ String getOrderNo()
+ void setOrderNo(String)
+ String getTransId()
+ void setTransId(String)
+ Boolean getSoldType()
+ void setSoldType(Boolean)
+ Long getInsuredAmount()
+ void setInsuredAmount(Long)
+ Long getRepaymentAmount()
+ void setRepaymentAmount(Long)
+ Long getFastPayFee()
+ void setFastPayFee(Long)
+ Long getFundInterestFee()
+ void setFundInterestFee(Long)
+ Long getServiceFee()
+ void setServiceFee(Long)
+ Long getProvisionFee()
+ void setProvisionFee(Long)
+ Long getCarryingFee()
+ void setCarryingFee(Long)
+ Long getLateFee()
+ void setLateFee(Long)
+ Long getPrincipalFee()
+ void setPrincipalFee(Long)
+ Long getAdminFee()
+ void setAdminFee(Long)
+ Long getVatFee()
+ void setVatFee(Long)
+ Long getHasTaxInsterest()
+ void setHasTaxInsterest(Long)
+ Long getPfVatFee()
+ void setPfVatFee(Long)
+ Long getAfVatFee()
+ void setAfVatFee(Long)
+ Long getCfVatFee()
+ void setCfVatFee(Long)
+ Long getLfVatFee()
+ void setLfVatFee(Long)
+ Long getFundInterestWhtFee()
+ void setFundInterestWhtFee(Long)
+ Long getFundInterestVatFee()
+ void setFundInterestVatFee(Long)
+ Long getPrincipalVatFee()
+ void setPrincipalVatFee(Long)
+ String getSecondProdCode()
+ void setSecondProdCode(String)
+ Byte getRepayStatus()
+ void setRepayStatus(Byte)
+ Date getDueDate()
+ void setDueDate(Date)
+ Date getRepaymentDate()
+ void setRepaymentDate(Date)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.fund.job.RefundBCAJob {
- RefundT1CmdExe refundT1CmdExe
- JedisCluster jedisCluster
- BaseFundTradingService baseFundTradingService
- EmailSender emailSender
- QueryTaskServiceFacade queryTaskServiceFacade
- CmsgServiceFacade cmsgServiceFacade
+ void execute(ShardingContext)
+ void sendCmsg(List<FundTrading>)
}
class com.welab.fund.controller.FundMatchRuleController_Test {
- FundMatchRuleController fundMatchRuleController
+ void updateRule_test()
+ void getToBRule_test()
+ void getNormalRuleTrackList_test()
+ void updateToBRule_test()
+ void updateNormalRule_test()
+ void getNormalRule_test()
}
class com.welab.fund.app.service.RefundService {
- RepaymentTrackRemoteService repaymentTrackRemoteService
- FundMessageLocalService fundMessageLocalService
- FundConfigService fundConfigService
- FundTransferService fundTransferService
- FundAccountService fundAccountService
- RemoteAccountManager remoteAccountManager
- JedisCluster jedis
- WhtConfigServiceFacade whtConfigServiceFacade
- BaseFundRefundRecordService baseFundRefundRecordService
- BaseRefundDetailService baseRefundDetailService
- BaseFundAccountService baseFundAccountService
- FundServiceManager fundServiceManager
- BaseFundInfoService baseFundInfoService
- Integer profileValue
- {static} int WAIT_TIMES
- {static} int WAIT_TIME
+ FundRefundRecord getTrackVo(Long,Byte,RefundRecordTypeEnum)
+ void saveDetail(Long)
+ void refundRepayment(RefundModel)
- void refundSleep(FundTradingTypeEnum)
+ void refundFaspay(FundRefundRecord)
+ void refund(FundRefundRecord)
+ void refundByRecordId(Long)
}
class com.welab.fund.test.app.impl.FundAccountDubboServiceImplTest {
- FundAccountDubboServiceImpl fundAccountDubboService
+ void setUp()
+ void tearDown()
+ void findFundListByPageTest()
+ void getAllFundListTest()
+ void getAdvanceAccount()
}
class com.welab.fund.app.facade.message.MessageEmailServiceFacade {
- MessageEmailService messageEmailService
+ void sendMail(MailDTO)
+ void sendMailByTmplName(MailDTO)
}
enum com.welab.fund.enums.FundAccountTypeEnum {
+  LOANS
+  REPAYMENT
+  SUB_ACCOUNT
+  SUB_REPAYMENT_ACCOUNT
+  SPECIFIED_ACCOUNT
+  SPECIFIED_HIDDEN_ACCOUNT
- Byte value
}
class com.welab.fund.app.facade.ProductConfigDubboServiceFacade {
- ProductConfigDubboService productConfigDubboService
+ List<ProductRateConfigVO> getByProductCode(String)
}
interface com.welab.fund.mapper.ApplyLoansDataMapper {
~ int countByExample(ApplyLoansDataExample)
~ int deleteByExample(ApplyLoansDataExample)
~ int deleteByPrimaryKey(Long)
~ int insert(ApplyLoansData)
~ int insertSelective(ApplyLoansData)
~ List<ApplyLoansData> selectByExample(ApplyLoansDataExample)
~ ApplyLoansData selectByPrimaryKey(Long)
~ int updateByExampleSelective(ApplyLoansData,ApplyLoansDataExample)
~ int updateByExample(ApplyLoansData,ApplyLoansDataExample)
~ int updateByPrimaryKeySelective(ApplyLoansData)
~ int updateByPrimaryKey(ApplyLoansData)
}
class com.welab.fund.mode.ext.RefundDetailExt {
- Long fundAmount
- Long awdaAmount
- Long adminFeeWithoutVat
- Long platformFeeWithoutVat
- Long lateFeeWithoutVat
- Long carryingFeeWithoutVat
- Long fundInterestFeeWithoutWht
- String activeLoanFlag
- String transferOrder
- Long totalVat
- String partnerOrderNumber
}
class com.welab.fund.app.base.BaseFundMqErrorService {
- FundMqErrorMapper fundMqErrorMapper
- FundMqErrorExtMapper fundMqErrorExtMapper
+ List<FundMqError> getErrorMqList()
+ int updateByIdSelective(FundMqError)
+ int insertSelective(FundMqError)
}
class com.welab.fund.configuration.fundbase.autoconfigure.FilterAutoConfiguration {
}
class com.welab.fund.configuration.fundbase.autoconfigure.FilterAutoConfiguration$ArgumentResolverAutoConfiguration {
# <<Create>> ArgumentResolverAutoConfiguration()
+ void addArgumentResolvers(List<HandlerMethodArgumentResolver>)
}
class com.welab.fund.test.QLTest {
~ BaseFundMatchRuleService bfBaseFundMatchRuleService
+ void test()
+ String buildExpress()
+ boolean hasMoney(String)
+ void test2()
+ String buildExpress2()
+ void test3()
- String buildExpress3()
+ void testQL()
}
class com.welab.fund.validated.CommonValidated {
}
class com.welab.fund.app.command.batchcode.FundTasticRepaymentTest {
- FundTasticRepaymentCmdExe fundTasticRepaymentCmdExe
- BaseFundInfoService baseFundInfoService
+ void refund()
}
class com.welab.fund.app.base.BaseFundMatchRuleService {
- FundMatchRuleMapper fundMatchRuleMapper
- FundMatchRuleExtMapper fundMatchRuleExtMapper
+ void updateByIdSelective(FundMatchRule)
+ List<FundMatchRule> getList(FundMatchRule)
+ String getRuleByRuleTypeLimitOne(String)
+ FundMatchRule getById(Long)
+ List<FundMatchRule> getByIds(List<Long>)
}
class com.welab.fund.mode.FundAccountTrack {
- Long id
- Long fundId
- Byte gatewayType
- Long remoteAmount
- Long localAmount
- String ext
- Long shortfall
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getFundId()
+ void setFundId(Long)
+ Byte getGatewayType()
+ void setGatewayType(Byte)
+ Long getRemoteAmount()
+ void setRemoteAmount(Long)
+ Long getLocalAmount()
+ void setLocalAmount(Long)
+ String getExt()
+ void setExt(String)
+ Long getShortfall()
+ void setShortfall(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.fund.app.service.FundMessageLocalService {
- String appId
- String loanWarnReceivers
- String developerEmail
- MessageEmailServiceFacade messageEmailServiceFacade
+ {static} String REFUND_LIST_TAX_ACCOUNT
+ void sendEmail(MailDTO)
+ void sendMailByTmplName(MailDTO)
+ void sendEmailToDeveloper(MailDTO)
+ {static} MailDTO buildReceiveBusiMailDTO(String,String,boolean,String,Map<String,InputStream>)
+ void sendExceptionRefundStatusEmail(FundRefundStatusEnum,Object)
+ void sendWarnEmail(FundAccount,Long,Long)
}
class com.welab.fund.test.DateTest {
+ void runTest()
}
class com.welab.fund.test.facade.CmsgServiceTest {
- RefundBCAJob refundBCAJob
+ void sendCmsg()
}
interface com.welab.fund.mapper.FundConfigMapper {
~ int countByExample(FundConfigExample)
~ int deleteByExample(FundConfigExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundConfig)
~ int insertSelective(FundConfig)
~ List<FundConfig> selectByExampleWithBLOBs(FundConfigExample)
~ List<FundConfig> selectByExample(FundConfigExample)
~ FundConfig selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundConfig,FundConfigExample)
~ int updateByExampleWithBLOBs(FundConfig,FundConfigExample)
~ int updateByExample(FundConfig,FundConfigExample)
~ int updateByPrimaryKeySelective(FundConfig)
~ int updateByPrimaryKeyWithBLOBs(FundConfig)
~ int updateByPrimaryKey(FundConfig)
}
class com.welab.fund.dto.SynDelayDTO {
- String queue
- String content
- long delay
}
class com.welab.fund.mode.FundAccount {
- Long id
- Long fundBaseId
- String accountNo
- Byte gatewayType
- String fundCode
- Long amount
- Byte accountType
- Date createAt
- Date updateAt
- String remark
+ Long getId()
+ void setId(Long)
+ Long getFundBaseId()
+ void setFundBaseId(Long)
+ String getAccountNo()
+ void setAccountNo(String)
+ Byte getGatewayType()
+ void setGatewayType(Byte)
+ String getFundCode()
+ void setFundCode(String)
+ Long getAmount()
+ void setAmount(Long)
+ Byte getAccountType()
+ void setAccountType(Byte)
+ Date getCreateAt()
+ void setCreateAt(Date)
+ Date getUpdateAt()
+ void setUpdateAt(Date)
+ String getRemark()
+ void setRemark(String)
}
class com.welab.fund.app.service.fundaccount.MinusLoansAccount {
+ void processAccountAmountByType(FundTradingExt)
+ FundAccount getFundAccount(FundTradingExt)
}
class com.welab.fund.vo.ToBFundMatchRuleVO {
- Long id
- Boolean useFundTastic
- String partner
- String funder
}
interface com.welab.fund.mapper.RefundTradingRecordExtMapper {
~ int insertRefundTradingRecord(Long,Long,Long)
}
class com.welab.fund.constant.CommonConstants {
+ {static} Long DEFAULT_MANAGER
+ {static} Long DEFAULT_FUND_ID
+ {static} Long PERMATA_FUND_ID
+ {static} Long BCA_FUND_ID
+ {static} Long FT_ID
+ {static} String FT_CODE
+ {static} String SIGAP_CODE
+ {static} String UVF_CODE
+ {static} String AWDA_CODE
+ {static} Long AWDA_BASE_ID
+ {static} String FIF_CODE
+ {static} Long FIF_BASE_ID
+ {static} String FASPAY_REPAYMENT_CODE
+ {static} Long FASPAY_REPAYMENT_ID
+ {static} String FIF_REPAYMENT_CODE
+ {static} Long FIF_REPAYMENT_ID
+ {static} String ASTRA_REPAYMENT_CODE
+ {static} Long ASTRA_REPAYMENT_ID
+ {static} String TAPP_REPAYMENT_CODE
+ {static} Long TAPP_REPAYMENT_ID
+ {static} String THIRD_PARTY_1
+ {static} Long THIRD_PARTY_1_ID
+ {static} String ASTRA_2_REPAYMENT_CODE
+ {static} Long ASTRA_2_REPAYMENT_ID
+ {static} String FUND_INSTEREST_TAX_CODE
+ {static} Long FUND_INSTEREST_TAX_ID
+ {static} Long FUND_BCA_IN_BNI_ID
+ {static} String FUND_BCA_CODE
+ {static} Long BNI_BCA_ACCOUNT_ID
+ {static} String BNI_BCA_ACCOUNT_CODE
+ {static} String REPAYMENT_TRADING_LOCK
+ {static} String LOANS_TRADING_LOCK
+ {static} String REFUNDRECORDID_LOCK
+ {static} String FUND_KEY
+ {static} String FUND_CONFIG_KEY
+ {static} String MATCH_FUND_KEY
+ {static} String SERVICE_FUND_KEY
+ {static} String CONFIG_FUND_PROPORTION_CONFIG_KEY
+ {static} String CONFIG_RECHARGE_AMOUNT_KEY
+ {static} String CONFIG_GATEWAY_AMOUNT_KEY
+ {static} String CONFIG_FUND_WARN_AMOUNT_KEY
+ {static} String CONFIG_SPECIAL_FUND_KEY
+ {static} String CONFIG_FUND_SERVICE_NEW_KEY
+ {static} String CONFIG_GATEWAY_SHUNT_KEY
+ {static} String CONFIG_FUND_CODE_MAP_ID_KEY
+ {static} String CONFIG_THIRD_RECHARGE_ACCOUNT_NO
+ {static} String TEST_DEMO_CONFIG_FUND_ACCOUNT
+ {static} String CONFIG_DISBURSEMENTS_FUND_ACCOUNT_KEY
+ {static} String FUND_MAPPER_KEY
+ {static} String DEFAULT_FUND
+ {static} String CONFIG_FUND_REMATCH_TIME_KEY
+ {static} String MINUS_LOANS_ACCOUNT_NAME
+ {static} String MINUS_REPAYMENT_ACCOUNT_NAME
+ {static} String ADD_LOANS_ACCOUNT_NAME
+ {static} String ADD_REPAYMENT_ACCOUNT_NAME
+ {static} String NO_OPERATION_SERVICE_NAME
+ {static} String CONFIG_REFUND_JOB_DAY_KEY
+ {static} String TRANSFER_ACCOUNT_CONFIG_KEY
+ {static} String FUND_AMOUNT_KEY
+ {static} String NEW_LOAN_KEY
+ {static} String REASONKEY_CONFIG
+ {static} long FOUR_HOURS
+ {static} String EXPX
+ {static} long DEFAULT_TIME
- <<Create>> CommonConstants()
}
class com.welab.fund.app.manager.match.FundAccountPendingManager {
- JedisCluster redisClient
# FundAccountService fundAccountService
- RemoteAccountManager remoteAccountManager
- FundAccountCheckService fundAccountCheckService
- FundConfigService fundConfigService
- BaseFundInfoService baseFundInfoService
- ProductConfigServiceFacade productConfigServiceFacade
- FundServiceManager fundServiceManager
- Map<String,Long> fundLastAmountMap
- AtomicInteger refreshProductConfigTimes
+ boolean matchHasMoneyFund(String,MatchFundModel)
- Long getAdminFee(MatchFundModel,Long)
}
class com.welab.fund.vo.TravelokaPlaterRuleVO {
- String fundCode
- Boolean status
}
class com.welab.fund.app.service.FundBatchcodeAccountService {
- BaseBatchcodeAccountService baseBatchcodeAccountService
- BaseFundInfoService baseFundInfoService
- FundBatchcodeRedisManager fundBatchcodeRedisManager
- FundBatchcodeService fundBatchcodeService
- FundServiceManager fundServiceManager
- JedisCluster jedis
+ PageInfo<FundTasticAccountVO> getFundList(Integer,Integer)
+ List<FundTasticAccountVO> fundBatchCodeList(List<Long>)
+ FundTasticAccountVO totalAmount()
+ int updateExpiredDate(FundTasticAccountVO)
+ Long getFundAccountAmountForRechange(String)
+ List<FundBatchcodeAccount> getFundAccountAmount(String)
+ void rechargeNotify(FundTasticRechargeNotifyCmd)
}
class com.welab.fund.app.base.BaseRetracementTradingReocrdService {
- RetracementTradingReocrdMapper retracementTradingReocrdMapper
+ int insertSelective(RetracementTradingReocrd)
}
class com.welab.fund.mode.RefundDetailExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> RefundDetailExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.RefundDetailExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
# void addCriterionForJDBCDate(String,Date,String)
# void addCriterionForJDBCDate(String,List<Date>,String)
# void addCriterionForJDBCDate(String,Date,Date,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundCodeIsNull()
+ Criteria andFundCodeIsNotNull()
+ Criteria andFundCodeEqualTo(String)
+ Criteria andFundCodeNotEqualTo(String)
+ Criteria andFundCodeGreaterThan(String)
+ Criteria andFundCodeGreaterThanOrEqualTo(String)
+ Criteria andFundCodeLessThan(String)
+ Criteria andFundCodeLessThanOrEqualTo(String)
+ Criteria andFundCodeLike(String)
+ Criteria andFundCodeNotLike(String)
+ Criteria andFundCodeIn(List<String>)
+ Criteria andFundCodeNotIn(List<String>)
+ Criteria andFundCodeBetween(String,String)
+ Criteria andFundCodeNotBetween(String,String)
+ Criteria andLoanNumberIsNull()
+ Criteria andLoanNumberIsNotNull()
+ Criteria andLoanNumberEqualTo(String)
+ Criteria andLoanNumberNotEqualTo(String)
+ Criteria andLoanNumberGreaterThan(String)
+ Criteria andLoanNumberGreaterThanOrEqualTo(String)
+ Criteria andLoanNumberLessThan(String)
+ Criteria andLoanNumberLessThanOrEqualTo(String)
+ Criteria andLoanNumberLike(String)
+ Criteria andLoanNumberNotLike(String)
+ Criteria andLoanNumberIn(List<String>)
+ Criteria andLoanNumberNotIn(List<String>)
+ Criteria andLoanNumberBetween(String,String)
+ Criteria andLoanNumberNotBetween(String,String)
+ Criteria andBankCodeIsNull()
+ Criteria andBankCodeIsNotNull()
+ Criteria andBankCodeEqualTo(String)
+ Criteria andBankCodeNotEqualTo(String)
+ Criteria andBankCodeGreaterThan(String)
+ Criteria andBankCodeGreaterThanOrEqualTo(String)
+ Criteria andBankCodeLessThan(String)
+ Criteria andBankCodeLessThanOrEqualTo(String)
+ Criteria andBankCodeLike(String)
+ Criteria andBankCodeNotLike(String)
+ Criteria andBankCodeIn(List<String>)
+ Criteria andBankCodeNotIn(List<String>)
+ Criteria andBankCodeBetween(String,String)
+ Criteria andBankCodeNotBetween(String,String)
+ Criteria andDueIndexIsNull()
+ Criteria andDueIndexIsNotNull()
+ Criteria andDueIndexEqualTo(Integer)
+ Criteria andDueIndexNotEqualTo(Integer)
+ Criteria andDueIndexGreaterThan(Integer)
+ Criteria andDueIndexGreaterThanOrEqualTo(Integer)
+ Criteria andDueIndexLessThan(Integer)
+ Criteria andDueIndexLessThanOrEqualTo(Integer)
+ Criteria andDueIndexIn(List<Integer>)
+ Criteria andDueIndexNotIn(List<Integer>)
+ Criteria andDueIndexBetween(Integer,Integer)
+ Criteria andDueIndexNotBetween(Integer,Integer)
+ Criteria andSendEmailIsNull()
+ Criteria andSendEmailIsNotNull()
+ Criteria andSendEmailEqualTo(Boolean)
+ Criteria andSendEmailNotEqualTo(Boolean)
+ Criteria andSendEmailGreaterThan(Boolean)
+ Criteria andSendEmailGreaterThanOrEqualTo(Boolean)
+ Criteria andSendEmailLessThan(Boolean)
+ Criteria andSendEmailLessThanOrEqualTo(Boolean)
+ Criteria andSendEmailIn(List<Boolean>)
+ Criteria andSendEmailNotIn(List<Boolean>)
+ Criteria andSendEmailBetween(Boolean,Boolean)
+ Criteria andSendEmailNotBetween(Boolean,Boolean)
+ Criteria andRefundRecordIdIsNull()
+ Criteria andRefundRecordIdIsNotNull()
+ Criteria andRefundRecordIdEqualTo(Long)
+ Criteria andRefundRecordIdNotEqualTo(Long)
+ Criteria andRefundRecordIdGreaterThan(Long)
+ Criteria andRefundRecordIdGreaterThanOrEqualTo(Long)
+ Criteria andRefundRecordIdLessThan(Long)
+ Criteria andRefundRecordIdLessThanOrEqualTo(Long)
+ Criteria andRefundRecordIdIn(List<Long>)
+ Criteria andRefundRecordIdNotIn(List<Long>)
+ Criteria andRefundRecordIdBetween(Long,Long)
+ Criteria andRefundRecordIdNotBetween(Long,Long)
+ Criteria andOrderNoIsNull()
+ Criteria andOrderNoIsNotNull()
+ Criteria andOrderNoEqualTo(String)
+ Criteria andOrderNoNotEqualTo(String)
+ Criteria andOrderNoGreaterThan(String)
+ Criteria andOrderNoGreaterThanOrEqualTo(String)
+ Criteria andOrderNoLessThan(String)
+ Criteria andOrderNoLessThanOrEqualTo(String)
+ Criteria andOrderNoLike(String)
+ Criteria andOrderNoNotLike(String)
+ Criteria andOrderNoIn(List<String>)
+ Criteria andOrderNoNotIn(List<String>)
+ Criteria andOrderNoBetween(String,String)
+ Criteria andOrderNoNotBetween(String,String)
+ Criteria andTransIdIsNull()
+ Criteria andTransIdIsNotNull()
+ Criteria andTransIdEqualTo(String)
+ Criteria andTransIdNotEqualTo(String)
+ Criteria andTransIdGreaterThan(String)
+ Criteria andTransIdGreaterThanOrEqualTo(String)
+ Criteria andTransIdLessThan(String)
+ Criteria andTransIdLessThanOrEqualTo(String)
+ Criteria andTransIdLike(String)
+ Criteria andTransIdNotLike(String)
+ Criteria andTransIdIn(List<String>)
+ Criteria andTransIdNotIn(List<String>)
+ Criteria andTransIdBetween(String,String)
+ Criteria andTransIdNotBetween(String,String)
+ Criteria andSoldTypeIsNull()
+ Criteria andSoldTypeIsNotNull()
+ Criteria andSoldTypeEqualTo(Boolean)
+ Criteria andSoldTypeNotEqualTo(Boolean)
+ Criteria andSoldTypeGreaterThan(Boolean)
+ Criteria andSoldTypeGreaterThanOrEqualTo(Boolean)
+ Criteria andSoldTypeLessThan(Boolean)
+ Criteria andSoldTypeLessThanOrEqualTo(Boolean)
+ Criteria andSoldTypeIn(List<Boolean>)
+ Criteria andSoldTypeNotIn(List<Boolean>)
+ Criteria andSoldTypeBetween(Boolean,Boolean)
+ Criteria andSoldTypeNotBetween(Boolean,Boolean)
+ Criteria andInsuredAmountIsNull()
+ Criteria andInsuredAmountIsNotNull()
+ Criteria andInsuredAmountEqualTo(Long)
+ Criteria andInsuredAmountNotEqualTo(Long)
+ Criteria andInsuredAmountGreaterThan(Long)
+ Criteria andInsuredAmountGreaterThanOrEqualTo(Long)
+ Criteria andInsuredAmountLessThan(Long)
+ Criteria andInsuredAmountLessThanOrEqualTo(Long)
+ Criteria andInsuredAmountIn(List<Long>)
+ Criteria andInsuredAmountNotIn(List<Long>)
+ Criteria andInsuredAmountBetween(Long,Long)
+ Criteria andInsuredAmountNotBetween(Long,Long)
+ Criteria andRepaymentAmountIsNull()
+ Criteria andRepaymentAmountIsNotNull()
+ Criteria andRepaymentAmountEqualTo(Long)
+ Criteria andRepaymentAmountNotEqualTo(Long)
+ Criteria andRepaymentAmountGreaterThan(Long)
+ Criteria andRepaymentAmountGreaterThanOrEqualTo(Long)
+ Criteria andRepaymentAmountLessThan(Long)
+ Criteria andRepaymentAmountLessThanOrEqualTo(Long)
+ Criteria andRepaymentAmountIn(List<Long>)
+ Criteria andRepaymentAmountNotIn(List<Long>)
+ Criteria andRepaymentAmountBetween(Long,Long)
+ Criteria andRepaymentAmountNotBetween(Long,Long)
+ Criteria andFastPayFeeIsNull()
+ Criteria andFastPayFeeIsNotNull()
+ Criteria andFastPayFeeEqualTo(Long)
+ Criteria andFastPayFeeNotEqualTo(Long)
+ Criteria andFastPayFeeGreaterThan(Long)
+ Criteria andFastPayFeeGreaterThanOrEqualTo(Long)
+ Criteria andFastPayFeeLessThan(Long)
+ Criteria andFastPayFeeLessThanOrEqualTo(Long)
+ Criteria andFastPayFeeIn(List<Long>)
+ Criteria andFastPayFeeNotIn(List<Long>)
+ Criteria andFastPayFeeBetween(Long,Long)
+ Criteria andFastPayFeeNotBetween(Long,Long)
+ Criteria andFundInterestFeeIsNull()
+ Criteria andFundInterestFeeIsNotNull()
+ Criteria andFundInterestFeeEqualTo(Long)
+ Criteria andFundInterestFeeNotEqualTo(Long)
+ Criteria andFundInterestFeeGreaterThan(Long)
+ Criteria andFundInterestFeeGreaterThanOrEqualTo(Long)
+ Criteria andFundInterestFeeLessThan(Long)
+ Criteria andFundInterestFeeLessThanOrEqualTo(Long)
+ Criteria andFundInterestFeeIn(List<Long>)
+ Criteria andFundInterestFeeNotIn(List<Long>)
+ Criteria andFundInterestFeeBetween(Long,Long)
+ Criteria andFundInterestFeeNotBetween(Long,Long)
+ Criteria andServiceFeeIsNull()
+ Criteria andServiceFeeIsNotNull()
+ Criteria andServiceFeeEqualTo(Long)
+ Criteria andServiceFeeNotEqualTo(Long)
+ Criteria andServiceFeeGreaterThan(Long)
+ Criteria andServiceFeeGreaterThanOrEqualTo(Long)
+ Criteria andServiceFeeLessThan(Long)
+ Criteria andServiceFeeLessThanOrEqualTo(Long)
+ Criteria andServiceFeeIn(List<Long>)
+ Criteria andServiceFeeNotIn(List<Long>)
+ Criteria andServiceFeeBetween(Long,Long)
+ Criteria andServiceFeeNotBetween(Long,Long)
+ Criteria andProvisionFeeIsNull()
+ Criteria andProvisionFeeIsNotNull()
+ Criteria andProvisionFeeEqualTo(Long)
+ Criteria andProvisionFeeNotEqualTo(Long)
+ Criteria andProvisionFeeGreaterThan(Long)
+ Criteria andProvisionFeeGreaterThanOrEqualTo(Long)
+ Criteria andProvisionFeeLessThan(Long)
+ Criteria andProvisionFeeLessThanOrEqualTo(Long)
+ Criteria andProvisionFeeIn(List<Long>)
+ Criteria andProvisionFeeNotIn(List<Long>)
+ Criteria andProvisionFeeBetween(Long,Long)
+ Criteria andProvisionFeeNotBetween(Long,Long)
+ Criteria andCarryingFeeIsNull()
+ Criteria andCarryingFeeIsNotNull()
+ Criteria andCarryingFeeEqualTo(Long)
+ Criteria andCarryingFeeNotEqualTo(Long)
+ Criteria andCarryingFeeGreaterThan(Long)
+ Criteria andCarryingFeeGreaterThanOrEqualTo(Long)
+ Criteria andCarryingFeeLessThan(Long)
+ Criteria andCarryingFeeLessThanOrEqualTo(Long)
+ Criteria andCarryingFeeIn(List<Long>)
+ Criteria andCarryingFeeNotIn(List<Long>)
+ Criteria andCarryingFeeBetween(Long,Long)
+ Criteria andCarryingFeeNotBetween(Long,Long)
+ Criteria andLateFeeIsNull()
+ Criteria andLateFeeIsNotNull()
+ Criteria andLateFeeEqualTo(Long)
+ Criteria andLateFeeNotEqualTo(Long)
+ Criteria andLateFeeGreaterThan(Long)
+ Criteria andLateFeeGreaterThanOrEqualTo(Long)
+ Criteria andLateFeeLessThan(Long)
+ Criteria andLateFeeLessThanOrEqualTo(Long)
+ Criteria andLateFeeIn(List<Long>)
+ Criteria andLateFeeNotIn(List<Long>)
+ Criteria andLateFeeBetween(Long,Long)
+ Criteria andLateFeeNotBetween(Long,Long)
+ Criteria andPrincipalFeeIsNull()
+ Criteria andPrincipalFeeIsNotNull()
+ Criteria andPrincipalFeeEqualTo(Long)
+ Criteria andPrincipalFeeNotEqualTo(Long)
+ Criteria andPrincipalFeeGreaterThan(Long)
+ Criteria andPrincipalFeeGreaterThanOrEqualTo(Long)
+ Criteria andPrincipalFeeLessThan(Long)
+ Criteria andPrincipalFeeLessThanOrEqualTo(Long)
+ Criteria andPrincipalFeeIn(List<Long>)
+ Criteria andPrincipalFeeNotIn(List<Long>)
+ Criteria andPrincipalFeeBetween(Long,Long)
+ Criteria andPrincipalFeeNotBetween(Long,Long)
+ Criteria andAdminFeeIsNull()
+ Criteria andAdminFeeIsNotNull()
+ Criteria andAdminFeeEqualTo(Long)
+ Criteria andAdminFeeNotEqualTo(Long)
+ Criteria andAdminFeeGreaterThan(Long)
+ Criteria andAdminFeeGreaterThanOrEqualTo(Long)
+ Criteria andAdminFeeLessThan(Long)
+ Criteria andAdminFeeLessThanOrEqualTo(Long)
+ Criteria andAdminFeeIn(List<Long>)
+ Criteria andAdminFeeNotIn(List<Long>)
+ Criteria andAdminFeeBetween(Long,Long)
+ Criteria andAdminFeeNotBetween(Long,Long)
+ Criteria andVatFeeIsNull()
+ Criteria andVatFeeIsNotNull()
+ Criteria andVatFeeEqualTo(Long)
+ Criteria andVatFeeNotEqualTo(Long)
+ Criteria andVatFeeGreaterThan(Long)
+ Criteria andVatFeeGreaterThanOrEqualTo(Long)
+ Criteria andVatFeeLessThan(Long)
+ Criteria andVatFeeLessThanOrEqualTo(Long)
+ Criteria andVatFeeIn(List<Long>)
+ Criteria andVatFeeNotIn(List<Long>)
+ Criteria andVatFeeBetween(Long,Long)
+ Criteria andVatFeeNotBetween(Long,Long)
+ Criteria andHasTaxInsterestIsNull()
+ Criteria andHasTaxInsterestIsNotNull()
+ Criteria andHasTaxInsterestEqualTo(Long)
+ Criteria andHasTaxInsterestNotEqualTo(Long)
+ Criteria andHasTaxInsterestGreaterThan(Long)
+ Criteria andHasTaxInsterestGreaterThanOrEqualTo(Long)
+ Criteria andHasTaxInsterestLessThan(Long)
+ Criteria andHasTaxInsterestLessThanOrEqualTo(Long)
+ Criteria andHasTaxInsterestIn(List<Long>)
+ Criteria andHasTaxInsterestNotIn(List<Long>)
+ Criteria andHasTaxInsterestBetween(Long,Long)
+ Criteria andHasTaxInsterestNotBetween(Long,Long)
+ Criteria andPfVatFeeIsNull()
+ Criteria andPfVatFeeIsNotNull()
+ Criteria andPfVatFeeEqualTo(Long)
+ Criteria andPfVatFeeNotEqualTo(Long)
+ Criteria andPfVatFeeGreaterThan(Long)
+ Criteria andPfVatFeeGreaterThanOrEqualTo(Long)
+ Criteria andPfVatFeeLessThan(Long)
+ Criteria andPfVatFeeLessThanOrEqualTo(Long)
+ Criteria andPfVatFeeIn(List<Long>)
+ Criteria andPfVatFeeNotIn(List<Long>)
+ Criteria andPfVatFeeBetween(Long,Long)
+ Criteria andPfVatFeeNotBetween(Long,Long)
+ Criteria andAfVatFeeIsNull()
+ Criteria andAfVatFeeIsNotNull()
+ Criteria andAfVatFeeEqualTo(Long)
+ Criteria andAfVatFeeNotEqualTo(Long)
+ Criteria andAfVatFeeGreaterThan(Long)
+ Criteria andAfVatFeeGreaterThanOrEqualTo(Long)
+ Criteria andAfVatFeeLessThan(Long)
+ Criteria andAfVatFeeLessThanOrEqualTo(Long)
+ Criteria andAfVatFeeIn(List<Long>)
+ Criteria andAfVatFeeNotIn(List<Long>)
+ Criteria andAfVatFeeBetween(Long,Long)
+ Criteria andAfVatFeeNotBetween(Long,Long)
+ Criteria andCfVatFeeIsNull()
+ Criteria andCfVatFeeIsNotNull()
+ Criteria andCfVatFeeEqualTo(Long)
+ Criteria andCfVatFeeNotEqualTo(Long)
+ Criteria andCfVatFeeGreaterThan(Long)
+ Criteria andCfVatFeeGreaterThanOrEqualTo(Long)
+ Criteria andCfVatFeeLessThan(Long)
+ Criteria andCfVatFeeLessThanOrEqualTo(Long)
+ Criteria andCfVatFeeIn(List<Long>)
+ Criteria andCfVatFeeNotIn(List<Long>)
+ Criteria andCfVatFeeBetween(Long,Long)
+ Criteria andCfVatFeeNotBetween(Long,Long)
+ Criteria andLfVatFeeIsNull()
+ Criteria andLfVatFeeIsNotNull()
+ Criteria andLfVatFeeEqualTo(Long)
+ Criteria andLfVatFeeNotEqualTo(Long)
+ Criteria andLfVatFeeGreaterThan(Long)
+ Criteria andLfVatFeeGreaterThanOrEqualTo(Long)
+ Criteria andLfVatFeeLessThan(Long)
+ Criteria andLfVatFeeLessThanOrEqualTo(Long)
+ Criteria andLfVatFeeIn(List<Long>)
+ Criteria andLfVatFeeNotIn(List<Long>)
+ Criteria andLfVatFeeBetween(Long,Long)
+ Criteria andLfVatFeeNotBetween(Long,Long)
+ Criteria andFundInterestWhtFeeIsNull()
+ Criteria andFundInterestWhtFeeIsNotNull()
+ Criteria andFundInterestWhtFeeEqualTo(Long)
+ Criteria andFundInterestWhtFeeNotEqualTo(Long)
+ Criteria andFundInterestWhtFeeGreaterThan(Long)
+ Criteria andFundInterestWhtFeeGreaterThanOrEqualTo(Long)
+ Criteria andFundInterestWhtFeeLessThan(Long)
+ Criteria andFundInterestWhtFeeLessThanOrEqualTo(Long)
+ Criteria andFundInterestWhtFeeIn(List<Long>)
+ Criteria andFundInterestWhtFeeNotIn(List<Long>)
+ Criteria andFundInterestWhtFeeBetween(Long,Long)
+ Criteria andFundInterestWhtFeeNotBetween(Long,Long)
+ Criteria andFundInterestVatFeeIsNull()
+ Criteria andFundInterestVatFeeIsNotNull()
+ Criteria andFundInterestVatFeeEqualTo(Long)
+ Criteria andFundInterestVatFeeNotEqualTo(Long)
+ Criteria andFundInterestVatFeeGreaterThan(Long)
+ Criteria andFundInterestVatFeeGreaterThanOrEqualTo(Long)
+ Criteria andFundInterestVatFeeLessThan(Long)
+ Criteria andFundInterestVatFeeLessThanOrEqualTo(Long)
+ Criteria andFundInterestVatFeeIn(List<Long>)
+ Criteria andFundInterestVatFeeNotIn(List<Long>)
+ Criteria andFundInterestVatFeeBetween(Long,Long)
+ Criteria andFundInterestVatFeeNotBetween(Long,Long)
+ Criteria andPrincipalVatFeeIsNull()
+ Criteria andPrincipalVatFeeIsNotNull()
+ Criteria andPrincipalVatFeeEqualTo(Long)
+ Criteria andPrincipalVatFeeNotEqualTo(Long)
+ Criteria andPrincipalVatFeeGreaterThan(Long)
+ Criteria andPrincipalVatFeeGreaterThanOrEqualTo(Long)
+ Criteria andPrincipalVatFeeLessThan(Long)
+ Criteria andPrincipalVatFeeLessThanOrEqualTo(Long)
+ Criteria andPrincipalVatFeeIn(List<Long>)
+ Criteria andPrincipalVatFeeNotIn(List<Long>)
+ Criteria andPrincipalVatFeeBetween(Long,Long)
+ Criteria andPrincipalVatFeeNotBetween(Long,Long)
+ Criteria andSecondProdCodeIsNull()
+ Criteria andSecondProdCodeIsNotNull()
+ Criteria andSecondProdCodeEqualTo(String)
+ Criteria andSecondProdCodeNotEqualTo(String)
+ Criteria andSecondProdCodeGreaterThan(String)
+ Criteria andSecondProdCodeGreaterThanOrEqualTo(String)
+ Criteria andSecondProdCodeLessThan(String)
+ Criteria andSecondProdCodeLessThanOrEqualTo(String)
+ Criteria andSecondProdCodeLike(String)
+ Criteria andSecondProdCodeNotLike(String)
+ Criteria andSecondProdCodeIn(List<String>)
+ Criteria andSecondProdCodeNotIn(List<String>)
+ Criteria andSecondProdCodeBetween(String,String)
+ Criteria andSecondProdCodeNotBetween(String,String)
+ Criteria andRepayStatusIsNull()
+ Criteria andRepayStatusIsNotNull()
+ Criteria andRepayStatusEqualTo(Byte)
+ Criteria andRepayStatusNotEqualTo(Byte)
+ Criteria andRepayStatusGreaterThan(Byte)
+ Criteria andRepayStatusGreaterThanOrEqualTo(Byte)
+ Criteria andRepayStatusLessThan(Byte)
+ Criteria andRepayStatusLessThanOrEqualTo(Byte)
+ Criteria andRepayStatusIn(List<Byte>)
+ Criteria andRepayStatusNotIn(List<Byte>)
+ Criteria andRepayStatusBetween(Byte,Byte)
+ Criteria andRepayStatusNotBetween(Byte,Byte)
+ Criteria andDueDateIsNull()
+ Criteria andDueDateIsNotNull()
+ Criteria andDueDateEqualTo(Date)
+ Criteria andDueDateNotEqualTo(Date)
+ Criteria andDueDateGreaterThan(Date)
+ Criteria andDueDateGreaterThanOrEqualTo(Date)
+ Criteria andDueDateLessThan(Date)
+ Criteria andDueDateLessThanOrEqualTo(Date)
+ Criteria andDueDateIn(List<Date>)
+ Criteria andDueDateNotIn(List<Date>)
+ Criteria andDueDateBetween(Date,Date)
+ Criteria andDueDateNotBetween(Date,Date)
+ Criteria andRepaymentDateIsNull()
+ Criteria andRepaymentDateIsNotNull()
+ Criteria andRepaymentDateEqualTo(Date)
+ Criteria andRepaymentDateNotEqualTo(Date)
+ Criteria andRepaymentDateGreaterThan(Date)
+ Criteria andRepaymentDateGreaterThanOrEqualTo(Date)
+ Criteria andRepaymentDateLessThan(Date)
+ Criteria andRepaymentDateLessThanOrEqualTo(Date)
+ Criteria andRepaymentDateIn(List<Date>)
+ Criteria andRepaymentDateNotIn(List<Date>)
+ Criteria andRepaymentDateBetween(Date,Date)
+ Criteria andRepaymentDateNotBetween(Date,Date)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.RefundDetailExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.RefundDetailExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.ext.FundBatchcodeAccountExt {
- Long amount
- String loanNumber
- FundBatchcodeFlowOperateTypeEnum operateType
- Byte fundStatus
- String mobile
}
class com.welab.fund.job.RefundByNextDayJob {
+ void execute(ShardingContext)
}
class com.welab.fund.job.TransferRechargeJob_Test {
- TransferRechargeJob transferRechargeJob
+ void execute_test()
}
class com.welab.fund.mq.FundMatchRuleUpdateListener_Test {
- FundMatchRuleUpdateListener fundMatchRuleUpdateListener
+ void onMessage_test()
}
enum com.welab.fund.enums.fundinfo.FundOrgTypeEnum {
+  JPG
- String value
- String name
- String indonesiaName
+ boolean check(String)
+ {static} List<Map<String,Object>> getStatusList(boolean)
}
interface com.welab.fund.mapper.FundAccountMapper {
~ int countByExample(FundAccountExample)
~ int deleteByExample(FundAccountExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundAccount)
~ int insertSelective(FundAccount)
~ List<FundAccount> selectByExample(FundAccountExample)
~ FundAccount selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundAccount,FundAccountExample)
~ int updateByExample(FundAccount,FundAccountExample)
~ int updateByPrimaryKeySelective(FundAccount)
~ int updateByPrimaryKey(FundAccount)
}
interface com.welab.fund.mapper.FundLoansExtMapper {
~ FundLoans getByLoansNumber(String)
~ List<FundLoansExt> getFundLoans(FundLoansExt)
~ FundLoansExt getLoansAndBatchCodeByLoansNumber(String)
~ List<FundLoansExt> getLoansAndBatchCodeByLoansNumbers(List<String>)
}
class com.welab.fund.app.service.fundaccount.AddRepaymentAccount {
+ void processAccountAmountByType(FundTradingExt)
+ FundAccount getFundAccount(FundTradingExt)
}
class com.welab.fund.app.base.BaseRetracementReocrdService {
- RetracementReocrdMapper retracementReocrdMapper
- RetracementReocrdExtMapper retracementRecordExtMapper
+ List<RetracementReocrd> findByTransIds(List<String>)
+ int insertBatch(List<TrackVo>)
+ int updateStatus(RetracementReocrd)
}
class com.welab.fund.job.TransferRechargeJob {
- FundTransferService fundTransferServiceImple
+ void execute(ShardingContext)
}
class com.welab.fund.dto.FundTasticRollbackLoansCmd {
- {static} long serialVersionUID
- String loanNumber
- FundBatchcodeFlowOperateTypeEnum rollbackType
- Long interest
}
class com.welab.fund.app.base.batchcode.BaseFundLoanMatchBatchcodeService {
- FundLoanMatchBatchcodeMapper fundLoanMatchBatchcodeMapper
+ List<FundLoanMatchBatchcode> getBatchCodeList(List<String>)
+ FundLoanMatchBatchcode getBatchCode(String)
+ void bindBatchcode(MatchFundModel)
+ void deleteLoans(String)
+ List<FundLoanMatchBatchcode> getLoannumbers(String)
}
class com.welab.fund.utils.CountDownLatchUtils {
- long timeOut
- <<Create>> CountDownLatchUtils(List<T>)
+ {static} CountDownLatchUtils<T> buildCountDownLatch(List<T>)
+ {static} CountDownLatchUtils<T> buildCountDownLatch(List<T>,long)
+ boolean runAndWait(Consumer<? super T>)
+ void runAndWait(TraversingFunction<? super T,? super CountDownLatch,Integer>)
+ void runAndWaitForIndex(BiConsumer<? super T,Integer>)
+ void runAndWait(BiConsumer<? super T,? super CountDownLatch>)
}
interface com.welab.fund.mapper.FundTradingQueueMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(FundTradingQueue)
~ int insertSelective(FundTradingQueue)
~ FundTradingQueue selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(FundTradingQueue)
~ int updateByPrimaryKey(FundTradingQueue)
}
class com.welab.fund.job.SendRefundEmailJob {
- SendRefundEmailService sendRefundEmailService
- WelabSeaDynamicDbService welabSeaDynamicDbService
- JdbcTemplate jdbcTemplate
+ void execute(ShardingContext)
}
class com.welab.fund.dto.response.FundAccountDTO {
- {static} long serialVersionUID
- Long fundId
- String fundCode
- String accountNo
- Long availableAmount
}
class com.welab.fund.dto.response.TopupNotificationsResDTO {
- Long balance
}
class com.welab.fund.app.service.FundMatchRuleService {
- BaseFundMatchRuleService baseFundMatchRuleService
- FundMqProducer fundMqProducer
- NormalFundMatchRuleCmdExe normalFundMatchRuleCmdExe
- ToBFundMatchRuleCmdExe toBFundMatchRuleCmdExe
- TravelokaPlaterCmdExe travelokaPlaterCmdExe
+ Response<List<FundMatchRuleTrackVO>> getNormalRuleTrackList(String)
+ void updateNormalRule(List<FundMatchRuleExt>)
+ void updateRule(FundMatchRule)
+ Response<List<ToBFundMatchRuleVO>> getToBRule()
+ void updateToBRule(Long,List<ToBFundMatchRuleVO>)
+ Response<List<FundMatchRuleVO>> getNormalRule(String)
+ void updateTravelokRule(Long,List<TravelokaPlaterRuleVO>)
+ Response<List<TravelokaPlaterRuleVO>> getTravelokRule()
}
class com.welab.fund.job.RefundJob_Test {
- RefundJob refundJob
+ void after()
+ void execute_test()
}
interface com.welab.fund.mapper.FundMqErrorExtMapper {
~ List<FundMqError> getErrorMqList()
}
class com.welab.fund.common.Urls {
+ {static} String ROOT
+ {static} String ROOT_DESC
+ {static} String V1
+ {static} String V3
+ {static} String V3_AUTH
- <<Create>> Urls()
}
class com.welab.fund.common.Urls$OJK {
+ {static} String NAME
+ {static} String DESC
+ {static} String MODULE
+ {static} String V1_OJK_FUND_INFO
+ {static} String V1_OJK_FUND_INFO_DESC
+ {static} String V1_OJK_TRADING_PAGE
+ {static} String V1_OJK_TRADING_PAGE_DESC
+ {static} String V1_LOAN_LIST
+ {static} String V1_LOAN_LIST_DESC
+ {static} String V1_LOAN_UPDATE
+ {static} String V1_LOAN_UPDATE_DESC
+ {static} String V1_FUND_LIST_DESC
+ {static} String V1_FUND_LIST
- <<Create>> OJK()
}
class com.welab.fund.common.Urls$FundAccountManagerURL {
+ {static} String NAME
+ {static} String DESC
+ {static} String MODULE
+ {static} String V1_FUND_ACCOUNT_DESC
+ {static} String V1_FUND_ACCOUNT
+ {static} String V1_FUND_RECHARGE_DESC
+ {static} String V1_FUND_RECHARGE
- <<Create>> FundAccountManagerURL()
}
class com.welab.fund.common.Urls$FundManagerURL {
+ {static} String NAME
+ {static} String DESC
+ {static} String MODULE
+ {static} String V1_FUND_MANAGER
+ {static} String V1_FUND_MANAGER_DESC
+ {static} String V1_FUND_AUTH_LIST
+ {static} String V1_FUND_AUTH_LIST_DESC
+ {static} String V1_FUND_AUTH_UPDATE
+ {static} String V1_FUND_AUTH_UPDATE_DESC
+ {static} String V1_FUND_MANAGER_LIST
+ {static} String V1_FUND_MANAGER_LIST_DESC
- <<Create>> FundManagerURL()
}
class com.welab.fund.common.Urls$FuncConfigURL {
+ {static} String NAME
+ {static} String DESC
+ {static} String MODULE
+ {static} String V1_FUND_CONFIG_LIST
+ {static} String V1_FUND_CONFIG_LIST_DESC
+ {static} String V1_FUND_UPDATE_CONFIG
+ {static} String V1_FUND_UPDATE_CONFIG_DESC
- <<Create>> FuncConfigURL()
}
class com.welab.fund.common.Urls$FundMatchRuleURL {
+ {static} String NAME
+ {static} String DESC
+ {static} String MODULE
+ {static} String V3_GET_RULE_LIST
+ {static} String V3_GET_RULE_LIST_DESC
+ {static} String V3_GET_RULE_UPDATETRACK_LIST
+ {static} String V3_GET_RULE_UPDATETRACK_LIST_DESC
+ {static} String V3_FUND_UPDATE_RULE_NEW
+ {static} String V3_FUND_UPDATE_RULE_NEW_DESC
+ {static} String V3_FUND_UPDATE_RULE
+ {static} String V3_FUND_UPDATE_RULE_DESC
+ {static} String GET_TOB_RULE
+ {static} String GET_TOB_RULE_DESC
+ {static} String UPDATE_TOB_RULE
+ {static} String UPDATE_TOB_RULE_DESC
+ {static} String GET_TRAVELOK_RULE
+ {static} String GET_TRAVELOK_RULE_DESC
+ {static} String UPDATE_TRAVELOK_RULE
+ {static} String UPDATE_TRAVELOK_RULE_DESC
- <<Create>> FundMatchRuleURL()
}
class com.welab.fund.common.Urls$RefundJobURL {
+ {static} String NAME
+ {static} String DESC
+ {static} String MODULE
+ {static} String V3_CALCULATE_REFUND
+ {static} String V3_CALCULATE_REFUND_DESC
+ {static} String V3_EXECUTE_REFUND
+ {static} String V3_EXECUTE_REFUND_DESC
+ {static} String V3_GET_CHANGE_HISTORY_LIST
+ {static} String V3_GET_CHANGE_HISTORY_LIST_DESC
+ {static} String V3_DOWNLOAD_REFUND_RECORD
+ {static} String V3_DOWNLOAD_REFUND_RECORD_DESC
- <<Create>> RefundJobURL()
}
class com.welab.fund.common.Urls$FundTasticURL {
+ {static} String NAME
+ {static} String DESC
+ {static} String MODULE
+ {static} String IMPORT_FUNDER
+ {static} String IMPORT_FUNDER_DESC
+ {static} String FUNDER_LIST
+ {static} String FUNDER_LIST_DESC
+ {static} String TOTAL_AMOUNT
+ {static} String TOTAL_AMOUNT_DESC
+ {static} String FUND_EXPIRED_DATE
+ {static} String FUND_EXPIRED_DATE_DESC
- <<Create>> FundTasticURL()
}
interface com.welab.fund.service.FundTasticService {
~ void rollbackLoans(FundTasticRollbackLoansCmd)
~ FundTasticResponseDTO getFunder(FundTasticRequestDTO)
~ Response<Map<String,String>> getBatchcode(List<String>)
~ Response<List<String>> getLoannumber(String)
~ void loansNotify(LoansNotifyCmd)
~ void loansInterestNotify(LoansNotifyCmd)
~ TopupNotificationsResDTO topupNotifications(TopupNotificationsCmd)
~ PageInfo<TopupDTO> findTopupByPage(TopupQryDTO)
~ void withdrawal(FundTasticRequestDTO)
}
class com.welab.fund.app.command.TopupNotificationsCmdExe {
- BaseFtTopupRecordService baseFtTopupRecordService
- BaseFundInfoService baseFundInfoService
- RemoteAccountManager remoteAccountManager
+ TopupNotificationsResDTO execute(TopupNotificationsCmd)
}
class com.welab.fund.app.manager.RemoteAccountManager {
- AccountServiceFacade accountServiceFacade
- FundConfigService fundConfigService
- BaseFundAccountService baseFundAccountService
- Integer profileValue
- Integer failRetryTimes
+ AccountVO getAccount(String,FundEnum)
+ AccountVO getAccount(String,FundEnum,int)
- AccountVO getActualAccount(AccountDto,int)
- AccountVO getMockAccount(AccountDto)
}
class com.welab.fund.vo.request.FundManagerVo {
- String mobile
- String fundCode
- String fundBaseIds
- Long userId
- Byte status
}
class com.welab.fund.job.TestJob_Test {
- TestJob testJob
+ void execute_test()
}
class com.welab.fund.job.TransferBCAJob {
- BCATransferCmdExe bcaReTransferCmdExe
+ void execute(ShardingContext)
}
class com.welab.fund.dto.FundAccountInfoDTO {
- {static} long serialVersionUID
- Long id
- String fundName
- String fundCode
- String fundType
- Byte fundAccType
- Byte fundRateType
- String phone
- String address
- String licenseNum
- Long amount
- Long repaymentAmount
- Byte status
- String orgType
- String legalType
- String legalName
- String legalNum
- Date loanStart
- Date loanEnd
- String loanMode
- Date repaymentStart
- Date repaymentEnd
- String repaymentMode
- String isApprove
- String paymentMethod
- String accountNo
- Byte accountType
- Byte gatewayType
- Boolean isAdvance
- Long alarmBalance
}
class com.welab.fund.mode.ext.FundAccountExt {
- Integer count
- Long remoteAmount
- Long repaymentAmount
- boolean recharging
- String gatewayName
- String fundName
- Integer addOrMinus
- Byte status
- List<Byte> accountTypes
}
class com.welab.fund.configuration.fundbase.handler.HeaderConstant {
+ {static} String FUND_BASE_ID
}
interface com.welab.fund.mapper.FundMqErrorMapper {
~ int countByExample(FundMqErrorExample)
~ int deleteByExample(FundMqErrorExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundMqError)
~ int insertSelective(FundMqError)
~ List<FundMqError> selectByExample(FundMqErrorExample)
~ FundMqError selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundMqError,FundMqErrorExample)
~ int updateByExample(FundMqError,FundMqErrorExample)
~ int updateByPrimaryKeySelective(FundMqError)
~ int updateByPrimaryKey(FundMqError)
}
class com.welab.fund.mq.FundMqProducer {
- RabbitMessagingTemplate rabbitMessagingTemplate
- RabbitTemplate rabbitTemplate
- AmqpAdmin amqpAdmin
+ void sendMessage(String,String)
+ void sendMessage(String,String,String)
+ void sendMessage(String,String,String,long)
+ void sendDelayMessage(SynDelayDTO)
+ void send(String,String)
}
class com.welab.fund.config.Swagger2Config {
# {static} String BASE_PACKAGE
- Boolean swaggerEnable
+ Docket createRestApi()
- List<Parameter> buildHeader()
- ApiInfo apiInfo()
- Tag[] getTags()
}
enum com.welab.fund.enums.MqTypeEnum {
+  LOANS
+  REPAYMENT
+  APPROVE
+  FIF_REJECTED
+  CALL_BACK
+  NEW_CALL_BACK
+  NEW_LOANS
+  FUND_REMATCH
+  FUND_RECHARGE
+  WELAB_SEA_FUND_SIGNED_NOTICE
+  FASPAY_REFUND_QUEUE
+  FUND_REPAYMENT_AMOUNT_RETRACEMENT
- Byte type
- String mq
- {static} Map<String,MqTypeEnum> cache
+ {static} MqTypeEnum getByMq(String)
}
class com.welab.fund.app.command.NormalFundMatchRuleCmdExe_Test {
- NormalFundMatchRuleCmdExe normalFundMatchRuleCmdExe
+ void updateNormalRule_test()
+ void getNormalRule_test()
+ void getNormalRuleTrackList_test()
}
class com.welab.fund.app.command.RefundT1CmdExe_Test {
- RefundT1CmdExe refundT1CmdExe
+ void refundT1_test()
}
interface com.welab.fund.app.manager.match.FundMatchRuleManagerI {
~ String matchFundInfo(MatchFundModel)
}
enum com.welab.fund.enums.FtTopupRecordStatusEnum {
+  INIT
+  SUCCESS
+  FAIL
- Byte val
- String desc
}
class com.welab.fund.mode.ext.FundManagerExt {
- String fundCodes
- String fundCode
}
class com.welab.fund.mode.FundMqError {
- Long id
- String content
- Integer retries
- Boolean status
- Byte msgType
- String mqQueue
- Date updatedAt
- Date createdAt
+ Long getId()
+ void setId(Long)
+ String getContent()
+ void setContent(String)
+ Integer getRetries()
+ void setRetries(Integer)
+ Boolean getStatus()
+ void setStatus(Boolean)
+ Byte getMsgType()
+ void setMsgType(Byte)
+ String getMqQueue()
+ void setMqQueue(String)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
}
class com.welab.fund.app.facade.OptUnityLogServiceFacade {
- OptUnityLogService optUnityLogService
+ PageInfo<OptUnityLogDto> listOptUnityLog(PageRequestDTO<ListOptUnityLogCmd>)
+ Response addOptUnityLog(AddOptUnityLogCmd)
}
class com.welab.fund.vo.FundMatchRuleVO {
- Long id
- Boolean ruleStatus
- JSONObject rule
}
class com.welab.fund.test.refund.RefundCallback {
- FundTransferService fundTransferServiceImpl
+ void callback()
}
class com.welab.fund.app.command.BCATransferCmdExe {
- JedisCluster jedisCluster
- RepaymentTrackRemoteService repaymentTrackRemoteService
- FundAccountService fundAccountService
- FundTradingLocalService fundTradingLocalService
- TransferManager transferManager
+ void transferBCA(String)
}
class com.welab.fund.mode.ext.FundBaseInfoExt {
- boolean selected
- Long amount
- Long repaymentAmount
- String accountNo
- Byte gatewayType
- String serviceId
- Byte fundRateType
- Byte fundAccType
}
interface com.welab.fund.mapper.FundMatchRuleMapper {
~ int countByExample(FundMatchRuleExample)
~ int deleteByExample(FundMatchRuleExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundMatchRule)
~ int insertSelective(FundMatchRule)
~ List<FundMatchRule> selectByExampleWithBLOBs(FundMatchRuleExample)
~ List<FundMatchRule> selectByExample(FundMatchRuleExample)
~ FundMatchRule selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundMatchRule,FundMatchRuleExample)
~ int updateByExampleWithBLOBs(FundMatchRule,FundMatchRuleExample)
~ int updateByExample(FundMatchRule,FundMatchRuleExample)
~ int updateByPrimaryKeySelective(FundMatchRule)
~ int updateByPrimaryKeyWithBLOBs(FundMatchRule)
~ int updateByPrimaryKey(FundMatchRule)
}
class com.welab.fund.dto.request.FundTasticRequestDTO {
- {static} long serialVersionUID
- String fundMobile
- String batchCode
- String bankCode
- String accountNumber
- Long withdrawAmount
}
class com.welab.fund.app.facade.ITbLoanDubboServiceFacade {
- ITbLoanDubboService iTbLoanDubboService
+ Response<List<TbLoansInfoVO>> findByLoanNumberList(List<String>)
}
class com.welab.fund.mode.ext.FundFtImportDataExt {
- String address
- String fundCode
}
class com.welab.fund.mode.FundBatchcodeAccountExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundBatchcodeAccountExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundBatchcodeAccountExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundIdIsNull()
+ Criteria andFundIdIsNotNull()
+ Criteria andFundIdEqualTo(Long)
+ Criteria andFundIdNotEqualTo(Long)
+ Criteria andFundIdGreaterThan(Long)
+ Criteria andFundIdGreaterThanOrEqualTo(Long)
+ Criteria andFundIdLessThan(Long)
+ Criteria andFundIdLessThanOrEqualTo(Long)
+ Criteria andFundIdIn(List<Long>)
+ Criteria andFundIdNotIn(List<Long>)
+ Criteria andFundIdBetween(Long,Long)
+ Criteria andFundIdNotBetween(Long,Long)
+ Criteria andThirdPartyUqCodeIsNull()
+ Criteria andThirdPartyUqCodeIsNotNull()
+ Criteria andThirdPartyUqCodeEqualTo(String)
+ Criteria andThirdPartyUqCodeNotEqualTo(String)
+ Criteria andThirdPartyUqCodeGreaterThan(String)
+ Criteria andThirdPartyUqCodeGreaterThanOrEqualTo(String)
+ Criteria andThirdPartyUqCodeLessThan(String)
+ Criteria andThirdPartyUqCodeLessThanOrEqualTo(String)
+ Criteria andThirdPartyUqCodeLike(String)
+ Criteria andThirdPartyUqCodeNotLike(String)
+ Criteria andThirdPartyUqCodeIn(List<String>)
+ Criteria andThirdPartyUqCodeNotIn(List<String>)
+ Criteria andThirdPartyUqCodeBetween(String,String)
+ Criteria andThirdPartyUqCodeNotBetween(String,String)
+ Criteria andBatchCodeIsNull()
+ Criteria andBatchCodeIsNotNull()
+ Criteria andBatchCodeEqualTo(String)
+ Criteria andBatchCodeNotEqualTo(String)
+ Criteria andBatchCodeGreaterThan(String)
+ Criteria andBatchCodeGreaterThanOrEqualTo(String)
+ Criteria andBatchCodeLessThan(String)
+ Criteria andBatchCodeLessThanOrEqualTo(String)
+ Criteria andBatchCodeLike(String)
+ Criteria andBatchCodeNotLike(String)
+ Criteria andBatchCodeIn(List<String>)
+ Criteria andBatchCodeNotIn(List<String>)
+ Criteria andBatchCodeBetween(String,String)
+ Criteria andBatchCodeNotBetween(String,String)
+ Criteria andRechargeAmountIsNull()
+ Criteria andRechargeAmountIsNotNull()
+ Criteria andRechargeAmountEqualTo(Long)
+ Criteria andRechargeAmountNotEqualTo(Long)
+ Criteria andRechargeAmountGreaterThan(Long)
+ Criteria andRechargeAmountGreaterThanOrEqualTo(Long)
+ Criteria andRechargeAmountLessThan(Long)
+ Criteria andRechargeAmountLessThanOrEqualTo(Long)
+ Criteria andRechargeAmountIn(List<Long>)
+ Criteria andRechargeAmountNotIn(List<Long>)
+ Criteria andRechargeAmountBetween(Long,Long)
+ Criteria andRechargeAmountNotBetween(Long,Long)
+ Criteria andUseAmountIsNull()
+ Criteria andUseAmountIsNotNull()
+ Criteria andUseAmountEqualTo(Long)
+ Criteria andUseAmountNotEqualTo(Long)
+ Criteria andUseAmountGreaterThan(Long)
+ Criteria andUseAmountGreaterThanOrEqualTo(Long)
+ Criteria andUseAmountLessThan(Long)
+ Criteria andUseAmountLessThanOrEqualTo(Long)
+ Criteria andUseAmountIn(List<Long>)
+ Criteria andUseAmountNotIn(List<Long>)
+ Criteria andUseAmountBetween(Long,Long)
+ Criteria andUseAmountNotBetween(Long,Long)
+ Criteria andInterestAmountIsNull()
+ Criteria andInterestAmountIsNotNull()
+ Criteria andInterestAmountEqualTo(Long)
+ Criteria andInterestAmountNotEqualTo(Long)
+ Criteria andInterestAmountGreaterThan(Long)
+ Criteria andInterestAmountGreaterThanOrEqualTo(Long)
+ Criteria andInterestAmountLessThan(Long)
+ Criteria andInterestAmountLessThanOrEqualTo(Long)
+ Criteria andInterestAmountIn(List<Long>)
+ Criteria andInterestAmountNotIn(List<Long>)
+ Criteria andInterestAmountBetween(Long,Long)
+ Criteria andInterestAmountNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
+ Criteria andExpiredAtIsNull()
+ Criteria andExpiredAtIsNotNull()
+ Criteria andExpiredAtEqualTo(Date)
+ Criteria andExpiredAtNotEqualTo(Date)
+ Criteria andExpiredAtGreaterThan(Date)
+ Criteria andExpiredAtGreaterThanOrEqualTo(Date)
+ Criteria andExpiredAtLessThan(Date)
+ Criteria andExpiredAtLessThanOrEqualTo(Date)
+ Criteria andExpiredAtIn(List<Date>)
+ Criteria andExpiredAtNotIn(List<Date>)
+ Criteria andExpiredAtBetween(Date,Date)
+ Criteria andExpiredAtNotBetween(Date,Date)
+ Criteria andFreezeAmountIsNull()
+ Criteria andFreezeAmountIsNotNull()
+ Criteria andFreezeAmountEqualTo(Long)
+ Criteria andFreezeAmountNotEqualTo(Long)
+ Criteria andFreezeAmountGreaterThan(Long)
+ Criteria andFreezeAmountGreaterThanOrEqualTo(Long)
+ Criteria andFreezeAmountLessThan(Long)
+ Criteria andFreezeAmountLessThanOrEqualTo(Long)
+ Criteria andFreezeAmountIn(List<Long>)
+ Criteria andFreezeAmountNotIn(List<Long>)
+ Criteria andFreezeAmountBetween(Long,Long)
+ Criteria andFreezeAmountNotBetween(Long,Long)
+ Criteria andWithdrawalIsNull()
+ Criteria andWithdrawalIsNotNull()
+ Criteria andWithdrawalEqualTo(Long)
+ Criteria andWithdrawalNotEqualTo(Long)
+ Criteria andWithdrawalGreaterThan(Long)
+ Criteria andWithdrawalGreaterThanOrEqualTo(Long)
+ Criteria andWithdrawalLessThan(Long)
+ Criteria andWithdrawalLessThanOrEqualTo(Long)
+ Criteria andWithdrawalIn(List<Long>)
+ Criteria andWithdrawalNotIn(List<Long>)
+ Criteria andWithdrawalBetween(Long,Long)
+ Criteria andWithdrawalNotBetween(Long,Long)
}
class com.welab.fund.mode.FundBatchcodeAccountExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundBatchcodeAccountExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.app.impl.FundTasticDubboServiceImpl_Test {
- FundTasticDubboServiceImpl fundTasticDubboServiceImpl
+ void loansInterestNotify_test()
+ void findTopupByPage_test()
+ void rollbackLoans_test()
+ void getBatchcode_test()
+ void loansNotify_test()
+ void topupNotifications_test()
+ void getFunder_test()
}
class com.welab.fund.test.mq.MQTest {
- FundMqProducer fundMqProducer
- FundLoansApplyCmdExe fundLoansApplyCmdExe
+ void send()
+ void apply()
}
class com.welab.fund.controller.FundTasticController_Test {
- FundTasticController fundTasticController
+ void fundList_test()
+ void importFunder_test()
+ void totalAmount_test()
+ void updateExpiredDate_test()
}
class com.welab.fund.app.BeanfactoryUtils {
- {static} ApplicationContext context
+ {static} T getBean(Class<T>)
+ {static} T getBean(String)
+ {static} T getBean(String,Class<T>)
+ void setApplicationContext(ApplicationContext)
}
class com.welab.fund.configuration.fundbase.auth.FundBaseAuthenticateIntercept {
- Logger logger
+ boolean preHandle(HttpServletRequest,HttpServletResponse,Object)
+ void postHandle(HttpServletRequest,HttpServletResponse,Object,ModelAndView)
+ void afterCompletion(HttpServletRequest,HttpServletResponse,Object,Exception)
}
class com.welab.fund.mode.FundManagerExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundManagerExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundManagerExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andUserIdIsNull()
+ Criteria andUserIdIsNotNull()
+ Criteria andUserIdEqualTo(Long)
+ Criteria andUserIdNotEqualTo(Long)
+ Criteria andUserIdGreaterThan(Long)
+ Criteria andUserIdGreaterThanOrEqualTo(Long)
+ Criteria andUserIdLessThan(Long)
+ Criteria andUserIdLessThanOrEqualTo(Long)
+ Criteria andUserIdIn(List<Long>)
+ Criteria andUserIdNotIn(List<Long>)
+ Criteria andUserIdBetween(Long,Long)
+ Criteria andUserIdNotBetween(Long,Long)
+ Criteria andMobileIsNull()
+ Criteria andMobileIsNotNull()
+ Criteria andMobileEqualTo(String)
+ Criteria andMobileNotEqualTo(String)
+ Criteria andMobileGreaterThan(String)
+ Criteria andMobileGreaterThanOrEqualTo(String)
+ Criteria andMobileLessThan(String)
+ Criteria andMobileLessThanOrEqualTo(String)
+ Criteria andMobileLike(String)
+ Criteria andMobileNotLike(String)
+ Criteria andMobileIn(List<String>)
+ Criteria andMobileNotIn(List<String>)
+ Criteria andMobileBetween(String,String)
+ Criteria andMobileNotBetween(String,String)
+ Criteria andFundBaseIdsIsNull()
+ Criteria andFundBaseIdsIsNotNull()
+ Criteria andFundBaseIdsEqualTo(String)
+ Criteria andFundBaseIdsNotEqualTo(String)
+ Criteria andFundBaseIdsGreaterThan(String)
+ Criteria andFundBaseIdsGreaterThanOrEqualTo(String)
+ Criteria andFundBaseIdsLessThan(String)
+ Criteria andFundBaseIdsLessThanOrEqualTo(String)
+ Criteria andFundBaseIdsLike(String)
+ Criteria andFundBaseIdsNotLike(String)
+ Criteria andFundBaseIdsIn(List<String>)
+ Criteria andFundBaseIdsNotIn(List<String>)
+ Criteria andFundBaseIdsBetween(String,String)
+ Criteria andFundBaseIdsNotBetween(String,String)
+ Criteria andStatusIsNull()
+ Criteria andStatusIsNotNull()
+ Criteria andStatusEqualTo(Byte)
+ Criteria andStatusNotEqualTo(Byte)
+ Criteria andStatusGreaterThan(Byte)
+ Criteria andStatusGreaterThanOrEqualTo(Byte)
+ Criteria andStatusLessThan(Byte)
+ Criteria andStatusLessThanOrEqualTo(Byte)
+ Criteria andStatusIn(List<Byte>)
+ Criteria andStatusNotIn(List<Byte>)
+ Criteria andStatusBetween(Byte,Byte)
+ Criteria andStatusNotBetween(Byte,Byte)
+ Criteria andAdminRoleIsNull()
+ Criteria andAdminRoleIsNotNull()
+ Criteria andAdminRoleEqualTo(Byte)
+ Criteria andAdminRoleNotEqualTo(Byte)
+ Criteria andAdminRoleGreaterThan(Byte)
+ Criteria andAdminRoleGreaterThanOrEqualTo(Byte)
+ Criteria andAdminRoleLessThan(Byte)
+ Criteria andAdminRoleLessThanOrEqualTo(Byte)
+ Criteria andAdminRoleIn(List<Byte>)
+ Criteria andAdminRoleNotIn(List<Byte>)
+ Criteria andAdminRoleBetween(Byte,Byte)
+ Criteria andAdminRoleNotBetween(Byte,Byte)
+ Criteria andCreateAtIsNull()
+ Criteria andCreateAtIsNotNull()
+ Criteria andCreateAtEqualTo(Date)
+ Criteria andCreateAtNotEqualTo(Date)
+ Criteria andCreateAtGreaterThan(Date)
+ Criteria andCreateAtGreaterThanOrEqualTo(Date)
+ Criteria andCreateAtLessThan(Date)
+ Criteria andCreateAtLessThanOrEqualTo(Date)
+ Criteria andCreateAtIn(List<Date>)
+ Criteria andCreateAtNotIn(List<Date>)
+ Criteria andCreateAtBetween(Date,Date)
+ Criteria andCreateAtNotBetween(Date,Date)
+ Criteria andUpdateAtIsNull()
+ Criteria andUpdateAtIsNotNull()
+ Criteria andUpdateAtEqualTo(Date)
+ Criteria andUpdateAtNotEqualTo(Date)
+ Criteria andUpdateAtGreaterThan(Date)
+ Criteria andUpdateAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdateAtLessThan(Date)
+ Criteria andUpdateAtLessThanOrEqualTo(Date)
+ Criteria andUpdateAtIn(List<Date>)
+ Criteria andUpdateAtNotIn(List<Date>)
+ Criteria andUpdateAtBetween(Date,Date)
+ Criteria andUpdateAtNotBetween(Date,Date)
}
class com.welab.fund.mode.FundManagerExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundManagerExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
interface com.welab.fund.mapper.RetracementPlanMapper {
~ int countByExample(RetracementPlanExample)
~ int deleteByExample(RetracementPlanExample)
~ int deleteByPrimaryKey(Long)
~ int insert(RetracementPlan)
~ int insertSelective(RetracementPlan)
~ List<RetracementPlan> selectByExampleWithBLOBs(RetracementPlanExample)
~ List<RetracementPlan> selectByExample(RetracementPlanExample)
~ RetracementPlan selectByPrimaryKey(Long)
~ int updateByExampleSelective(RetracementPlan,RetracementPlanExample)
~ int updateByExampleWithBLOBs(RetracementPlan,RetracementPlanExample)
~ int updateByExample(RetracementPlan,RetracementPlanExample)
~ int updateByPrimaryKeySelective(RetracementPlan)
~ int updateByPrimaryKeyWithBLOBs(RetracementPlan)
~ int updateByPrimaryKey(RetracementPlan)
}
class com.welab.fund.vo.response.FundConfigResponseVo {
- Long id
- Date updatedAt
}
interface com.welab.fund.mapper.FundLoansMapper {
~ long countByExample(FundLoansExample)
~ int deleteByExample(FundLoansExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundLoans)
~ int insertSelective(FundLoans)
~ List<FundLoans> selectByExample(FundLoansExample)
~ FundLoans selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundLoans,FundLoansExample)
~ int updateByExample(FundLoans,FundLoansExample)
~ int updateByPrimaryKeySelective(FundLoans)
~ int updateByPrimaryKey(FundLoans)
}
class com.welab.fund.test.fundInfo.FundInfoTest {
- FundLoansLocalService fundLoansLocalServiceImple
- FundServiceManager fundServiceManager
+ void test()
+ void findAccount()
}
class com.welab.fund.app.manager.FundBaseInfoManager {
- BaseFundInfoService baseFundInfoService
- FundAccountService fundAccountService
+ PageInfo<FundBaseInfoExt> findExtListForAccountInfo(PageRequestBO<FundBaseInfo>)
+ FundBaseInfoExt findExtForAccountInfo(Long)
+ boolean isFtFund(Long)
}
class com.welab.fund.mode.FundFtCallbackLog {
- Long id
- String requestParams
- String signature
- String response
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getRequestParams()
+ void setRequestParams(String)
+ String getSignature()
+ void setSignature(String)
+ String getResponse()
+ void setResponse(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
interface com.welab.fund.mapper.FundMatchRuleTrackMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(FundMatchRuleTrack)
~ int insertSelective(FundMatchRuleTrack)
~ FundMatchRuleTrack selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(FundMatchRuleTrack)
~ int updateByPrimaryKeyWithBLOBs(FundMatchRuleTrack)
~ int updateByPrimaryKey(FundMatchRuleTrack)
}
class com.welab.fund.app.service.FundErrorMqService {
- FundMqProducer fundMqProducer
- FundMessageLocalService fundMessageLocalServiceImpl
- BaseFundMqErrorService baseFundMqErrorService
- Pattern pattern
+ void sendSuccess(FundMqError)
+ void addErrorMq(FundMqError,MqTypeEnum)
+ void resendErrorList()
}
interface com.welab.fund.mapper.RetracementTradingReocrdMapper {
~ int countByExample(RetracementTradingReocrdExample)
~ int deleteByExample(RetracementTradingReocrdExample)
~ int deleteByPrimaryKey(Long)
~ int insert(RetracementTradingReocrd)
~ int insertSelective(RetracementTradingReocrd)
~ List<RetracementTradingReocrd> selectByExample(RetracementTradingReocrdExample)
~ RetracementTradingReocrd selectByPrimaryKey(Long)
~ int updateByExampleSelective(RetracementTradingReocrd,RetracementTradingReocrdExample)
~ int updateByExample(RetracementTradingReocrd,RetracementTradingReocrdExample)
~ int updateByPrimaryKeySelective(RetracementTradingReocrd)
~ int updateByPrimaryKey(RetracementTradingReocrd)
}
class com.welab.fund.controller.FundController_Test {
- FundController fundController
+ void validateFundId_test()
+ void updateLoans_test()
+ void list_test()
+ void getTradingPage_test()
+ void fundList_test()
+ void fundList_t_1_test()
+ void getFundInfo_test()
}
interface com.welab.fund.mapper.FundTradingQueueExtMapper {
~ List<FundTradingQueue> getTradingEnable()
~ int processTotalTrading(List<Long>,Long)
}
class com.welab.fund.app.facade.AdvanceScoreServiceFace {
- AdvanceScoreService advanceScoreService
+ String findScoreByNikAndAll(String)
}
class com.welab.fund.test.addLoans.FundLoansTest {
- FundLoansDubboServiceImpl fundLoansDubboServiceImpl
+ void test()
}
class com.welab.fund.mode.FtTopupRecordExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FtTopupRecordExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FtTopupRecordExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundIdIsNull()
+ Criteria andFundIdIsNotNull()
+ Criteria andFundIdEqualTo(Long)
+ Criteria andFundIdNotEqualTo(Long)
+ Criteria andFundIdGreaterThan(Long)
+ Criteria andFundIdGreaterThanOrEqualTo(Long)
+ Criteria andFundIdLessThan(Long)
+ Criteria andFundIdLessThanOrEqualTo(Long)
+ Criteria andFundIdIn(List<Long>)
+ Criteria andFundIdNotIn(List<Long>)
+ Criteria andFundIdBetween(Long,Long)
+ Criteria andFundIdNotBetween(Long,Long)
+ Criteria andTransIdIsNull()
+ Criteria andTransIdIsNotNull()
+ Criteria andTransIdEqualTo(String)
+ Criteria andTransIdNotEqualTo(String)
+ Criteria andTransIdGreaterThan(String)
+ Criteria andTransIdGreaterThanOrEqualTo(String)
+ Criteria andTransIdLessThan(String)
+ Criteria andTransIdLessThanOrEqualTo(String)
+ Criteria andTransIdLike(String)
+ Criteria andTransIdNotLike(String)
+ Criteria andTransIdIn(List<String>)
+ Criteria andTransIdNotIn(List<String>)
+ Criteria andTransIdBetween(String,String)
+ Criteria andTransIdNotBetween(String,String)
+ Criteria andMobileIsNull()
+ Criteria andMobileIsNotNull()
+ Criteria andMobileEqualTo(String)
+ Criteria andMobileNotEqualTo(String)
+ Criteria andMobileGreaterThan(String)
+ Criteria andMobileGreaterThanOrEqualTo(String)
+ Criteria andMobileLessThan(String)
+ Criteria andMobileLessThanOrEqualTo(String)
+ Criteria andMobileLike(String)
+ Criteria andMobileNotLike(String)
+ Criteria andMobileIn(List<String>)
+ Criteria andMobileNotIn(List<String>)
+ Criteria andMobileBetween(String,String)
+ Criteria andMobileNotBetween(String,String)
+ Criteria andAmountIsNull()
+ Criteria andAmountIsNotNull()
+ Criteria andAmountEqualTo(Long)
+ Criteria andAmountNotEqualTo(Long)
+ Criteria andAmountGreaterThan(Long)
+ Criteria andAmountGreaterThanOrEqualTo(Long)
+ Criteria andAmountLessThan(Long)
+ Criteria andAmountLessThanOrEqualTo(Long)
+ Criteria andAmountIn(List<Long>)
+ Criteria andAmountNotIn(List<Long>)
+ Criteria andAmountBetween(Long,Long)
+ Criteria andAmountNotBetween(Long,Long)
+ Criteria andStatusIsNull()
+ Criteria andStatusIsNotNull()
+ Criteria andStatusEqualTo(Byte)
+ Criteria andStatusNotEqualTo(Byte)
+ Criteria andStatusGreaterThan(Byte)
+ Criteria andStatusGreaterThanOrEqualTo(Byte)
+ Criteria andStatusLessThan(Byte)
+ Criteria andStatusLessThanOrEqualTo(Byte)
+ Criteria andStatusIn(List<Byte>)
+ Criteria andStatusNotIn(List<Byte>)
+ Criteria andStatusBetween(Byte,Byte)
+ Criteria andStatusNotBetween(Byte,Byte)
+ Criteria andTopupTimeIsNull()
+ Criteria andTopupTimeIsNotNull()
+ Criteria andTopupTimeEqualTo(Date)
+ Criteria andTopupTimeNotEqualTo(Date)
+ Criteria andTopupTimeGreaterThan(Date)
+ Criteria andTopupTimeGreaterThanOrEqualTo(Date)
+ Criteria andTopupTimeLessThan(Date)
+ Criteria andTopupTimeLessThanOrEqualTo(Date)
+ Criteria andTopupTimeIn(List<Date>)
+ Criteria andTopupTimeNotIn(List<Date>)
+ Criteria andTopupTimeBetween(Date,Date)
+ Criteria andTopupTimeNotBetween(Date,Date)
+ Criteria andDocIdIsNull()
+ Criteria andDocIdIsNotNull()
+ Criteria andDocIdEqualTo(Long)
+ Criteria andDocIdNotEqualTo(Long)
+ Criteria andDocIdGreaterThan(Long)
+ Criteria andDocIdGreaterThanOrEqualTo(Long)
+ Criteria andDocIdLessThan(Long)
+ Criteria andDocIdLessThanOrEqualTo(Long)
+ Criteria andDocIdIn(List<Long>)
+ Criteria andDocIdNotIn(List<Long>)
+ Criteria andDocIdBetween(Long,Long)
+ Criteria andDocIdNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.FtTopupRecordExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FtTopupRecordExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.app.manager.match.FundMatchNormalRuleManager {
+ {static} String NORMALRULE_KEY
- ExpressRunner runner
+ <<Create>> FundMatchNormalRuleManager()
+ void init()
+ String matchFundInfo(MatchFundModel)
+ void refrush()
}
class com.welab.fund.dto.TopupNotificationsCmd {
- String transId
- String mobile
- Long amount
- Date topupTime
- Long docId
}
class com.welab.fund.file.FileTest {
- FundTasticController fundTasticController
+ void importTest()
}
class com.welab.fund.mode.RefundTradingRecord {
- Long id
- Long refundRecordId
- Long tradingId
- Long fundId
- Date createdAt
+ Long getId()
+ void setId(Long)
+ Long getRefundRecordId()
+ void setRefundRecordId(Long)
+ Long getTradingId()
+ void setTradingId(Long)
+ Long getFundId()
+ void setFundId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
}
class com.welab.fund.dto.FundLoansDTO {
- {static} long serialVersionUID
- Long id
- Long fundBaseId
- String originLoanNumber
- String loanNumber
- Integer status
- Long approvedAmount
- String approvedTenor
- String scoreClass
- Date applyAt
- Date fundApprovedTime
- String mobile
- String name
- String productCode
- String secondProductCode
- String reasonKey
- String industry
- String occupation
- String matchRecord
- String specialPromotionCode
- String bindType
}
class com.welab.fund.app.command.SynchronousAccountAmountTrackCmdExe_Test {
- SynchronousAccountAmountTrackCmdExe synchronousAccountAmountTrackCmdExe
+ void sync_test()
}
class com.welab.fund.app.impl.FundAccountDubboServiceImpl {
- FundAccountService fundAccountService
- FundConfigService fundConfigService
- RemoteAccountManager remoteAccountManager
- FundAccountQryExe fundAccountQryExe
- FundServiceManager fundServiceManager
- BaseFundInfoService baseFundInfoService
- BaseFundAccountService baseFundAccountService
- FundBaseInfoManager fundBaseInfoManager
- JedisCluster redisCluster
+ FundAccountInfoDTO getFundAccountInfoById(Long)
+ FundAccountInfoDTO getFundAccountInfoByCode(String)
+ PageInfo<FundAccountInfoDTO> findFundListByPage(FundAccountRequestDTO)
+ Response<Map<String,Object>> getFundConfig()
+ FundAccountInfoDTO getLoansOrRepaymentAccount(FundAccountRequestDTO)
+ Response<FundTransferAccountResponseDTO> getAdvanceLoansOrRepaymentAccount(FundAccountRequestDTO)
+ List<FundAccountInfoDTO> getAllFundList()
+ Response<FundTransferAccountResponseDTO> getRechargeAccount(FundAccountRequestDTO)
+ PageInfo<FundAccountInfoDTO> findFundListForThirdParty(FundAccountRequestDTO)
+ boolean updateFundBaseInfoById(FundAccountInfoDTO)
+ Response<FundTransferAccountResponseDTO> getLoansAndRepaymentAccount(FundAccountRequestDTO)
+ FundAccountDTO getFundAccount(String)
+ FundAccountDTO getFundAccount(Long)
+ FundOutInputAccountDTO getLendTaxAcc()
+ FundOutInputAccountDTO getRepaymentTaxAcc()
+ DisbursementsFundAccountDTO getDisbursementsFundAccount(DisbursementsFundAccountEnum)
- FundAccountInfoDTO conversionAccount(JSONObject,String)
+ boolean isFtFund(Long)
+ List<FundAccountInfoDTO> getFundtasticList()
}
class com.welab.fund.mq.FundtasticMqConsumerListener_Test {
- FundtasticMqConsumerListener fundtasticMqConsumerListener
+ void fundtasticCheck_test()
}
class com.welab.fund.dto.FundTasticRechargeNotifyCmd {
- {static} long serialVersionUID
+ String fundMobile
+ String thirdPartyUqCode
+ Long amount
}
class com.welab.fund.vo.PageResponseVo {
- Integer pages
- Long total
- List<T> data
+ {static} PageResponseVo<T> createResponseVo(Page<R>,Class<T>)
+ {static} PageResponseVo<T> createResponseVo(PageInfo<R>,Class<T>)
}
class com.welab.fund.app.facade.finance.RepaymentTrackRemoteService {
- TrackService trackService
+ Response<TrackVo> findTrackForBCA(TrackDto)
+ Response<TrackVo> findTrackByTime(TrackDto)
+ List<TrackVo> findFastPayTrackByTime(Integer,List<String>,MarkTypeEnum)
+ List<TrackVo> findPayTrackByTime(List<String>,List<String>)
+ List<TrackVo> findPayTrackByTime(List<String>,Byte)
+ List<TrackVo> findPayTrackForFaspayFeeBankByTime(List<String>)
+ Response<List<TrackVo>> findTrackDetailByTime(TrackDto)
+ List<TrackVo> findFastPayTrackDetailByTime(TackDetailForRefundQry)
+ Response<LendVo> countPendingLendByFund(LendDto)
+ Long sumFendingAmount(Long)
+ Response<List<TrackVo>> findTrackByTimeForSold(TrackDto)
}
class com.welab.fund.app.facade.WhtConfigServiceFacade {
- CommonConfigService commonConfigService
+ BigDecimal getWhtRate(Long)
+ BigDecimal getVatRate()
}
interface com.welab.fund.mapper.FundAccountTrackMapper {
~ long countByExample(FundAccountTrackExample)
~ int deleteByExample(FundAccountTrackExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundAccountTrack)
~ int insertSelective(FundAccountTrack)
~ List<FundAccountTrack> selectByExample(FundAccountTrackExample)
~ FundAccountTrack selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundAccountTrack,FundAccountTrackExample)
~ int updateByExample(FundAccountTrack,FundAccountTrackExample)
~ int updateByPrimaryKeySelective(FundAccountTrack)
~ int updateByPrimaryKey(FundAccountTrack)
}
class com.welab.fund.dto.request.PageRequestDTO {
- {static} long serialVersionUID
- int pageNum
- int pageSize
+ int getStart()
}
class com.welab.fund.mq.FundQueue_Test {
- FundQueue fundQueue
}
enum com.welab.fund.enums.fundinfo.FundTypeEnum {
+  SUPER_FUND
+  FUNDTASTIC_COMPANY_FUND
+  FUNDTASTIC_INDIVIDUAL_FUND
- String value
- String name
- Byte subType
- String enName
+ boolean check(String)
+ {static} List getStatusList(boolean)
}
class com.welab.fund.test.job.SynchronousAccountAmountTrackJobTest {
- SynchronousAccountAmountTrackCmdExe synchronousAccountAmountTrackCmdExe
+ void syncExec()
}
class com.welab.fund.test.BvanceRepaymentServiceTest {
+ void run2()
}
class com.welab.fund.app.base.batchcode.BaseFundFtImportDataService {
- FundFtImportDataMapper fundFtImportDataMapper
+ void importData(List<FundFtImportDataExt>)
+ boolean existsMobile(String)
+ boolean existsAccountNumber(String)
}
class com.welab.fund.job.RefundByNextDayJob_Test {
- RefundByNextDayJob refundByNextDayJob
+ void execute_test()
}
class com.welab.fund.mode.RetracementPlanExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> RetracementPlanExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.RetracementPlanExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
# void addCriterionForJDBCDate(String,Date,String)
# void addCriterionForJDBCDate(String,List<Date>,String)
# void addCriterionForJDBCDate(String,Date,Date,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andExecTimeIsNull()
+ Criteria andExecTimeIsNotNull()
+ Criteria andExecTimeEqualTo(Date)
+ Criteria andExecTimeNotEqualTo(Date)
+ Criteria andExecTimeGreaterThan(Date)
+ Criteria andExecTimeGreaterThanOrEqualTo(Date)
+ Criteria andExecTimeLessThan(Date)
+ Criteria andExecTimeLessThanOrEqualTo(Date)
+ Criteria andExecTimeIn(List<Date>)
+ Criteria andExecTimeNotIn(List<Date>)
+ Criteria andExecTimeBetween(Date,Date)
+ Criteria andExecTimeNotBetween(Date,Date)
+ Criteria andExecedIsNull()
+ Criteria andExecedIsNotNull()
+ Criteria andExecedEqualTo(Boolean)
+ Criteria andExecedNotEqualTo(Boolean)
+ Criteria andExecedGreaterThan(Boolean)
+ Criteria andExecedGreaterThanOrEqualTo(Boolean)
+ Criteria andExecedLessThan(Boolean)
+ Criteria andExecedLessThanOrEqualTo(Boolean)
+ Criteria andExecedIn(List<Boolean>)
+ Criteria andExecedNotIn(List<Boolean>)
+ Criteria andExecedBetween(Boolean,Boolean)
+ Criteria andExecedNotBetween(Boolean,Boolean)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.RetracementPlanExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.RetracementPlanExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.app.command.RefundAmountRetracementTimerCmdExe {
- BaseRetracementPlanService baseRetracementPlanService
- BaseRetracementReocrdService baseRetracementReocrdService
- BaseFundTradingService baseFundTradingService
- TransferManager transferManager
- BaseRetracementTradingReocrdService baseRetracementTradingReocrdService
- FundBaseInfoManager fundBaseInfoManager
- FundBatchcodeService fundBatchcodeService
- BaseFundLoansService baseFundLoansService
+ void exec()
}
enum com.welab.fund.enums.fundinfo.FundLoanMode {
+  MYSELF_LOAN
+  OTHER_LOAN
- String value
- String name
- String enName
+ boolean check(String)
+ {static} List<Map<String,Object>> getStatusList(boolean)
}
class com.welab.fund.vo.request.FundConfigVo {
- String configKey
- String configValue
- String configDesc
}
class com.welab.fund.configuration.fundbase.handler.FundBaseIdMethodArgumentResolver {
+ boolean supportsParameter(MethodParameter)
+ Object resolveArgument(MethodParameter,ModelAndViewContainer,NativeWebRequest,WebDataBinderFactory)
}
class com.welab.fund.app.base.BaseFundLoansService {
- FundLoansMapper fundLoansMapper
- FundLoansExtMapper fundLoansExtMapper
+ FundLoans getByLoansNumber(String)
+ FundLoansExt getLoansAndBatchCodeByLoansNumber(String)
+ List<FundLoansExt> getLoansAndBatchCodeByLoansNumbers(List<String>)
+ List<FundLoansExt> getFundLoans(FundLoansExt)
+ int updateByIdSelective(FundLoans)
+ int insertSelective(FundLoans)
+ void updateByLoanNumberSelective(FundLoans)
+ void deleteLoans(String)
}
class com.welab.fund.app.service.FundLoansLocalService {
- BaseFundInfoService baseFundInfoService
- FundAccountService fundAccountLocalServiceImpl
- BaseFundLoansService baseFundLoansService
+ PageInfo<Object> queryPage(PageRequestBO<FundLoansExt>)
+ FundAccount getFundAccountByLoanNumber(String)
+ List<FundLoansExt> getFundLoans(FundLoansExt)
}
enum com.welab.fund.enums.fundinfo.LegalTypeEnum {
+  IDENTITY_CARD
- String value
- String name
- String enName
+ boolean check(String)
+ {static} List getStatusList(boolean)
}
class com.welab.fund.app.command.TravelokaPlaterCmdExe {
- BaseFundMatchRuleService baseFundMatchRuleService
- OptUnityLogServiceFacade optUnityLogServiceFacade
- FundMqProducer fundMqProducer
+ List<TravelokaPlaterRuleVO> getRule()
+ void updateTravelokRule(Long,List<TravelokaPlaterRuleVO>)
}
abstract class com.welab.fund.app.manager.match.AbstractFundMatchRuleManager {
# BaseFundMatchRuleService baseFundMatchRuleService
# FundAccountPendingManager fundAccountPendingManager
# FundTasticMatchCmdExe fundTasticService
- FundConfigService fundConfigService
# AtomicReference<List<JSONObject>> rules
# int order
# String ruleKey
# Map<String,List<String>> reasonKeyMap
- void init()
+ void update()
+ {abstract}void refrush()
}
class com.welab.fund.app.facade.PayRemoteService {
- PayService payService
+ Response<TransferVO> transfer(TransferDto)
}
enum com.welab.fund.enums.StatusEnum {
+  DISABLE
+  ENABLE
- Byte status
}
class com.welab.fund.app.base.BaseFundRefundRecordService {
- FundRefundRecordMapper fundRefundRecordMapper
- FundRefundRecordExtMapper refundRecordExtMapper
+ FundRefundRecord getById(Long)
+ FundRefundRecord getLastRecord(Long,RefundRecordTypeEnum)
+ void insertSelective(FundRefundRecord)
+ FundRefundRecord getLastRecordOrderByEndDate(Long,Byte)
}
enum com.welab.fund.enums.FundRefundStatusEnum {
+  TRANSFER_EXCEP
+  CHECK_ACCOUNT_EXCEP
+  GET_ACCOUNT_EXCEP
+  LOAN_ACCOUNT_AMOUNT_EXCEP
+  FAIL
+  REPAYMENT_AMOUNT_EXCP
+  REPAYMENT_AMOUNT_WARN
+  REFUND_WARN
+  SUCCESS
- boolean exception
- String title
- String description
}
class com.welab.fund.mq.FundMqConsumerListener_Test {
- FundMqConsumerListener fundMqConsumerListener
+ void newLoans_test()
+ void fifReject_test()
+ void onMessage_test()
+ void newTransfer_test()
+ void refundCallBack_test()
+ void addFundLoansRecord_test()
+ void tradingRecordResend_test()
+ void releaseRepayment_test()
+ void recharge_test()
+ void repayment_test()
+ void refundSaveDetail_test()
+ void applyQueue_test()
+ void faspayRefund_test()
+ void loans_test()
+ void repaymentAmountRetracement_test()
+ void faspayRefundJob_test()
+ void rematch_test()
}
class com.welab.fund.mode.FundBaseInfo {
- Long id
- String fundName
- String fundCode
- String serviceId
- String fundType
- String phone
- String address
- String licenseNum
- Byte status
- String orgType
- String legalType
- String legalName
- String legalNum
- Date loanStart
- Date loanEnd
- String loanMode
- Date repaymentStart
- Date repaymentEnd
- String repaymentMode
- String isApprove
- String paymentMethod
- Date createdAt
- Date updatedAt
- Boolean isForFee
- Long alarmBalance
+ Long getId()
+ void setId(Long)
+ String getFundName()
+ void setFundName(String)
+ String getFundCode()
+ void setFundCode(String)
+ String getServiceId()
+ void setServiceId(String)
+ String getFundType()
+ void setFundType(String)
+ String getPhone()
+ void setPhone(String)
+ String getAddress()
+ void setAddress(String)
+ String getLicenseNum()
+ void setLicenseNum(String)
+ Byte getStatus()
+ void setStatus(Byte)
+ String getOrgType()
+ void setOrgType(String)
+ String getLegalType()
+ void setLegalType(String)
+ String getLegalName()
+ void setLegalName(String)
+ String getLegalNum()
+ void setLegalNum(String)
+ Date getLoanStart()
+ void setLoanStart(Date)
+ Date getLoanEnd()
+ void setLoanEnd(Date)
+ String getLoanMode()
+ void setLoanMode(String)
+ Date getRepaymentStart()
+ void setRepaymentStart(Date)
+ Date getRepaymentEnd()
+ void setRepaymentEnd(Date)
+ String getRepaymentMode()
+ void setRepaymentMode(String)
+ String getIsApprove()
+ void setIsApprove(String)
+ String getPaymentMethod()
+ void setPaymentMethod(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ Boolean getIsForFee()
+ void setIsForFee(Boolean)
+ Long getAlarmBalance()
+ void setAlarmBalance(Long)
}
class com.welab.fund.job.SynchronousAccountAmountTrackJob_Test {
- SynchronousAccountAmountTrackJob synchronousAccountAmountTrackJob
+ void execute_test()
}
class com.welab.fund.test.ScaffoldTest {
- String ZOOKEEPER_URL
- RefundService refundService
+ void test1()
+ void appId()
}
class com.welab.fund.mode.ext.MatchFundRuleModel {
}
class com.welab.fund.app.facade.application.LoanServiceFacade {
- LoansService loansService
+ LoansVO getLoanInfo(String)
}
class com.welab.fund.mode.FundLoanMatchBatchcode {
- Long id
- String loanNumber
- String batchCode
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getLoanNumber()
+ void setLoanNumber(String)
+ String getBatchCode()
+ void setBatchCode(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.fund.app.service.FundtasticLoansService {
- LoanServiceFacade loanServiceFacade
- BaseFundLoansService baseFundLoansService
- ITbLoanDubboServiceFacade iTbLoanDubboServiceFacade
- FundBatchcodeService fundBatchcodeService
- BaseFundLoanMatchBatchcodeService baseFundLoanMatchBatchcodeService
+ void checkLoan(FundBatchcodeAccountFlowExt)
- void rollbackLoans(FundBatchcodeAccountFlowExt)
- void setBatchCode(FundBatchcodeAccountFlowExt)
}
class com.welab.fund.controller.FundAccountController {
- FundAccountService fundAccountService
- FundTransferService fundTransferService
- RemoteAccountManager remoteAccountManager
- FundManagerService fundManagerService
- FundConfigService fundConfigService
- BaseFundAccountService baseFundAccountService
- FundServiceManager fundServiceManager
+ Response<List<FundAccountInfoVo>> getLoansAndRepaymentAccount(Long,String)
+ Response<Object> recharge(RechargeModelVo,String,Long)
}
class com.welab.fund.controller.FundController {
- FundTradingLocalService fundTradingLocalService
- FundLoansLocalService fundLoansLocalService
- FundApprovedCmdExe fundApprovedCmdExe
- BaseFundInfoService baseFundInfoService
- FundBaseInfoManager fundBaseInfoManager
+ Response<Object> updateLoans(Long,FundLoansVo,String)
+ Response<Object> list(PageRequestVo<FundTradingRequestVo>,String)
+ Response<FundAccountInfoResponseVo> getFundInfo(Long,String)
+ {static} Long validateFundId(Long,String)
+ Response<PageInfo<FundTrading>> getTradingPage(PageRequestVo<FundTradingRequestVo>,String)
+ Response<List<FundAccountInfoResponseVo>> fundList(String)
+ Response<List<FundAccountInfoResponseVo>> fundList()
}
class com.welab.fund.job.RefundJob {
- BNIRefundCmdExe bniRefundCmdExe
+ void execute(ShardingContext)
}
class com.welab.fund.vo.request.FundTradingRequestVo {
- Long fundId
- String selectType
- String loanNumber
- Integer status
- Date fundApprovedStart
- Date fundApprovedEnd
}
class com.welab.fund.mode.FundLoansExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundLoansExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundLoansExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundBaseIdIsNull()
+ Criteria andFundBaseIdIsNotNull()
+ Criteria andFundBaseIdEqualTo(Long)
+ Criteria andFundBaseIdNotEqualTo(Long)
+ Criteria andFundBaseIdGreaterThan(Long)
+ Criteria andFundBaseIdGreaterThanOrEqualTo(Long)
+ Criteria andFundBaseIdLessThan(Long)
+ Criteria andFundBaseIdLessThanOrEqualTo(Long)
+ Criteria andFundBaseIdIn(List<Long>)
+ Criteria andFundBaseIdNotIn(List<Long>)
+ Criteria andFundBaseIdBetween(Long,Long)
+ Criteria andFundBaseIdNotBetween(Long,Long)
+ Criteria andLoanNumberIsNull()
+ Criteria andLoanNumberIsNotNull()
+ Criteria andLoanNumberEqualTo(String)
+ Criteria andLoanNumberNotEqualTo(String)
+ Criteria andLoanNumberGreaterThan(String)
+ Criteria andLoanNumberGreaterThanOrEqualTo(String)
+ Criteria andLoanNumberLessThan(String)
+ Criteria andLoanNumberLessThanOrEqualTo(String)
+ Criteria andLoanNumberLike(String)
+ Criteria andLoanNumberNotLike(String)
+ Criteria andLoanNumberIn(List<String>)
+ Criteria andLoanNumberNotIn(List<String>)
+ Criteria andLoanNumberBetween(String,String)
+ Criteria andLoanNumberNotBetween(String,String)
+ Criteria andStatusIsNull()
+ Criteria andStatusIsNotNull()
+ Criteria andStatusEqualTo(Integer)
+ Criteria andStatusNotEqualTo(Integer)
+ Criteria andStatusGreaterThan(Integer)
+ Criteria andStatusGreaterThanOrEqualTo(Integer)
+ Criteria andStatusLessThan(Integer)
+ Criteria andStatusLessThanOrEqualTo(Integer)
+ Criteria andStatusIn(List<Integer>)
+ Criteria andStatusNotIn(List<Integer>)
+ Criteria andStatusBetween(Integer,Integer)
+ Criteria andStatusNotBetween(Integer,Integer)
+ Criteria andApprovedAmountIsNull()
+ Criteria andApprovedAmountIsNotNull()
+ Criteria andApprovedAmountEqualTo(Long)
+ Criteria andApprovedAmountNotEqualTo(Long)
+ Criteria andApprovedAmountGreaterThan(Long)
+ Criteria andApprovedAmountGreaterThanOrEqualTo(Long)
+ Criteria andApprovedAmountLessThan(Long)
+ Criteria andApprovedAmountLessThanOrEqualTo(Long)
+ Criteria andApprovedAmountIn(List<Long>)
+ Criteria andApprovedAmountNotIn(List<Long>)
+ Criteria andApprovedAmountBetween(Long,Long)
+ Criteria andApprovedAmountNotBetween(Long,Long)
+ Criteria andApprovedTenorIsNull()
+ Criteria andApprovedTenorIsNotNull()
+ Criteria andApprovedTenorEqualTo(String)
+ Criteria andApprovedTenorNotEqualTo(String)
+ Criteria andApprovedTenorGreaterThan(String)
+ Criteria andApprovedTenorGreaterThanOrEqualTo(String)
+ Criteria andApprovedTenorLessThan(String)
+ Criteria andApprovedTenorLessThanOrEqualTo(String)
+ Criteria andApprovedTenorLike(String)
+ Criteria andApprovedTenorNotLike(String)
+ Criteria andApprovedTenorIn(List<String>)
+ Criteria andApprovedTenorNotIn(List<String>)
+ Criteria andApprovedTenorBetween(String,String)
+ Criteria andApprovedTenorNotBetween(String,String)
+ Criteria andScoreClassIsNull()
+ Criteria andScoreClassIsNotNull()
+ Criteria andScoreClassEqualTo(String)
+ Criteria andScoreClassNotEqualTo(String)
+ Criteria andScoreClassGreaterThan(String)
+ Criteria andScoreClassGreaterThanOrEqualTo(String)
+ Criteria andScoreClassLessThan(String)
+ Criteria andScoreClassLessThanOrEqualTo(String)
+ Criteria andScoreClassLike(String)
+ Criteria andScoreClassNotLike(String)
+ Criteria andScoreClassIn(List<String>)
+ Criteria andScoreClassNotIn(List<String>)
+ Criteria andScoreClassBetween(String,String)
+ Criteria andScoreClassNotBetween(String,String)
+ Criteria andApplyAtIsNull()
+ Criteria andApplyAtIsNotNull()
+ Criteria andApplyAtEqualTo(Date)
+ Criteria andApplyAtNotEqualTo(Date)
+ Criteria andApplyAtGreaterThan(Date)
+ Criteria andApplyAtGreaterThanOrEqualTo(Date)
+ Criteria andApplyAtLessThan(Date)
+ Criteria andApplyAtLessThanOrEqualTo(Date)
+ Criteria andApplyAtIn(List<Date>)
+ Criteria andApplyAtNotIn(List<Date>)
+ Criteria andApplyAtBetween(Date,Date)
+ Criteria andApplyAtNotBetween(Date,Date)
+ Criteria andFundApprovedAtIsNull()
+ Criteria andFundApprovedAtIsNotNull()
+ Criteria andFundApprovedAtEqualTo(Date)
+ Criteria andFundApprovedAtNotEqualTo(Date)
+ Criteria andFundApprovedAtGreaterThan(Date)
+ Criteria andFundApprovedAtGreaterThanOrEqualTo(Date)
+ Criteria andFundApprovedAtLessThan(Date)
+ Criteria andFundApprovedAtLessThanOrEqualTo(Date)
+ Criteria andFundApprovedAtIn(List<Date>)
+ Criteria andFundApprovedAtNotIn(List<Date>)
+ Criteria andFundApprovedAtBetween(Date,Date)
+ Criteria andFundApprovedAtNotBetween(Date,Date)
+ Criteria andMobileIsNull()
+ Criteria andMobileIsNotNull()
+ Criteria andMobileEqualTo(String)
+ Criteria andMobileNotEqualTo(String)
+ Criteria andMobileGreaterThan(String)
+ Criteria andMobileGreaterThanOrEqualTo(String)
+ Criteria andMobileLessThan(String)
+ Criteria andMobileLessThanOrEqualTo(String)
+ Criteria andMobileLike(String)
+ Criteria andMobileNotLike(String)
+ Criteria andMobileIn(List<String>)
+ Criteria andMobileNotIn(List<String>)
+ Criteria andMobileBetween(String,String)
+ Criteria andMobileNotBetween(String,String)
+ Criteria andNameIsNull()
+ Criteria andNameIsNotNull()
+ Criteria andNameEqualTo(String)
+ Criteria andNameNotEqualTo(String)
+ Criteria andNameGreaterThan(String)
+ Criteria andNameGreaterThanOrEqualTo(String)
+ Criteria andNameLessThan(String)
+ Criteria andNameLessThanOrEqualTo(String)
+ Criteria andNameLike(String)
+ Criteria andNameNotLike(String)
+ Criteria andNameIn(List<String>)
+ Criteria andNameNotIn(List<String>)
+ Criteria andNameBetween(String,String)
+ Criteria andNameNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
+ Criteria andUpdateManagerIsNull()
+ Criteria andUpdateManagerIsNotNull()
+ Criteria andUpdateManagerEqualTo(Long)
+ Criteria andUpdateManagerNotEqualTo(Long)
+ Criteria andUpdateManagerGreaterThan(Long)
+ Criteria andUpdateManagerGreaterThanOrEqualTo(Long)
+ Criteria andUpdateManagerLessThan(Long)
+ Criteria andUpdateManagerLessThanOrEqualTo(Long)
+ Criteria andUpdateManagerIn(List<Long>)
+ Criteria andUpdateManagerNotIn(List<Long>)
+ Criteria andUpdateManagerBetween(Long,Long)
+ Criteria andUpdateManagerNotBetween(Long,Long)
+ Criteria andMatchRecordIsNull()
+ Criteria andMatchRecordIsNotNull()
+ Criteria andMatchRecordEqualTo(String)
+ Criteria andMatchRecordNotEqualTo(String)
+ Criteria andMatchRecordGreaterThan(String)
+ Criteria andMatchRecordGreaterThanOrEqualTo(String)
+ Criteria andMatchRecordLessThan(String)
+ Criteria andMatchRecordLessThanOrEqualTo(String)
+ Criteria andMatchRecordLike(String)
+ Criteria andMatchRecordNotLike(String)
+ Criteria andMatchRecordIn(List<String>)
+ Criteria andMatchRecordNotIn(List<String>)
+ Criteria andMatchRecordBetween(String,String)
+ Criteria andMatchRecordNotBetween(String,String)
}
class com.welab.fund.mode.FundLoansExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.FundLoansExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.Application {
+ {static} void main(String[])
}
class com.welab.fund.vo.request.RechargeModelVo {
- Long fundId
- Long amount
- String accountType
- Byte rechargeType
- String remark
}
class com.welab.fund.test.addLoans.BvanceRepaymentServiceTest2 {
+ void run()
}
class com.welab.fund.mode.FundConfig {
- Long id
- String configKey
- String configDesc
- Date createdAt
- Date updatedAt
- Long updatedUserId
- String configValue
+ Long getId()
+ void setId(Long)
+ String getConfigKey()
+ void setConfigKey(String)
+ String getConfigDesc()
+ void setConfigDesc(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ Long getUpdatedUserId()
+ void setUpdatedUserId(Long)
+ String getConfigValue()
+ void setConfigValue(String)
}
class com.welab.fund.mode.ext.TransferModel {
- String loanNumber
- Long tradingFundId
- Long outAccountFundId
- Byte outAccountType
- Long inAccountFundId
- Byte inAccountType
- Long amount
- Byte inGatewayType
- Byte outGatewayType
- FundTradingTypeEnum tradingType
- FundTradingTypeEnum outTradingType
- FundTradingTypeEnum inTradingType
- String remark
- FundAccountExt outAccount
- FundAccountExt inAccount
+ {static} TransferModel createModel()
+ TransferModel buildOutAcc(String,Byte)
+ TransferModel buildInAcc(String)
}
class com.welab.fund.test.job.SendRefundEmailJobTest {
- SendRefundEmailJob sendRefundEmailJob
+ void setUp()
+ void tearDown()
+ void execute()
}
class com.welab.fund.app.command.batchcode.FundFtImportDataCmdExe {
- BaseFundFtImportDataService baseFundFtImportDataService
- BaseFundInfoService baseFundInfoService
- BaseFundAccountService baseFundAccountService
- RemoteAccountManager remoteAccountManager
- ProductConfigServiceFacade productConfigServiceFacade
- String fundTasticHost
- BaseFundFtCallbackLogService baseFundFtCallbackLogService
- String secretKey
+ void importData(MultipartFile,Long)
- void handFundAccount(List<FundFtImportDataExt>,List<FundBaseInfo>)
- List<FundBaseInfo> handFundBaseInfo(List<FundFtImportDataExt>)
- List<FundFtImportDataExt> buildImportListFromXls(InputStream)
- void checkImportData(Byte,List<JSONObject>)
- void putErrorReason(String,Set<String>,Map<String,String>,int)
- void checkPriKey(Set<String>,JSONObject,int,String)
- void checkExitsFundType(Set<String>,JSONObject,int,Set<Integer>)
- void checkExits(Set<String>,JSONObject,int,String,boolean)
- void checkField(Set<String>,JSONObject,int,String)
- void ftSuccessStatusCall(List<FundFtImportDataExt>)
- void callFundtastic(List<JSONObject>)
- void ftErrorStatusCall(Map<String,String>)
}
class com.welab.fund.vo.response.FundManagerResponseVo {
- String fundCodes
}
class com.welab.fund.job.RetracementTimerJob_Test {
- RetracementTimerJob retracementTimerJob
+ void execute_test()
}
interface com.welab.fund.service.FundAccountInfoService {
~ FundAccountInfoDTO getLoansOrRepaymentAccount(FundAccountRequestDTO)
~ FundAccountInfoDTO getFundAccountInfoById(Long)
~ FundAccountInfoDTO getFundAccountInfoByCode(String)
~ List<FundAccountInfoDTO> getAllFundList()
~ PageInfo<FundAccountInfoDTO> findFundListByPage(FundAccountRequestDTO)
~ Response<Map<String,Object>> getFundConfig()
~ Response<FundTransferAccountResponseDTO> getAdvanceLoansOrRepaymentAccount(FundAccountRequestDTO)
~ Response<FundTransferAccountResponseDTO> getRechargeAccount(FundAccountRequestDTO)
~ PageInfo<FundAccountInfoDTO> findFundListForThirdParty(FundAccountRequestDTO)
~ boolean updateFundBaseInfoById(FundAccountInfoDTO)
~ Response<FundTransferAccountResponseDTO> getLoansAndRepaymentAccount(FundAccountRequestDTO)
+ FundAccountDTO getFundAccount(String)
+ FundAccountDTO getFundAccount(Long)
+ FundOutInputAccountDTO getLendTaxAcc()
+ FundOutInputAccountDTO getRepaymentTaxAcc()
+ DisbursementsFundAccountDTO getDisbursementsFundAccount(DisbursementsFundAccountEnum)
+ boolean isFtFund(Long)
~ List<FundAccountInfoDTO> getFundtasticList()
}
class com.welab.fund.job.FundtasticRechargeReportJob {
- BaseBatchcodeAccountService baseBatchcodeAccountService
- BaseFundInfoService baseFundInfoService
- EmailSender emailSender
+ void execute(ShardingContext)
}
class com.welab.fund.app.command.BNIRefundCmdExe_Test {
- BNIRefundCmdExe bNIRefundCmdExe
+ void getNoSoldTrackVo_test()
+ void refundRepayment_test()
}
interface com.welab.fund.mapper.FundBaseInfoExtMapper {
~ List<FundBaseInfo> getListByFundIds(String)
~ FundBaseInfoExt getLoanFundInfoByFundCode(String)
~ List<FundBaseInfoExt> getFundManagerForUser(Map<String,Object>)
~ List<FundBaseInfoExt> getExtListForAccountInfo(String,Byte)
~ FundBaseInfoExt getLoanFundInfoById(Long)
~ List<FundBaseInfoExt> getListByCondition(FundBaseInfo)
~ FundBaseInfoExt getLoanFundInfoByMobile(String,String)
~ List<FundBaseInfoExt> getFundtasticList()
}
class com.welab.fund.mode.ext.FundTradingExtend {
- Long refundRecordId
}
class com.welab.fund.mode.RetracementReocrd {
- Long id
- String loanNumber
- String transId
- Integer dueIndex
- Byte status
- Long fundAssociateId
- String branchId
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getLoanNumber()
+ void setLoanNumber(String)
+ String getTransId()
+ void setTransId(String)
+ Integer getDueIndex()
+ void setDueIndex(Integer)
+ Byte getStatus()
+ void setStatus(Byte)
+ Long getFundAssociateId()
+ void setFundAssociateId(Long)
+ String getBranchId()
+ void setBranchId(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.fund.mode.ext.FundServiceExt {
- String fundCode
- Long accountId
- String recAndRefService
- String gatewayName
- Byte gatewayType
- String loansAndRepaymentService
- String fundType
}
interface com.welab.fund.mapper.FundTradingMapper {
~ int countByExample(FundTradingExample)
~ int deleteByExample(FundTradingExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundTrading)
~ int insertSelective(FundTrading)
~ List<FundTrading> selectByExample(FundTradingExample)
~ FundTrading selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundTrading,FundTradingExample)
~ int updateByExample(FundTrading,FundTradingExample)
~ int updateByPrimaryKeySelective(FundTrading)
~ int updateByPrimaryKey(FundTrading)
}
class com.welab.fund.app.service.FundTradingQueueService {
- FundTradingQueueExtMapper fundTradingQueueExtMapper
- BaseFundAccountService baseFundAccountService
- BaseFundTradingService baseFundTradingService
+ void addQueue(FundTrading)
+ void processTrading()
}
class com.welab.fund.app.base.BaseFundConfigService {
- FundConfigMapper fundConfigMapper
- FundConfigExtMapper fundConfigExtMapper
+ FundConfig getByConfigKey(String)
+ List<FundConfig> selectConfigList(FundConfig)
+ int updateByIdSelective(FundConfig)
}
class com.welab.fund.response.ResponsCodeType {
+ {static} String USER_IN_EXISTENCE
+ {static} String NOT_SUFFICIENT_FUNDS
+ {static} String SERVER_BUSY
+ {static} String ERROR
+ {static} String RECORD_NOT_EXISTS
+ {static} String RECORD_EXISTS
+ {static} String RECORD_HAS_HANDL
+ {static} String PRODUCT_CODE_NOT_EXISTS_EXCP
+ {static} String REQUEST_PARAM_EXCP
+ {static} String USER_EXCP
+ {static} String INSUFFICIENT_BALANCE_EXCP
+ {static} String NO_PERMISSION_EXCP
+ {static} String NOT_FIND_FUNDER
}
enum com.welab.fund.response.UserResponsCodeTypeEnum {
+  USER_IN_EXISTENCE
+  NOT_SUFFICIENT_FUNDS
+  SERVER_BUSY
+  ERROR
+  RECORD_NOT_EXISTS
+  RECORD_EXISTS
+  PRODUCT_CODE_NOT_EXISTS_EXCP
+  RECORD_HAS_HANDL
+  REQUEST_PARAM_EXCP
+  USER_EXCP
+  INSUFFICIENT_BALANCE_EXCP
+  NO_PERMISSION_EXCP
+  NOT_FIND_FUNDER
- Integer code
- String message
- <<Create>> UserResponsCodeTypeEnum(Integer,String)
+ Integer getCode()
+ String getMessage()
}
class com.welab.fund.test.FundTest {
- FundMatchRuleManager fundMatchRuleManager
- FundServiceManager fundServiceManager
+ void getService()
+ void match()
}
class com.welab.fund.app.service.FundConfigService {
- JedisCluster redisClient
- BaseFundConfigService baseFundConfigService
- {static} long DEFAULT_TIME
+ JSONObject getCacheJSONObj(String)
+ JSONArray getCacheJSONArray(String)
+ String getCacheConfigValue(String)
+ void updateConfig(FundConfig)
- String getRedisKey(String)
+ JSONObject getThirdRechargeConfig(String,String)
+ PageInfo<FundConfig> getConfigList(PageRequestBO<FundConfig>)
}
class com.welab.fund.app.service.SendRefundEmailService {
- BaseRefundDetailService baseRefundDetailService
- MongodbFileService mongodbFileService
- String downloadUrl
- FundMessageLocalService fundMessageLocalService
- ProductConfigDubboServiceFacade productConfigDubboServiceFacade
- LoanDetailRemoteService loanDetailRemoteService
- BaseFundTradingService baseFundTradingService
+ void sendEmail(Date,boolean,boolean)
- void sendRefundDetails(List<RefundDetailExt>,Date)
- void sendRefundListTaxAccount(List<RefundDetailExt>,Date)
- void updateTravelokaLoanNumber(List<RefundDetailExt>)
}
class com.welab.fund.app.service.recharge_refund.ProportionRecAndRefServiceImpl {
- FundTradingLocalService fundTradingLocalService
- BaseFundTradingService baseFundTradingService
- FundAccountService fundAccountService
- FundTransferService fundTransferService
- RemoteAccountManager remoteAccountManager
- FundConfigService fundConfigService
- BaseFundRefundRecordService baseFundRefundRecordService
- FundServiceManager fundServiceManager
- {static} String PROPORTION_ATTR
+ void recharge(FundBaseInfo,Long)
+ FundRefundStatusEnum releaseLoansAccount(FundBaseInfo)
+ FundRefundStatusEnum releaseRepaymentAccount(FundRefundRecord,FundBaseInfo)
}
interface com.welab.fund.mapper.RefundJobRecordExtMapper {
~ List<RefundJobRecord> selectRefundJobList(Byte)
}
class com.welab.fund.app.impl.FundLoansDubboServiceImpl_Test {
- FundLoansDubboServiceImpl fundLoansDubboServiceImpl
+ void reject_test()
+ void addFundLoansRecordNoMatch_test()
+ void notifyApplication_test()
+ void rematch_test()
+ void updateApprovedAmount_test()
+ void addFundLoansRecord_test()
}
interface com.welab.fund.mapper.FundBatchcodeAccountFlowMapper {
~ long countByExample(FundBatchcodeAccountFlowExample)
~ int deleteByExample(FundBatchcodeAccountFlowExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundBatchcodeAccountFlow)
~ int insertSelective(FundBatchcodeAccountFlow)
~ List<FundBatchcodeAccountFlow> selectByExample(FundBatchcodeAccountFlowExample)
~ FundBatchcodeAccountFlow selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundBatchcodeAccountFlow,FundBatchcodeAccountFlowExample)
~ int updateByExample(FundBatchcodeAccountFlow,FundBatchcodeAccountFlowExample)
~ int updateByPrimaryKeySelective(FundBatchcodeAccountFlow)
~ int updateByPrimaryKey(FundBatchcodeAccountFlow)
}
class com.welab.fund.app.facade.message.CmsgServiceFacade {
- CmsgService cmsgService
+ void sendCmsg(CmsgDTO)
}
class com.welab.fund.test.app.impl.BNIServiceImplTest {
- BNIServiceImpl bniServiceImpl
+ void test()
}
class com.welab.fund.app.service.loans_repayment.BNIServiceImpl {
- int feeStamp
+ void init()
+ void addTransferFee(FundTradingExt)
}
class com.welab.fund.mode.FundManager {
- Long userId
- String mobile
- String fundBaseIds
- Byte status
- Byte adminRole
- Date createAt
- Date updateAt
+ Long getUserId()
+ void setUserId(Long)
+ String getMobile()
+ void setMobile(String)
+ String getFundBaseIds()
+ void setFundBaseIds(String)
+ Byte getStatus()
+ void setStatus(Byte)
+ Byte getAdminRole()
+ void setAdminRole(Byte)
+ Date getCreateAt()
+ void setCreateAt(Date)
+ Date getUpdateAt()
+ void setUpdateAt(Date)
}
class com.welab.fund.controller.FundConfigController {
- FundConfigService fundConfigServiceImpl
- FundManagerService fundManagerServiceImpl
+ Response<PageInfo<FundConfig>> getConfigList(PageRequestVo<FundConfigVo>)
+ Response<Object> updateConfig(Long,FundConfigVo)
}
class com.welab.fund.app.command.ToBFundMatchRuleCmdExe_Test {
- ToBFundMatchRuleCmdExe toBFundMatchRuleCmdExe
+ void getToBRule_test()
+ void updateToBRule_test()
}
interface com.welab.fund.mapper.FundLoanMatchBatchcodeMapper {
~ long countByExample(FundLoanMatchBatchcodeExample)
~ int deleteByExample(FundLoanMatchBatchcodeExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundLoanMatchBatchcode)
~ int insertSelective(FundLoanMatchBatchcode)
~ List<FundLoanMatchBatchcode> selectByExample(FundLoanMatchBatchcodeExample)
~ FundLoanMatchBatchcode selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundLoanMatchBatchcode,FundLoanMatchBatchcodeExample)
~ int updateByExample(FundLoanMatchBatchcode,FundLoanMatchBatchcodeExample)
~ int updateByPrimaryKeySelective(FundLoanMatchBatchcode)
~ int updateByPrimaryKey(FundLoanMatchBatchcode)
}
interface com.welab.fund.mapper.FundAccountExtMapper {
~ FundAccount getFundAccountByCondition(Map<String,Object>)
~ FundAccountExt countSubFundAccount(Byte,Byte)
~ int updateAccountAmount(Long,Long,Integer)
~ int newUpdateAccountAmount(FundAccountExt)
~ FundAccount getByNoLimitOne(String)
~ List<FundAccountExt> getAllAccount(Map<String,Object>)
~ List<FundAccountExt> getGroupAccount(Map<String,Object>)
~ FundAccountExt getFundAccount(FundAccountExt)
~ List<FundAccount> getFundProportionAccount()
~ Long getBniLocalRepaymentAmount()
}
interface com.welab.fund.app.service.loans_repayment.ILoansAndRepaymentService {
+ void repayment(FundTradingExt)
+ void loans(FundTradingExt)
}
class com.welab.fund.controller.FundManagerController_Test {
- FundManagerController fundManagerController
+ void updateFundAuth_test()
+ void getFundManager_test()
+ void getFundAuthList_test()
+ void fundManagerList_test()
}
class com.welab.fund.utils.TraversingUtils {
# List<T> list
# R obj
# <<Create>> TraversingUtils(List<T>,R)
+ void forEach(TraversingFunction<? super T,? super R,Integer>)
+ void forEach(BiConsumer<? super T,? super R>)
+ void forEach(Consumer<? super T>)
}
interface com.welab.fund.utils.TraversingUtils$TraversingFunction {
~ void accept(T,R,V)
}
class com.welab.fund.mode.FtTopupRecord {
- Long id
- Long fundId
- String transId
- String mobile
- Long amount
- Byte status
- Date topupTime
- Long docId
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getFundId()
+ void setFundId(Long)
+ String getTransId()
+ void setTransId(String)
+ String getMobile()
+ void setMobile(String)
+ Long getAmount()
+ void setAmount(Long)
+ Byte getStatus()
+ void setStatus(Byte)
+ Date getTopupTime()
+ void setTopupTime(Date)
+ Long getDocId()
+ void setDocId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
interface com.welab.fund.mapper.ApplyLoansDataExtMapper {
~ ApplyLoansData getApplyLoanByLoanNumber(String)
}
class com.welab.fund.app.base.BaseRefundJobRecordService {
- RefundJobRecordMapper refundJobRecordMapper
- RefundJobRecordExtMapper refundJobRecordExtMapper
+ List<RefundJobRecord> queryRecordForJob(Byte)
+ List<RefundJobRecord> queryRecordForDate(Byte,List<Date>)
+ List<RefundJobRecord> queryRecordForDate(RefundJobRecord)
+ List<RefundJobRecord> queryRecordForDetail(RefundJobRecord)
+ int insertSelective(RefundJobRecord)
+ List<RefundJobRecord> queryRecord(RefundJobRecord)
+ void updateByFundRefundRecordId(RefundJobRecord)
}
class com.welab.fund.mq.TestFundMqListener {
- RemoteAccountManager remoteAccountManager
}
class com.welab.fund.job.SendRefundEmailJob_Test {
- SendRefundEmailJob sendRefundEmailJob
+ void execute_test()
}
class com.welab.fund.app.manager.FundBanlanceManager {
- FundAccountService fundAccountService
- RemoteAccountManager remoteAccountManager
- JedisCluster redisClient
+ FundAccount getBanlance(Long,Byte)
# String getkey(FundAccount)
- FundAccount updateBanlance(FundAccount)
}
enum com.welab.fund.enums.FundTradingTypeEnum {
+  PREMIUM_FEE
+  TRANSFER_FEE
+  ADMIN_FEE
+  ASTRA_SERVICE_FEE
+  TAPP_SERVICE_FEE
+  CHANNEL_FEE
+  FUNDER_INTEREST_FEE
+  LEND_TO_TAX
+  FACILITY_FEE_TO_AWDA
+  REFUND_TO_FUNDER
+  REFUND_TO_THIRD_PARTY
+  REFUND_TO_AWDA
+  REFUND_TO_TAX
+  ADVANCE
+  ADVANCE_ADD
+  REFUND
+  DISBURSED
+  REPAYMENT
+  RECHARGE
+  REVERSAL_FUND_TO_LOAN
+  REVERSAL_AWDA_TO_LOAN
+  REVERSAL_VAT_TO_LOAN
+  REVERSAL_LOAN_TO_FUND
+  REBOOK
+  E_PLAN_TO_AWDA
+  THIRD_RECHARGE
+  RETRACEMENT_REFUNDED
+  THIRD_REPAYMENT
+  LEND_AMOUNT_TO_BNI_AWDA
+  BNI_AWDA_TO_PERMATA_AWADA
+  BNI_TO_BNI_A
+  BCA_B_TO_BCA_C
+  ASTRA_PAY_LATER_BNI_TO_BNI_A
+  ASTRA_PAY_LATER_BCA_B_TO_BCA_C
+  TB_BNI_TO_BNI_A
+  TB_BCA_B_TO_BCA_C
+  TB_BNI_A_TO_BCA_B
- String type
- String tradingService
- {static} Map<String,FundTradingTypeEnum> map
- {static} List<String> rList
- {static} List<String> loanList
+ {static} FundTradingTypeEnum getByType(String)
+ {static} List<String> getRepaymentTypes()
+ {static} List<String> getLoansTypes()
}
class com.welab.fund.app.service.FundManagerService {
- BaseFundInfoService baseFundInfoService
- BaseFundManagerService baseFundManagerService
+ FundManager getFundManagerByUserId(Long)
+ PageInfo<FundManagerExt> getFundManagerList(PageRequestBO<FundManagerExt>)
+ List<FundBaseInfoExt> getFundManagerForUser(FundManager)
+ void updateFundAuth(FundManager)
}
class com.welab.fund.test.job.BCATransferTest {
- RefundT1CmdExe refundT1CmdExe
- BCATransferCmdExe bcaTransferCmdExe
- RefundBCAJob refundBCAJob
+ void transfer()
+ void refund()
+ void emailTest()
}
class com.welab.fund.job.FundtasticBatchcodeUpdateJob {
- FundTasticMatchCmdExe fundTasticMatchCmdExe
+ void execute(ShardingContext)
}
interface com.welab.fund.mapper.RetracementReocrdMapper {
~ int countByExample(RetracementReocrdExample)
~ int deleteByExample(RetracementReocrdExample)
~ int deleteByPrimaryKey(Long)
~ int insert(RetracementReocrd)
~ int insertSelective(RetracementReocrd)
~ List<RetracementReocrd> selectByExample(RetracementReocrdExample)
~ RetracementReocrd selectByPrimaryKey(Long)
~ int updateByExampleSelective(RetracementReocrd,RetracementReocrdExample)
~ int updateByExample(RetracementReocrd,RetracementReocrdExample)
~ int updateByPrimaryKeySelective(RetracementReocrd)
~ int updateByPrimaryKey(RetracementReocrd)
}
class com.welab.fund.app.base.BaseFundFtCallbackLogService {
- FundFtCallbackLogMapper fundFtCallbackLogMapper
+ void insertNewRequest(FundFtCallbackLog)
+ void updateResp(FundFtCallbackLog)
}
interface com.welab.fund.mapper.FundTradingExtMapper {
~ List<FundTrading> getByParam(Map<String,Object>)
~ int updateFailStatus(FundTrading)
~ List<FundTrading> getByIds(List<Long>)
~ List<FundTradingExtend> selectExtByRefundRecordId(List<Long>)
~ int countTrading(Long,String)
~ List<FundTrading> getByRefundRecordId(Long)
}
class com.welab.fund.app.facade.application.ProductConfigServiceFacade {
- ProductConfigService productConfigService
+ List<ProductRateConfigVO> getProductConfig(ProductRateConfigDto)
+ Integer refreshProductConfig()
+ List<Integer> getFundtasticRateType()
}
class com.welab.fund.mode.FundBatchcodeAccountFlowExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundBatchcodeAccountFlowExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundBatchcodeAccountFlowExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundIdIsNull()
+ Criteria andFundIdIsNotNull()
+ Criteria andFundIdEqualTo(Long)
+ Criteria andFundIdNotEqualTo(Long)
+ Criteria andFundIdGreaterThan(Long)
+ Criteria andFundIdGreaterThanOrEqualTo(Long)
+ Criteria andFundIdLessThan(Long)
+ Criteria andFundIdLessThanOrEqualTo(Long)
+ Criteria andFundIdIn(List<Long>)
+ Criteria andFundIdNotIn(List<Long>)
+ Criteria andFundIdBetween(Long,Long)
+ Criteria andFundIdNotBetween(Long,Long)
+ Criteria andBatchCodeIsNull()
+ Criteria andBatchCodeIsNotNull()
+ Criteria andBatchCodeEqualTo(String)
+ Criteria andBatchCodeNotEqualTo(String)
+ Criteria andBatchCodeGreaterThan(String)
+ Criteria andBatchCodeGreaterThanOrEqualTo(String)
+ Criteria andBatchCodeLessThan(String)
+ Criteria andBatchCodeLessThanOrEqualTo(String)
+ Criteria andBatchCodeLike(String)
+ Criteria andBatchCodeNotLike(String)
+ Criteria andBatchCodeIn(List<String>)
+ Criteria andBatchCodeNotIn(List<String>)
+ Criteria andBatchCodeBetween(String,String)
+ Criteria andBatchCodeNotBetween(String,String)
+ Criteria andOriginalAvailableAmountIsNull()
+ Criteria andOriginalAvailableAmountIsNotNull()
+ Criteria andOriginalAvailableAmountEqualTo(Long)
+ Criteria andOriginalAvailableAmountNotEqualTo(Long)
+ Criteria andOriginalAvailableAmountGreaterThan(Long)
+ Criteria andOriginalAvailableAmountGreaterThanOrEqualTo(Long)
+ Criteria andOriginalAvailableAmountLessThan(Long)
+ Criteria andOriginalAvailableAmountLessThanOrEqualTo(Long)
+ Criteria andOriginalAvailableAmountIn(List<Long>)
+ Criteria andOriginalAvailableAmountNotIn(List<Long>)
+ Criteria andOriginalAvailableAmountBetween(Long,Long)
+ Criteria andOriginalAvailableAmountNotBetween(Long,Long)
+ Criteria andOriginalPrincipalAmountIsNull()
+ Criteria andOriginalPrincipalAmountIsNotNull()
+ Criteria andOriginalPrincipalAmountEqualTo(Long)
+ Criteria andOriginalPrincipalAmountNotEqualTo(Long)
+ Criteria andOriginalPrincipalAmountGreaterThan(Long)
+ Criteria andOriginalPrincipalAmountGreaterThanOrEqualTo(Long)
+ Criteria andOriginalPrincipalAmountLessThan(Long)
+ Criteria andOriginalPrincipalAmountLessThanOrEqualTo(Long)
+ Criteria andOriginalPrincipalAmountIn(List<Long>)
+ Criteria andOriginalPrincipalAmountNotIn(List<Long>)
+ Criteria andOriginalPrincipalAmountBetween(Long,Long)
+ Criteria andOriginalPrincipalAmountNotBetween(Long,Long)
+ Criteria andOriginalUseAmountIsNull()
+ Criteria andOriginalUseAmountIsNotNull()
+ Criteria andOriginalUseAmountEqualTo(Long)
+ Criteria andOriginalUseAmountNotEqualTo(Long)
+ Criteria andOriginalUseAmountGreaterThan(Long)
+ Criteria andOriginalUseAmountGreaterThanOrEqualTo(Long)
+ Criteria andOriginalUseAmountLessThan(Long)
+ Criteria andOriginalUseAmountLessThanOrEqualTo(Long)
+ Criteria andOriginalUseAmountIn(List<Long>)
+ Criteria andOriginalUseAmountNotIn(List<Long>)
+ Criteria andOriginalUseAmountBetween(Long,Long)
+ Criteria andOriginalUseAmountNotBetween(Long,Long)
+ Criteria andOriginalFreezeAmountIsNull()
+ Criteria andOriginalFreezeAmountIsNotNull()
+ Criteria andOriginalFreezeAmountEqualTo(Long)
+ Criteria andOriginalFreezeAmountNotEqualTo(Long)
+ Criteria andOriginalFreezeAmountGreaterThan(Long)
+ Criteria andOriginalFreezeAmountGreaterThanOrEqualTo(Long)
+ Criteria andOriginalFreezeAmountLessThan(Long)
+ Criteria andOriginalFreezeAmountLessThanOrEqualTo(Long)
+ Criteria andOriginalFreezeAmountIn(List<Long>)
+ Criteria andOriginalFreezeAmountNotIn(List<Long>)
+ Criteria andOriginalFreezeAmountBetween(Long,Long)
+ Criteria andOriginalFreezeAmountNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
+ Criteria andLoanNumberIsNull()
+ Criteria andLoanNumberIsNotNull()
+ Criteria andLoanNumberEqualTo(String)
+ Criteria andLoanNumberNotEqualTo(String)
+ Criteria andLoanNumberGreaterThan(String)
+ Criteria andLoanNumberGreaterThanOrEqualTo(String)
+ Criteria andLoanNumberLessThan(String)
+ Criteria andLoanNumberLessThanOrEqualTo(String)
+ Criteria andLoanNumberLike(String)
+ Criteria andLoanNumberNotLike(String)
+ Criteria andLoanNumberIn(List<String>)
+ Criteria andLoanNumberNotIn(List<String>)
+ Criteria andLoanNumberBetween(String,String)
+ Criteria andLoanNumberNotBetween(String,String)
+ Criteria andOperateUseAmountIsNull()
+ Criteria andOperateUseAmountIsNotNull()
+ Criteria andOperateUseAmountEqualTo(Long)
+ Criteria andOperateUseAmountNotEqualTo(Long)
+ Criteria andOperateUseAmountGreaterThan(Long)
+ Criteria andOperateUseAmountGreaterThanOrEqualTo(Long)
+ Criteria andOperateUseAmountLessThan(Long)
+ Criteria andOperateUseAmountLessThanOrEqualTo(Long)
+ Criteria andOperateUseAmountIn(List<Long>)
+ Criteria andOperateUseAmountNotIn(List<Long>)
+ Criteria andOperateUseAmountBetween(Long,Long)
+ Criteria andOperateUseAmountNotBetween(Long,Long)
+ Criteria andOperateTypeIsNull()
+ Criteria andOperateTypeIsNotNull()
+ Criteria andOperateTypeEqualTo(String)
+ Criteria andOperateTypeNotEqualTo(String)
+ Criteria andOperateTypeGreaterThan(String)
+ Criteria andOperateTypeGreaterThanOrEqualTo(String)
+ Criteria andOperateTypeLessThan(String)
+ Criteria andOperateTypeLessThanOrEqualTo(String)
+ Criteria andOperateTypeLike(String)
+ Criteria andOperateTypeNotLike(String)
+ Criteria andOperateTypeIn(List<String>)
+ Criteria andOperateTypeNotIn(List<String>)
+ Criteria andOperateTypeBetween(String,String)
+ Criteria andOperateTypeNotBetween(String,String)
+ Criteria andOperatePrincipalAmountIsNull()
+ Criteria andOperatePrincipalAmountIsNotNull()
+ Criteria andOperatePrincipalAmountEqualTo(Long)
+ Criteria andOperatePrincipalAmountNotEqualTo(Long)
+ Criteria andOperatePrincipalAmountGreaterThan(Long)
+ Criteria andOperatePrincipalAmountGreaterThanOrEqualTo(Long)
+ Criteria andOperatePrincipalAmountLessThan(Long)
+ Criteria andOperatePrincipalAmountLessThanOrEqualTo(Long)
+ Criteria andOperatePrincipalAmountIn(List<Long>)
+ Criteria andOperatePrincipalAmountNotIn(List<Long>)
+ Criteria andOperatePrincipalAmountBetween(Long,Long)
+ Criteria andOperatePrincipalAmountNotBetween(Long,Long)
+ Criteria andOperateFreezeAmountIsNull()
+ Criteria andOperateFreezeAmountIsNotNull()
+ Criteria andOperateFreezeAmountEqualTo(Long)
+ Criteria andOperateFreezeAmountNotEqualTo(Long)
+ Criteria andOperateFreezeAmountGreaterThan(Long)
+ Criteria andOperateFreezeAmountGreaterThanOrEqualTo(Long)
+ Criteria andOperateFreezeAmountLessThan(Long)
+ Criteria andOperateFreezeAmountLessThanOrEqualTo(Long)
+ Criteria andOperateFreezeAmountIn(List<Long>)
+ Criteria andOperateFreezeAmountNotIn(List<Long>)
+ Criteria andOperateFreezeAmountBetween(Long,Long)
+ Criteria andOperateFreezeAmountNotBetween(Long,Long)
}
class com.welab.fund.mode.FundBatchcodeAccountFlowExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.FundBatchcodeAccountFlowExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mq.FundRabbitListenerAop_Test {
- FundRabbitListenerAop fundRabbitListenerAop
+ void pointCut_test()
+ void listener_test()
}
class com.welab.fund.mq.FundMqProducer_Test {
- FundMqProducer fundMqProducer
+ void sendDelayMessage_test()
+ void send_test()
+ void sendMessage_test()
+ void sendMessage_t_1_test()
+ void sendMessage_t_2_test()
}
class com.welab.fund.app.impl.FundAccountDubboServiceImpl_Test {
- FundAccountDubboServiceImpl fundAccountDubboServiceImpl
+ void getDisbursementsFundAccount_test()
+ void getFundConfig_test()
+ void isFtFund_test()
+ void getFundAccountInfoById_test()
+ void getLoansOrRepaymentAccount_test()
+ void updateFundBaseInfoById_test()
+ void getAdvanceLoansOrRepaymentAccount_test()
+ void findFundListByPage_test()
+ void findFundListForThirdParty_test()
+ void getAllFundList_test()
+ void getFundAccount_test()
+ void getFundAccount_t_1_test()
+ void getRechargeAccount_test()
+ void getRepaymentTaxAcc_test()
+ void getLendTaxAcc_test()
+ void getFundAccountInfoByCode_test()
+ void getLoansAndRepaymentAccount_test()
+ void getFundtasticList_test()
}
class com.welab.fund.app.service.FundAccountService {
- BaseFundInfoService baseFundInfoService
- BaseFundAccountService baseFundAccountService
# FundConfigService fundConfigServiceImpl
+ FundAccount getLoanTotalAccount(Long)
+ FundAccount getLoanTotalAccount(Byte)
+ FundAccount getRepaymentTotalAccount(Long)
+ FundAccount getSpecifiedAccount(Long,Byte)
+ FundAccount getLoanSubAccount(Long,Byte)
+ FundAccount getLoanSubAccount(String,Byte)
+ FundAccount getRepaymentSubAccount(Long,Byte)
+ FundAccount getRepaymentSubAccount(String,Byte)
+ int addLoansAmount(Long,Long)
+ int minusLoansAmount(Long,Long)
+ int addRepayMentAmount(Long,Long)
+ int minusRepayMentAmount(Long,Long)
+ int minusSubAccount(Long,Long,FundAccountTypeEnum,Byte)
+ int addSubAccount(Long,Long,FundAccountTypeEnum)
+ FundAccount getFundApproveAccount(String)
}
class com.welab.fund.dto.response.DisbursementsFundAccountDTO {
- {static} long serialVersionUID
- FundAccountInfoDTO fromAccount
- FundAccountInfoDTO fromDisbursementsAccount
- FundAccountInfoDTO outputDisbursementsAccount
- FundAccountInfoDTO outputAccount
}
class com.welab.fund.app.base.BaseFundInfoService {
- FundBaseInfoMapper fundBaseInfoMapper
- FundBaseInfoExtMapper fundBaseInfoExtMapper
+ boolean updateByIdSelective(FundBaseInfo)
+ List<FundBaseInfoExt> getListByCondition(FundBaseInfo)
+ List<FundBaseInfo> getByIds(List<Long>)
+ List<FundBaseInfo> getListByFundIds(String)
+ FundBaseInfoExt getLoanFundInfoByFundCode(String)
+ List<FundBaseInfoExt> getFundManagerForUser(Map<String,Object>)
+ List<FundBaseInfoExt> getExtListForAccountInfo(String,Byte)
+ FundBaseInfoExt getLoanFundInfoById(Long)
+ FundBaseInfo getById(Long)
+ FundBaseInfo getByFundCode(String)
+ void importFundInfo(List<FundBaseInfo>)
+ FundBaseInfo getByMobile(String,String)
+ FundBaseInfoExt getLoanFundInfoByMobile(String,String)
+ List<FundBaseInfo> getFundList(String)
+ List<FundBaseInfoExt> getFundtasticList()
}
class com.welab.fund.job.MqResendJob {
- FundErrorMqService fundErrorMqServiceImpl
+ void execute(ShardingContext)
}
class com.welab.fund.app.command.SynchronousAccountAmountTrackCmdExe {
- AccountServiceFacade accountRemoteService
- FundAccountService fundAccountService
- RemoteAccountManager remoteAccountManager
- BaseFundAccountService baseFundAccountService
- BaseFundAccountTrackService baseFundAccountTrackService
+ void sync()
}
class com.welab.fund.app.service.fundaccount.MinusRepaymentAccount {
+ void processAccountAmountByType(FundTradingExt)
+ FundAccount getFundAccount(FundTradingExt)
}
class com.welab.fund.controller.FundMatchRuleController {
- FundMatchRuleService fundMatchRuleService
+ Response<List<FundMatchRuleVO>> getNormalRule(String)
+ Response<List<FundMatchRuleTrackVO>> getNormalRuleTrackList(String)
+ Response<Object> updateNormalRule(Long,List<FundMatchRuleVO>)
+ Response<Object> updateRule(Long,FundMatchRuleVO)
+ Response<List<ToBFundMatchRuleVO>> getToBRule()
+ Response updateToBRule(Long,List<ToBFundMatchRuleVO>)
+ Response<List<TravelokaPlaterRuleVO>> getTravelokRule()
+ Response updateTravelokRule(Long,List<TravelokaPlaterRuleVO>)
}
class com.welab.fund.job.SynchronousAccountAmountTrackJob {
- SynchronousAccountAmountTrackCmdExe synchronousAccountAmountTrackCmdExe
+ void execute(ShardingContext)
}
class com.welab.fund.mode.FundMatchRuleExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundMatchRuleExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundMatchRuleExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andRuleTypeIsNull()
+ Criteria andRuleTypeIsNotNull()
+ Criteria andRuleTypeEqualTo(String)
+ Criteria andRuleTypeNotEqualTo(String)
+ Criteria andRuleTypeGreaterThan(String)
+ Criteria andRuleTypeGreaterThanOrEqualTo(String)
+ Criteria andRuleTypeLessThan(String)
+ Criteria andRuleTypeLessThanOrEqualTo(String)
+ Criteria andRuleTypeLike(String)
+ Criteria andRuleTypeNotLike(String)
+ Criteria andRuleTypeIn(List<String>)
+ Criteria andRuleTypeNotIn(List<String>)
+ Criteria andRuleTypeBetween(String,String)
+ Criteria andRuleTypeNotBetween(String,String)
+ Criteria andRuleStatusIsNull()
+ Criteria andRuleStatusIsNotNull()
+ Criteria andRuleStatusEqualTo(Boolean)
+ Criteria andRuleStatusNotEqualTo(Boolean)
+ Criteria andRuleStatusGreaterThan(Boolean)
+ Criteria andRuleStatusGreaterThanOrEqualTo(Boolean)
+ Criteria andRuleStatusLessThan(Boolean)
+ Criteria andRuleStatusLessThanOrEqualTo(Boolean)
+ Criteria andRuleStatusIn(List<Boolean>)
+ Criteria andRuleStatusNotIn(List<Boolean>)
+ Criteria andRuleStatusBetween(Boolean,Boolean)
+ Criteria andRuleStatusNotBetween(Boolean,Boolean)
+ Criteria andOrderValueIsNull()
+ Criteria andOrderValueIsNotNull()
+ Criteria andOrderValueEqualTo(Integer)
+ Criteria andOrderValueNotEqualTo(Integer)
+ Criteria andOrderValueGreaterThan(Integer)
+ Criteria andOrderValueGreaterThanOrEqualTo(Integer)
+ Criteria andOrderValueLessThan(Integer)
+ Criteria andOrderValueLessThanOrEqualTo(Integer)
+ Criteria andOrderValueIn(List<Integer>)
+ Criteria andOrderValueNotIn(List<Integer>)
+ Criteria andOrderValueBetween(Integer,Integer)
+ Criteria andOrderValueNotBetween(Integer,Integer)
+ Criteria andLastUpdatedUserIsNull()
+ Criteria andLastUpdatedUserIsNotNull()
+ Criteria andLastUpdatedUserEqualTo(Long)
+ Criteria andLastUpdatedUserNotEqualTo(Long)
+ Criteria andLastUpdatedUserGreaterThan(Long)
+ Criteria andLastUpdatedUserGreaterThanOrEqualTo(Long)
+ Criteria andLastUpdatedUserLessThan(Long)
+ Criteria andLastUpdatedUserLessThanOrEqualTo(Long)
+ Criteria andLastUpdatedUserIn(List<Long>)
+ Criteria andLastUpdatedUserNotIn(List<Long>)
+ Criteria andLastUpdatedUserBetween(Long,Long)
+ Criteria andLastUpdatedUserNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.FundMatchRuleExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundMatchRuleExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.FundLoanMatchBatchcodeExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundLoanMatchBatchcodeExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundLoanMatchBatchcodeExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andLoanNumberIsNull()
+ Criteria andLoanNumberIsNotNull()
+ Criteria andLoanNumberEqualTo(String)
+ Criteria andLoanNumberNotEqualTo(String)
+ Criteria andLoanNumberGreaterThan(String)
+ Criteria andLoanNumberGreaterThanOrEqualTo(String)
+ Criteria andLoanNumberLessThan(String)
+ Criteria andLoanNumberLessThanOrEqualTo(String)
+ Criteria andLoanNumberLike(String)
+ Criteria andLoanNumberNotLike(String)
+ Criteria andLoanNumberIn(List<String>)
+ Criteria andLoanNumberNotIn(List<String>)
+ Criteria andLoanNumberBetween(String,String)
+ Criteria andLoanNumberNotBetween(String,String)
+ Criteria andBatchCodeIsNull()
+ Criteria andBatchCodeIsNotNull()
+ Criteria andBatchCodeEqualTo(String)
+ Criteria andBatchCodeNotEqualTo(String)
+ Criteria andBatchCodeGreaterThan(String)
+ Criteria andBatchCodeGreaterThanOrEqualTo(String)
+ Criteria andBatchCodeLessThan(String)
+ Criteria andBatchCodeLessThanOrEqualTo(String)
+ Criteria andBatchCodeLike(String)
+ Criteria andBatchCodeNotLike(String)
+ Criteria andBatchCodeIn(List<String>)
+ Criteria andBatchCodeNotIn(List<String>)
+ Criteria andBatchCodeBetween(String,String)
+ Criteria andBatchCodeNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.FundLoanMatchBatchcodeExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mode.FundLoanMatchBatchcodeExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.test.matchrule.FundMatchRuleTest {
- NormalFundMatchRuleCmdExe normalFundMatchRuleCmdExe
- FundMatchRuleController fundMatchRuleController
+ void testUpdateRule()
+ void getUpdatedTrack()
}
class com.welab.fund.mode.FundRefundRecord {
- Long id
- Date startDate
- Date endDate
- Byte channel
- Byte recordType
- Long fundBaseId
- Long repaymentAmount
- Long interestFee
- Long lateFee
- Long principalFee
- Long adminFee
- Long fundInterestFee
- Long serviceFee
- Long amount
- Long fastPayFee
- Long insuredAmount
- Long vatFee
- Long hasTaxInsterest
- Date createAt
- String buyerCode
+ Long getId()
+ void setId(Long)
+ Date getStartDate()
+ void setStartDate(Date)
+ Date getEndDate()
+ void setEndDate(Date)
+ Byte getChannel()
+ void setChannel(Byte)
+ Byte getRecordType()
+ void setRecordType(Byte)
+ Long getFundBaseId()
+ void setFundBaseId(Long)
+ Long getRepaymentAmount()
+ void setRepaymentAmount(Long)
+ Long getInterestFee()
+ void setInterestFee(Long)
+ Long getLateFee()
+ void setLateFee(Long)
+ Long getPrincipalFee()
+ void setPrincipalFee(Long)
+ Long getAdminFee()
+ void setAdminFee(Long)
+ Long getFundInterestFee()
+ void setFundInterestFee(Long)
+ Long getServiceFee()
+ void setServiceFee(Long)
+ Long getAmount()
+ void setAmount(Long)
+ Long getFastPayFee()
+ void setFastPayFee(Long)
+ Long getInsuredAmount()
+ void setInsuredAmount(Long)
+ Long getVatFee()
+ void setVatFee(Long)
+ Long getHasTaxInsterest()
+ void setHasTaxInsterest(Long)
+ Date getCreateAt()
+ void setCreateAt(Date)
+ String getBuyerCode()
+ void setBuyerCode(String)
}
class com.welab.fund.app.service.FundTransferService {
- FundAccountService fundAccountService
- FundTradingLocalService fundTradingLocalService
- BaseFundTradingService baseFundTradingService
- FundLoansLocalService fundLoansLocalService
- FundServiceManager fundServiceManager
- JedisCluster jedisCluster
- RemoteAccountManager remoteAccountManager
- FundConfigService fundConfigService
- RepaymentTrackRemoteService repaymentTrackRemoteService
- TransferManager transferManager
- BaseFundInfoService baseFundInfoService
- BaseFundAccountService baseFundAccountService
- BaseRefundTradingRecordService baseRefundTradingRecordService
+ boolean checkSubAccount(Long,Byte)
+ void transferAmount(FundTrading,TransferDto)
+ TransferDto buildRefundDto(FundAccount,FundAccount,FundTrading)
+ void offlineRepayment(FundTradingExt)
+ void addAdminFee(FundTradingDTO)
+ void newTransferSuccess(String)
- void processFundCallback(String,TransferCallbackDto)
- void processFinanceCallback(TransferCallbackDto,String)
+ void localRecharge(RechargeModel)
+ void recharge(RechargeModel)
+ void advanceFund(FundTradingExt)
+ void advanceFund(TransferModel)
+ void transferAmount(TransferModel)
+ void tradingRecordResend(FundTrading)
+ void thirdRecharge(FundRechargeMqDto)
+ void updateAmount(Long,List<TrackVo>,Map<Byte,Long>)
+ void thirdRepaymentTransfer(FundTradingExt)
+ void transferFaspayJob(String)
+ void recordingRefundTrading(Long,Long,Long)
+ void transferFaspayFeeBankJob(String)
}
class com.welab.fund.mode.FundBatchcodeAccount {
- Long id
- Long fundId
- String thirdPartyUqCode
- String batchCode
- Long rechargeAmount
- Long useAmount
- Long interestAmount
- Date createdAt
- Date updatedAt
- Date expiredAt
- Long freezeAmount
- Long withdrawal
+ Long getId()
+ void setId(Long)
+ Long getFundId()
+ void setFundId(Long)
+ String getThirdPartyUqCode()
+ void setThirdPartyUqCode(String)
+ String getBatchCode()
+ void setBatchCode(String)
+ Long getRechargeAmount()
+ void setRechargeAmount(Long)
+ Long getUseAmount()
+ void setUseAmount(Long)
+ Long getInterestAmount()
+ void setInterestAmount(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ Date getExpiredAt()
+ void setExpiredAt(Date)
+ Long getFreezeAmount()
+ void setFreezeAmount(Long)
+ Long getWithdrawal()
+ void setWithdrawal(Long)
}
class com.welab.fund.mq.RabbitMqConfigration_Test {
- RabbitMqConfigration rabbitMqConfigration
+ void buildSynDelayExchange_test()
+ void buildResaveDetailQueue_test()
+ void buildTradingRecordResendQueue_test()
+ void buildRefundQueue_test()
+ void buildReleaseRepaymentQueue_test()
+ void buildFaspayRefundJobQueue_test()
+ void fundMatchRuleQueue_test()
+ void buildFundLoansQueue_test()
+ void buildFundTasticCheckQueue_test()
+ void buildFaspayQueue_test()
+ void deadLetterBinding_test()
+ void ruleUpdateListenerContainer_test()
+ void deadLetterQueue_test()
+ void synDelayBinding_test()
+ void fundMatchRuleBinding_test()
+ void rematchExchange_test()
+ void buildRepaymentQueue_test()
+ void buildRetracementQueue_test()
+ void fundMatchRuleExchange_test()
+ void buildSynDelay_test()
+ void buildGatewayLoansQueue_test()
+ void buildFundLoansRecordQueue_test()
+ void buildApplyQueue_test()
}
class com.welab.fund.mode.FundAccountExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> FundAccountExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.FundAccountExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundBaseIdIsNull()
+ Criteria andFundBaseIdIsNotNull()
+ Criteria andFundBaseIdEqualTo(Long)
+ Criteria andFundBaseIdNotEqualTo(Long)
+ Criteria andFundBaseIdGreaterThan(Long)
+ Criteria andFundBaseIdGreaterThanOrEqualTo(Long)
+ Criteria andFundBaseIdLessThan(Long)
+ Criteria andFundBaseIdLessThanOrEqualTo(Long)
+ Criteria andFundBaseIdIn(List<Long>)
+ Criteria andFundBaseIdNotIn(List<Long>)
+ Criteria andFundBaseIdBetween(Long,Long)
+ Criteria andFundBaseIdNotBetween(Long,Long)
+ Criteria andAccountNoIsNull()
+ Criteria andAccountNoIsNotNull()
+ Criteria andAccountNoEqualTo(String)
+ Criteria andAccountNoNotEqualTo(String)
+ Criteria andAccountNoGreaterThan(String)
+ Criteria andAccountNoGreaterThanOrEqualTo(String)
+ Criteria andAccountNoLessThan(String)
+ Criteria andAccountNoLessThanOrEqualTo(String)
+ Criteria andAccountNoLike(String)
+ Criteria andAccountNoNotLike(String)
+ Criteria andAccountNoIn(List<String>)
+ Criteria andAccountNoNotIn(List<String>)
+ Criteria andAccountNoBetween(String,String)
+ Criteria andAccountNoNotBetween(String,String)
+ Criteria andGatewayTypeIsNull()
+ Criteria andGatewayTypeIsNotNull()
+ Criteria andGatewayTypeEqualTo(Byte)
+ Criteria andGatewayTypeNotEqualTo(Byte)
+ Criteria andGatewayTypeGreaterThan(Byte)
+ Criteria andGatewayTypeGreaterThanOrEqualTo(Byte)
+ Criteria andGatewayTypeLessThan(Byte)
+ Criteria andGatewayTypeLessThanOrEqualTo(Byte)
+ Criteria andGatewayTypeIn(List<Byte>)
+ Criteria andGatewayTypeNotIn(List<Byte>)
+ Criteria andGatewayTypeBetween(Byte,Byte)
+ Criteria andGatewayTypeNotBetween(Byte,Byte)
+ Criteria andFundCodeIsNull()
+ Criteria andFundCodeIsNotNull()
+ Criteria andFundCodeEqualTo(String)
+ Criteria andFundCodeNotEqualTo(String)
+ Criteria andFundCodeGreaterThan(String)
+ Criteria andFundCodeGreaterThanOrEqualTo(String)
+ Criteria andFundCodeLessThan(String)
+ Criteria andFundCodeLessThanOrEqualTo(String)
+ Criteria andFundCodeLike(String)
+ Criteria andFundCodeNotLike(String)
+ Criteria andFundCodeIn(List<String>)
+ Criteria andFundCodeNotIn(List<String>)
+ Criteria andFundCodeBetween(String,String)
+ Criteria andFundCodeNotBetween(String,String)
+ Criteria andAmountIsNull()
+ Criteria andAmountIsNotNull()
+ Criteria andAmountEqualTo(Long)
+ Criteria andAmountNotEqualTo(Long)
+ Criteria andAmountGreaterThan(Long)
+ Criteria andAmountGreaterThanOrEqualTo(Long)
+ Criteria andAmountLessThan(Long)
+ Criteria andAmountLessThanOrEqualTo(Long)
+ Criteria andAmountIn(List<Long>)
+ Criteria andAmountNotIn(List<Long>)
+ Criteria andAmountBetween(Long,Long)
+ Criteria andAmountNotBetween(Long,Long)
+ Criteria andAccountTypeIsNull()
+ Criteria andAccountTypeIsNotNull()
+ Criteria andAccountTypeEqualTo(Byte)
+ Criteria andAccountTypeNotEqualTo(Byte)
+ Criteria andAccountTypeGreaterThan(Byte)
+ Criteria andAccountTypeGreaterThanOrEqualTo(Byte)
+ Criteria andAccountTypeLessThan(Byte)
+ Criteria andAccountTypeLessThanOrEqualTo(Byte)
+ Criteria andAccountTypeIn(List<Byte>)
+ Criteria andAccountTypeNotIn(List<Byte>)
+ Criteria andAccountTypeBetween(Byte,Byte)
+ Criteria andAccountTypeNotBetween(Byte,Byte)
+ Criteria andCreateAtIsNull()
+ Criteria andCreateAtIsNotNull()
+ Criteria andCreateAtEqualTo(Date)
+ Criteria andCreateAtNotEqualTo(Date)
+ Criteria andCreateAtGreaterThan(Date)
+ Criteria andCreateAtGreaterThanOrEqualTo(Date)
+ Criteria andCreateAtLessThan(Date)
+ Criteria andCreateAtLessThanOrEqualTo(Date)
+ Criteria andCreateAtIn(List<Date>)
+ Criteria andCreateAtNotIn(List<Date>)
+ Criteria andCreateAtBetween(Date,Date)
+ Criteria andCreateAtNotBetween(Date,Date)
+ Criteria andUpdateAtIsNull()
+ Criteria andUpdateAtIsNotNull()
+ Criteria andUpdateAtEqualTo(Date)
+ Criteria andUpdateAtNotEqualTo(Date)
+ Criteria andUpdateAtGreaterThan(Date)
+ Criteria andUpdateAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdateAtLessThan(Date)
+ Criteria andUpdateAtLessThanOrEqualTo(Date)
+ Criteria andUpdateAtIn(List<Date>)
+ Criteria andUpdateAtNotIn(List<Date>)
+ Criteria andUpdateAtBetween(Date,Date)
+ Criteria andUpdateAtNotBetween(Date,Date)
+ Criteria andRemarkIsNull()
+ Criteria andRemarkIsNotNull()
+ Criteria andRemarkEqualTo(String)
+ Criteria andRemarkNotEqualTo(String)
+ Criteria andRemarkGreaterThan(String)
+ Criteria andRemarkGreaterThanOrEqualTo(String)
+ Criteria andRemarkLessThan(String)
+ Criteria andRemarkLessThanOrEqualTo(String)
+ Criteria andRemarkLike(String)
+ Criteria andRemarkNotLike(String)
+ Criteria andRemarkIn(List<String>)
+ Criteria andRemarkNotIn(List<String>)
+ Criteria andRemarkBetween(String,String)
+ Criteria andRemarkNotBetween(String,String)
}
class com.welab.fund.mode.FundAccountExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.FundAccountExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.fund.mq.FundQueue {
}
class com.welab.fund.mq.FundQueue$OutStream {
+ {static} String FUND_APPROVAL_LOANS_QUEUE
+ {static} String WELAB_SEA_FUND_SIGNED_NOTICE_CALLBACK
- <<Create>> OutStream()
}
class com.welab.fund.mq.FundQueue$InStream {
+ {static} String TRANSFER_CALLBACK_QUEUE
+ {static} String TEST_FUND_EXCHANGE
+ {static} String TEST_FUND_MQ
+ {static} String FUND_LOANS_QUEUE
+ {static} String FUND_REPAYMENT_QUEUE
+ {static} String FUND_LOANS_RECORD_QUEUE
+ {static} String FUND_FIF_REJECT_EXCHANGE
+ {static} String FUND_FIF_REJECT_QUEUE
+ {static} String GATEWAY_TRANSFER_EXCHANGE
+ {static} String GATEWAY_FUND_TRANSFER_QUEUE
+ {static} String GATEWAY_LOANS_EXCHANGE
+ {static} String GATEWAY_FUND_LOANS_QUEUE
+ {static} String GATEWAY_REPAYMENT_EXCHANGE
+ {static} String FUND_TRADING_RECORD_RESEND_QUEUE
+ {static} String FUND_RECHARGE_EXCHANGE
+ {static} String FUND_RECHARGE_QUEUE
+ {static} String FUND_APPLY_QUEUE
+ {static} String FUND_REMATCH_QUEUE
+ {static} String FUND_REMATCH_KEY
+ {static} String FUND_REMATCH_DEADLETTER_KEY
+ {static} String FUND_REMATCH_DEADLETTER_QUEUE
+ {static} String FUND_REMATCH_EXCHANGE
+ {static} String WELAB_SEA_FUND_SIGNED_NOTICE
+ {static} String FASPAY_REFUND_QUEUE
+ {static} String RESAVE_DETAIL_REFUND_QUEUE
+ {static} String FUND_MATCHRULE_EXCHANGE
+ {static} String FUND_REPAYMENT_AMOUNT_RETRACEMENT
+ {static} String FASPAY_REFUND_JOB_QUEUE
+ {static} String SYN_DELAY_EXCHANGE
+ {static} String SYN_DELAY_QUEUE
+ {static} String RELEASE_REPAYMENT_QUEUE
+ {static} String FUND_TASTIC_CHECK_QUEUE
+ {static} String FUND_TASTIC_RETRY
+ {static} String FUND_TASTIC_LOANSINTEREST_NOTIFY
+ {static} String FUND_TASTIC_LOANS_NOTIFY
+ {static} String FUND_ROLLBACK_LOANS
+ {static} String FUND_BIND_OLD_AND_NEW_LOANS
- <<Create>> InStream()
}
class com.welab.fund.app.command.ToBFundMatchRuleCmdExe {
- BaseFundMatchRuleService baseFundMatchRuleService
- OptUnityLogServiceFacade optUnityLogServiceFacade
- FundMqProducer fundMqProducer
+ Response<List<ToBFundMatchRuleVO>> getToBRule()
- String getProductCode(JSONObject)
+ void updateToBRule(Long,List<ToBFundMatchRuleVO>)
}
class com.welab.fund.app.command.FundAccountQryExe {
- FundBanlanceManager fundBanlanceManager
- FundServiceManager fundServiceManager
- FundAccountCheckService fundAccountCheckService
+ FundAccountDTO getFundAccount(Long)
}
class com.welab.fund.controller.RefundJobController_Test {
- RefundJobController refundJobController
+ void downLoadRefundRecord_test()
+ void getChangeHistoryList_test()
+ void calculateRefund_test()
+ void executeRefund_test()
}
class com.welab.fund.mode.FundLoans {
- Long id
- Long fundBaseId
- String loanNumber
- Integer status
- Long approvedAmount
- String approvedTenor
- String scoreClass
- Date applyAt
- Date fundApprovedAt
- String mobile
- String name
- Date createdAt
- Date updatedAt
- Long updateManager
- String matchRecord
+ Long getId()
+ void setId(Long)
+ Long getFundBaseId()
+ void setFundBaseId(Long)
+ String getLoanNumber()
+ void setLoanNumber(String)
+ Integer getStatus()
+ void setStatus(Integer)
+ Long getApprovedAmount()
+ void setApprovedAmount(Long)
+ String getApprovedTenor()
+ void setApprovedTenor(String)
+ String getScoreClass()
+ void setScoreClass(String)
+ Date getApplyAt()
+ void setApplyAt(Date)
+ Date getFundApprovedAt()
+ void setFundApprovedAt(Date)
+ String getMobile()
+ void setMobile(String)
+ String getName()
+ void setName(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ Long getUpdateManager()
+ void setUpdateManager(Long)
+ String getMatchRecord()
+ void setMatchRecord(String)
}
interface com.welab.fund.mapper.FundFtWithdrawalListMapper {
~ long countByExample(FundFtWithdrawalListExample)
~ int deleteByExample(FundFtWithdrawalListExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundFtWithdrawalList)
~ int insertSelective(FundFtWithdrawalList)
~ List<FundFtWithdrawalList> selectByExample(FundFtWithdrawalListExample)
~ FundFtWithdrawalList selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundFtWithdrawalList,FundFtWithdrawalListExample)
~ int updateByExample(FundFtWithdrawalList,FundFtWithdrawalListExample)
~ int updateByPrimaryKeySelective(FundFtWithdrawalList)
~ int updateByPrimaryKey(FundFtWithdrawalList)
}
class com.welab.fund.app.base.BaseFundAccountService {
- FundAccountMapper fundAccountMapper
- FundAccountExtMapper fundAccountExtMapper
+ FundAccount getFundAccountByCondition(Map<String,Object>)
+ FundAccountExt countSubFundAccount(Byte,Byte)
+ int updateAccountAmount(Long,Long,Integer)
+ int newUpdateAccountAmount(FundAccountExt)
+ FundAccount getByAccountNoLimitOne(String)
+ List<FundAccountExt> getAllAccount(Map<String,Object>)
+ List<FundAccountExt> getGroupAccount(Map<String,Object>)
+ FundAccountExt getFundAccount(FundAccountExt)
+ List<FundAccount> getFundProportionAccount()
+ Long getBniLocalRepaymentAmount()
+ void importData(List<FundAccount>)
}
class com.welab.fund.app.service.loans_repayment.PERMATAServiceImpl {
+ void init()
+ void addTransferFee(FundTradingExt)
}
interface com.welab.fund.mapper.FundMatchRuleExtMapper {
~ List<String> getRuleByRuleType(String)
~ List<FundMatchRule> getRuleList(FundMatchRule)
~ List<FundMatchRule> getByIds(List<Long>)
}
class com.welab.fund.test.BaseTest {
}
interface com.welab.fund.mapper.FundManagerMapper {
~ int countByExample(FundManagerExample)
~ int deleteByExample(FundManagerExample)
~ int deleteByPrimaryKey(Long)
~ int insert(FundManager)
~ int insertSelective(FundManager)
~ List<FundManager> selectByExample(FundManagerExample)
~ FundManager selectByPrimaryKey(Long)
~ int updateByExampleSelective(FundManager,FundManagerExample)
~ int updateByExample(FundManager,FundManagerExample)
~ int updateByPrimaryKeySelective(FundManager)
~ int updateByPrimaryKey(FundManager)
}
class com.welab.fund.mode.FundTradingQueue {
- Long id
- Long detailId
- Long totalTransactionId
- Byte status
- Byte type
- Byte gateWay
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getDetailId()
+ void setDetailId(Long)
+ Long getTotalTransactionId()
+ void setTotalTransactionId(Long)
+ Byte getStatus()
+ void setStatus(Byte)
+ Byte getType()
+ void setType(Byte)
+ Byte getGateWay()
+ void setGateWay(Byte)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.fund.mode.FundTrading {
- Long id
- Long fundBaseId
- String loanNumber
- String outAccountNo
- String inAccountNo
- String type
- Long fundAmount
- Long amount
- String status
- String remark
- Date createdAt
- Date updatedAt
- String transferOrder
- Byte gatewayType
+ Long getId()
+ void setId(Long)
+ Long getFundBaseId()
+ void setFundBaseId(Long)
+ String getLoanNumber()
+ void setLoanNumber(String)
+ String getOutAccountNo()
+ void setOutAccountNo(String)
+ String getInAccountNo()
+ void setInAccountNo(String)
+ String getType()
+ void setType(String)
+ Long getFundAmount()
+ void setFundAmount(Long)
+ Long getAmount()
+ void setAmount(Long)
+ String getStatus()
+ void setStatus(String)
+ String getRemark()
+ void setRemark(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getTransferOrder()
+ void setTransferOrder(String)
+ Byte getGatewayType()
+ void setGatewayType(Byte)
}
class com.welab.fund.app.facade.UserServiceFace {
- UserService userService
+ List<UserInfoDTO> getUserInfo(List<Long>)
+ UserInfoDTO getUserInfo(Long)
+ Response<UserInfoDTO> getUserInfoByMobile(String,Long)
}
class com.welab.fund.job.RefundFIFJob_Test {
- RefundFIFJob refundFIFJob
+ void execute_test()
}
class com.welab.fund.app.base.batchcode.BaseBatchcodeAccountService {
- FundBatchcodeAccountExtMapper fundBatchcodeAccountExtMapper
+ void addBatchcode(Long,Long,String,String)
+ void addAmount(FundBatchcodeAccount)
+ FundBatchcodeAccount findAccountBlockByBatchCode(String)
+ FundBatchcodeAccount findAccountByBatchCode(String)
+ long existsThirdCode(String)
+ List<FundBatchcodeAccountExt> getAllBatchCode(boolean)
+ Long getSumAmount(Long)
+ List<FundBatchcodeAccount> getAllBatchcode(Long)
+ PageInfo<FundBatchcodeAccount> getBatchCode(Long,TopupQryDTO)
+ List<FundBatchcodeAccount> getAllBatchcode(List<Long>)
+ List<FundBatchcodeAccount> findBatchcodeSumAmountByFundIds(List<Long>)
+ FundBatchcodeAccount totalAmount()
+ int updateExpiredDate(Long,Date)
+ FundBatchcodeAccount getBatchcode(Long)
+ List<FundBatchcodeAccount> getLastMonth()
}
class com.welab.fund.mode.ext.FundLoansExt {
- String fundCode
- List<String> fundBaseIds
- List<Long> ids
- Date fundApprovedStart
- Date fundApprovedEnd
- String batchCode
}
class com.welab.fund.mode.ext.MatchFundModel {
- String secondProductCode
- String productCode
- String originLoanNumber
- String loanNumber
- String reasonKey
- String industry
- Long approvedAmount
- String matchRecord
- String occupation
- String approvedTenor
- String batchCode
- Date expiredDate
}
class com.welab.fund.mode.RetracementTradingReocrdExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> RetracementTradingReocrdExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.fund.mode.RetracementTradingReocrdExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andFundAssociateIdIsNull()
+ Criteria andFundAssociateIdIsNotNull()
+ Criteria andFundAssociateIdEqualTo(Long)
+ Criteria andFundAssociateIdNotEqualTo(Long)
+ Criteria andFundAssociateIdGreaterThan(Long)
+ Criteria andFundAssociateIdGreaterThanOrEqualTo(Long)
+ Criteria andFundAssociateIdLessThan(Long)
+ Criteria andFundAssociateIdLessThanOrEqualTo(Long)
+ Criteria andFundAssociateIdIn(List<Long>)
+ Criteria andFundAssociateIdNotIn(List<Long>)
+ Criteria andFundAssociateIdBetween(Long,Long)
+ Criteria andFundAssociateIdNotBetween(Long,Long)
+ Criteria andFundTradingIdIsNull()
+ Criteria andFundTradingIdIsNotNull()
+ Criteria andFundTradingIdEqualTo(Long)
+ Criteria andFundTradingIdNotEqualTo(Long)
+ Criteria andFundTradingIdGreaterThan(Long)
+ Criteria andFundTradingIdGreaterThanOrEqualTo(Long)
+ Criteria andFundTradingIdLessThan(Long)
+ Criteria andFundTradingIdLessThanOrEqualTo(Long)
+ Criteria andFundTradingIdIn(List<Long>)
+ Criteria andFundTradingIdNotIn(List<Long>)
+ Criteria andFundTradingIdBetween(Long,Long)
+ Criteria andFundTradingIdNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.fund.mode.RetracementTradingReocrdExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.fund.mode.RetracementTradingReocrdExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
interface com.welab.fund.mapper.RefundTradingRecordMapper {
~ int countByExample(RefundTradingRecordExample)
~ int deleteByExample(RefundTradingRecordExample)
~ int deleteByPrimaryKey(Long)
~ int insert(RefundTradingRecord)
~ int insertSelective(RefundTradingRecord)
~ List<RefundTradingRecord> selectByExample(RefundTradingRecordExample)
~ RefundTradingRecord selectByPrimaryKey(Long)
~ int updateByExampleSelective(RefundTradingRecord,RefundTradingRecordExample)
~ int updateByExample(RefundTradingRecord,RefundTradingRecordExample)
~ int updateByPrimaryKeySelective(RefundTradingRecord)
~ int updateByPrimaryKey(RefundTradingRecord)
}
enum com.welab.fund.enums.FundServiceEnum {
+  REC_AND_REF_SIGN_SERVICE
+  LOANS_AND_REPAYMENT_BNI_SERVICE
+  LOANS_AND_REPAYMENT_PERMATA_SERVICE
- Integer serviceId
- String attr
- String service
+ {static} FundServiceEnum getById(Integer)
}
class com.welab.fund.job.RefundFIFJob {
- RefundT1CmdExe refundService
+ void execute(ShardingContext)
}
class com.welab.fund.app.manager.match.FundMatchRuleManager {
- FundConfigService fundConfigService
- FundLoansLocalService fundLoansLocalService
- List<AbstractFundMatchRuleManager> fundMatchRuleManagerList
- BaseFundInfoService baseFundInfoService
+ void init()
+ FundAccountInfoDTO matchFundAccountInfo(MatchFundModel)
- String matchFundInfo(MatchFundModel)
- FundAccountInfoDTO buildFundDTO(FundBaseInfo)
}
class com.welab.fund.mode.RefundJobRecord {
- Long id
- Byte type
- Byte channel
- Date refundDate
- Date jobExecuteTime
- String dateStr
- String operationPerson
- Long jobAmount
- Byte soldType
- String fundCode
- Long funderAmount
- Long awdaAmount
- Long thirdPartyAmount
- Long taxAmount
- String refundStatus
- Long fundRefundRecordId
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Byte getType()
+ void setType(Byte)
+ Byte getChannel()
+ void setChannel(Byte)
+ Date getRefundDate()
+ void setRefundDate(Date)
+ Date getJobExecuteTime()
+ void setJobExecuteTime(Date)
+ String getDateStr()
+ void setDateStr(String)
+ String getOperationPerson()
+ void setOperationPerson(String)
+ Long getJobAmount()
+ void setJobAmount(Long)
+ Byte getSoldType()
+ void setSoldType(Byte)
+ String getFundCode()
+ void setFundCode(String)
+ Long getFunderAmount()
+ void setFunderAmount(Long)
+ Long getAwdaAmount()
+ void setAwdaAmount(Long)
+ Long getThirdPartyAmount()
+ void setThirdPartyAmount(Long)
+ Long getTaxAmount()
+ void setTaxAmount(Long)
+ String getRefundStatus()
+ void setRefundStatus(String)
+ Long getFundRefundRecordId()
+ void setFundRefundRecordId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.fund.dto.response.FundOutInputAccountDTO {
- {static} long serialVersionUID
- FundAccountInfoDTO inputAccount
- FundAccountInfoDTO outputAccount
}


java.io.Serializable <|.. com.welab.fund.dto.response.FundTransferAccountResponseDTO
com.welab.fund.mode.FundBatchcodeAccountFlow <|-- com.welab.fund.mode.ext.FundBatchcodeAccountFlowExt
org.springframework.amqp.core.MessageListener <|.. com.welab.fund.mq.FundMatchRuleUpdateListener
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.TestJob
org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter <|-- com.welab.fund.configuration.WebAppConfigurer
com.welab.fund.app.service.loans_repayment.ILoansAndRepaymentService <|.. com.welab.fund.app.service.loans_repayment.AbstractLoansAndRepaymentService
com.welab.fund.mapper.FundBatchcodeAccountMapper <|-- com.welab.fund.mapper.FundBatchcodeAccountExtMapper
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.ReturnSoldJob
com.welab.fund.mode.FundConfigExample +.. com.welab.fund.mode.FundConfigExample$GeneratedCriteria
com.welab.fund.mode.FundConfigExample +.. com.welab.fund.mode.FundConfigExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundConfigExample$Criteria
com.welab.fund.mode.FundConfigExample +.. com.welab.fund.mode.FundConfigExample$Criterion
com.welab.fund.app.manager.match.AbstractFundMatchRuleManager <|-- com.welab.fund.app.manager.match.FundMatchFundTasticRuleManager
com.welab.fund.mode.FundTrading <|-- com.welab.fund.mode.ext.FundTradingExt
com.welab.fund.mode.FundTradingExample +.. com.welab.fund.mode.FundTradingExample$GeneratedCriteria
com.welab.fund.mode.FundTradingExample +.. com.welab.fund.mode.FundTradingExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundTradingExample$Criteria
com.welab.fund.mode.FundTradingExample +.. com.welab.fund.mode.FundTradingExample$Criterion
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.RetracementTimerJob
com.welab.fund.mode.RetracementReocrdExample +.. com.welab.fund.mode.RetracementReocrdExample$GeneratedCriteria
com.welab.fund.mode.RetracementReocrdExample +.. com.welab.fund.mode.RetracementReocrdExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.RetracementReocrdExample$Criteria
com.welab.fund.mode.RetracementReocrdExample +.. com.welab.fund.mode.RetracementReocrdExample$Criterion
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.refund.RefundTest
com.welab.fund.mode.FundMqErrorExample +.. com.welab.fund.mode.FundMqErrorExample$GeneratedCriteria
com.welab.fund.mode.FundMqErrorExample +.. com.welab.fund.mode.FundMqErrorExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundMqErrorExample$Criteria
com.welab.fund.mode.FundMqErrorExample +.. com.welab.fund.mode.FundMqErrorExample$Criterion
com.welab.fund.mode.FundFtWithdrawalListExample +.. com.welab.fund.mode.FundFtWithdrawalListExample$GeneratedCriteria
com.welab.fund.mode.FundFtWithdrawalListExample +.. com.welab.fund.mode.FundFtWithdrawalListExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundFtWithdrawalListExample$Criteria
com.welab.fund.mode.FundFtWithdrawalListExample +.. com.welab.fund.mode.FundFtWithdrawalListExample$Criterion
com.welab.fund.app.impl.FundLoansService <|.. com.welab.fund.app.impl.FundLoansDubboServiceImpl
com.welab.fund.service.FundTasticService <|.. com.welab.fund.app.impl.FundTasticDubboServiceImpl
com.welab.fund.mode.FundFtCallbackLogExample +.. com.welab.fund.mode.FundFtCallbackLogExample$GeneratedCriteria
com.welab.fund.mode.FundFtCallbackLogExample +.. com.welab.fund.mode.FundFtCallbackLogExample$Criterion
com.welab.fund.mode.FundFtCallbackLogExample +.. com.welab.fund.mode.FundFtCallbackLogExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundFtCallbackLogExample$Criteria
com.welab.common.exception.FastRuntimeException <|-- com.welab.fund.exception.FundException
java.io.Serializable <|.. com.welab.fund.dto.LoansNotifyCmd
com.welab.fund.mode.FundBaseInfoExample +.. com.welab.fund.mode.FundBaseInfoExample$GeneratedCriteria
com.welab.fund.mode.FundBaseInfoExample +.. com.welab.fund.mode.FundBaseInfoExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundBaseInfoExample$Criteria
com.welab.fund.mode.FundBaseInfoExample +.. com.welab.fund.mode.FundBaseInfoExample$Criterion
com.welab.fund.mode.FundMatchRule <|-- com.welab.fund.mode.ext.FundMatchRuleExt
org.springframework.web.filter.OncePerRequestFilter <|-- com.welab.fund.filter.LogFilter
com.welab.fund.mode.FundAccountTrackExample +.. com.welab.fund.mode.FundAccountTrackExample$GeneratedCriteria
com.welab.fund.mode.FundAccountTrackExample +.. com.welab.fund.mode.FundAccountTrackExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundAccountTrackExample$Criteria
com.welab.fund.mode.FundAccountTrackExample +.. com.welab.fund.mode.FundAccountTrackExample$Criterion
com.welab.fund.mode.RefundTradingRecordExample +.. com.welab.fund.mode.RefundTradingRecordExample$GeneratedCriteria
com.welab.fund.mode.RefundTradingRecordExample +.. com.welab.fund.mode.RefundTradingRecordExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.RefundTradingRecordExample$Criteria
com.welab.fund.mode.RefundTradingRecordExample +.. com.welab.fund.mode.RefundTradingRecordExample$Criterion
com.welab.fund.dto.request.PageRequestDTO <|-- com.welab.fund.dto.request.TopupQryDTO
com.welab.fund.mode.RefundJobRecordExample +.. com.welab.fund.mode.RefundJobRecordExample$GeneratedCriteria
com.welab.fund.mode.RefundJobRecordExample +.. com.welab.fund.mode.RefundJobRecordExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.RefundJobRecordExample$Criteria
com.welab.fund.mode.RefundJobRecordExample +.. com.welab.fund.mode.RefundJobRecordExample$Criterion
com.welab.fund.app.service.fundaccount.AbstractFundAccountLocalService <|-- com.welab.fund.app.service.fundaccount.AddLoansAccount
java.io.Serializable <|.. com.welab.fund.dto.response.TopupDTO
java.io.Serializable <|.. com.welab.fund.dto.response.FundTasticResponseDTO
com.welab.fund.app.manager.match.AbstractFundMatchRuleManager <|-- com.welab.fund.app.manager.match.FundMatchMaumodalRuleManager
com.welab.fund.mode.ApplyLoansDataExample +.. com.welab.fund.mode.ApplyLoansDataExample$GeneratedCriteria
com.welab.fund.mode.ApplyLoansDataExample +.. com.welab.fund.mode.ApplyLoansDataExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.ApplyLoansDataExample$Criteria
com.welab.fund.mode.ApplyLoansDataExample +.. com.welab.fund.mode.ApplyLoansDataExample$Criterion
com.welab.fund.app.service.recharge_refund.RechargeAndRefundService <|.. com.welab.fund.app.service.recharge_refund.SingleRecAndRefServiceImpl
com.welab.fund.dto.request.PageRequestDTO <|-- com.welab.fund.dto.request.FundAccountRequestDTO
com.welab.fund.app.service.fundaccount.AbstractFundAccountLocalService <|-- com.welab.fund.app.service.fundaccount.NoOperationService
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.mq.MqConsumerTest
com.welab.fund.app.command.batchcode.FundTasticMatchCmdExe +.. com.welab.fund.app.command.batchcode.FundTasticMatchCmdExe$FundtasticBatchcode
com.welab.fund.mode.FundFtImportDataExample +.. com.welab.fund.mode.FundFtImportDataExample$GeneratedCriteria
com.welab.fund.mode.FundFtImportDataExample +.. com.welab.fund.mode.FundFtImportDataExample$Criterion
com.welab.fund.mode.FundFtImportDataExample +.. com.welab.fund.mode.FundFtImportDataExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundFtImportDataExample$Criteria
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.transfer.CallBackTest
java.io.Serializable <|.. com.welab.fund.dto.request.FundTradingDTO
com.welab.fund.app.manager.match.AbstractFundMatchRuleManager <|-- com.welab.fund.app.manager.match.FundMatchAdminRuleManager
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.RefundBCAJob
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.app.impl.FundAccountDubboServiceImplTest
com.welab.fund.mode.RefundDetail <|-- com.welab.fund.mode.ext.RefundDetailExt
com.welab.fund.configuration.fundbase.autoconfigure.FilterAutoConfiguration +.. com.welab.fund.configuration.fundbase.autoconfigure.FilterAutoConfiguration$ArgumentResolverAutoConfiguration
com.welab.fund.configuration.fundbase.autoconfigure.WebMvcConfigurerAdapter <|-- com.welab.fund.configuration.fundbase.autoconfigure.FilterAutoConfiguration$ArgumentResolverAutoConfiguration
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.QLTest
com.welab.fund.test.SimpleTest <|-- com.welab.fund.app.command.batchcode.FundTasticRepaymentTest
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.facade.CmsgServiceTest
com.welab.fund.app.service.fundaccount.AbstractFundAccountLocalService <|-- com.welab.fund.app.service.fundaccount.MinusLoansAccount
com.welab.fund.mode.RefundDetailExample +.. com.welab.fund.mode.RefundDetailExample$GeneratedCriteria
com.welab.fund.mode.RefundDetailExample +.. com.welab.fund.mode.RefundDetailExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.RefundDetailExample$Criteria
com.welab.fund.mode.RefundDetailExample +.. com.welab.fund.mode.RefundDetailExample$Criterion
com.welab.fund.mode.FundBatchcodeAccount <|-- com.welab.fund.mode.ext.FundBatchcodeAccountExt
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.RefundByNextDayJob
com.welab.fund.app.service.fundaccount.AbstractFundAccountLocalService <|-- com.welab.fund.app.service.fundaccount.AddRepaymentAccount
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.TransferRechargeJob
java.io.Serializable <|.. com.welab.fund.dto.FundTasticRollbackLoansCmd
com.welab.fund.utils.TraversingUtils <|-- com.welab.fund.utils.CountDownLatchUtils
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.SendRefundEmailJob
java.io.Serializable <|.. com.welab.fund.dto.response.FundAccountDTO
java.io.Serializable <|.. com.welab.fund.dto.response.TopupNotificationsResDTO
com.welab.fund.common.Urls +.. com.welab.fund.common.Urls$OJK
com.welab.fund.common.Urls +.. com.welab.fund.common.Urls$FundAccountManagerURL
com.welab.fund.common.Urls +.. com.welab.fund.common.Urls$FundManagerURL
com.welab.fund.common.Urls +.. com.welab.fund.common.Urls$FuncConfigURL
com.welab.fund.common.Urls +.. com.welab.fund.common.Urls$FundMatchRuleURL
com.welab.fund.common.Urls +.. com.welab.fund.common.Urls$RefundJobURL
com.welab.fund.common.Urls +.. com.welab.fund.common.Urls$FundTasticURL
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.TransferBCAJob
java.io.Serializable <|.. com.welab.fund.dto.FundAccountInfoDTO
com.welab.fund.mode.FundAccount <|-- com.welab.fund.mode.ext.FundAccountExt
com.welab.fund.mode.FundManager <|-- com.welab.fund.mode.ext.FundManagerExt
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.refund.RefundCallback
com.welab.fund.mode.FundBaseInfo <|-- com.welab.fund.mode.ext.FundBaseInfoExt
java.io.Serializable <|.. com.welab.fund.dto.request.FundTasticRequestDTO
com.welab.fund.mode.FundFtImportData <|-- com.welab.fund.mode.ext.FundFtImportDataExt
com.welab.fund.mode.FundBatchcodeAccountExample +.. com.welab.fund.mode.FundBatchcodeAccountExample$GeneratedCriteria
com.welab.fund.mode.FundBatchcodeAccountExample +.. com.welab.fund.mode.FundBatchcodeAccountExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundBatchcodeAccountExample$Criteria
com.welab.fund.mode.FundBatchcodeAccountExample +.. com.welab.fund.mode.FundBatchcodeAccountExample$Criterion
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.mq.MQTest
org.springframework.context.ApplicationContextAware <|.. com.welab.fund.app.BeanfactoryUtils
org.springframework.web.servlet.handler.HandlerInterceptorAdapter <|-- com.welab.fund.configuration.fundbase.auth.FundBaseAuthenticateIntercept
com.welab.fund.mode.FundManagerExample +.. com.welab.fund.mode.FundManagerExample$GeneratedCriteria
com.welab.fund.mode.FundManagerExample +.. com.welab.fund.mode.FundManagerExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundManagerExample$Criteria
com.welab.fund.mode.FundManagerExample +.. com.welab.fund.mode.FundManagerExample$Criterion
com.welab.fund.vo.request.FundConfigVo <|-- com.welab.fund.vo.response.FundConfigResponseVo
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.fundInfo.FundInfoTest
com.welab.fund.mapper.FundTradingQueueMapper <|-- com.welab.fund.mapper.FundTradingQueueExtMapper
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.addLoans.FundLoansTest
com.welab.fund.mode.FtTopupRecordExample +.. com.welab.fund.mode.FtTopupRecordExample$GeneratedCriteria
com.welab.fund.mode.FtTopupRecordExample +.. com.welab.fund.mode.FtTopupRecordExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FtTopupRecordExample$Criteria
com.welab.fund.mode.FtTopupRecordExample +.. com.welab.fund.mode.FtTopupRecordExample$Criterion
com.welab.fund.app.manager.match.AbstractFundMatchRuleManager <|-- com.welab.fund.app.manager.match.FundMatchNormalRuleManager
java.io.Serializable <|.. com.welab.fund.dto.TopupNotificationsCmd
com.welab.fund.test.SimpleTest <|-- com.welab.fund.file.FileTest
java.io.Serializable <|.. com.welab.fund.dto.FundLoansDTO
com.welab.fund.service.FundAccountInfoService <|.. com.welab.fund.app.impl.FundAccountDubboServiceImpl
java.io.Serializable <|.. com.welab.fund.dto.FundTasticRechargeNotifyCmd
java.io.Serializable <|.. com.welab.fund.dto.request.PageRequestDTO
com.welab.fund.mode.RetracementPlanExample +.. com.welab.fund.mode.RetracementPlanExample$GeneratedCriteria
com.welab.fund.mode.RetracementPlanExample +.. com.welab.fund.mode.RetracementPlanExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.RetracementPlanExample$Criteria
com.welab.fund.mode.RetracementPlanExample +.. com.welab.fund.mode.RetracementPlanExample$Criterion
org.springframework.web.method.support.HandlerMethodArgumentResolver <|.. com.welab.fund.configuration.fundbase.handler.FundBaseIdMethodArgumentResolver
com.welab.fund.app.manager.match.FundMatchRuleManagerI <|.. com.welab.fund.app.manager.match.AbstractFundMatchRuleManager
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.ScaffoldTest
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.RefundJob
com.welab.fund.mode.FundLoansExample +.. com.welab.fund.mode.FundLoansExample$GeneratedCriteria
com.welab.fund.mode.FundLoansExample +.. com.welab.fund.mode.FundLoansExample$Criterion
com.welab.fund.mode.FundLoansExample +.. com.welab.fund.mode.FundLoansExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundLoansExample$Criteria
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.job.SendRefundEmailJobTest
com.welab.fund.vo.request.FundManagerVo <|-- com.welab.fund.vo.response.FundManagerResponseVo
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.FundtasticRechargeReportJob
com.welab.fund.mode.FundTrading <|-- com.welab.fund.mode.ext.FundTradingExtend
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.FundTest
com.welab.fund.app.service.recharge_refund.RechargeAndRefundService <|.. com.welab.fund.app.service.recharge_refund.ProportionRecAndRefServiceImpl
com.welab.fund.app.service.loans_repayment.AbstractLoansAndRepaymentService <|-- com.welab.fund.app.service.loans_repayment.BNIServiceImpl
com.welab.fund.utils.TraversingUtils +.. com.welab.fund.utils.TraversingUtils$TraversingFunction
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.FundtasticBatchcodeUpdateJob
com.welab.fund.mode.FundBatchcodeAccountFlowExample +.. com.welab.fund.mode.FundBatchcodeAccountFlowExample$GeneratedCriteria
com.welab.fund.mode.FundBatchcodeAccountFlowExample +.. com.welab.fund.mode.FundBatchcodeAccountFlowExample$Criterion
com.welab.fund.mode.FundBatchcodeAccountFlowExample +.. com.welab.fund.mode.FundBatchcodeAccountFlowExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundBatchcodeAccountFlowExample$Criteria
com.welab.sea.util.dto.DTO <|-- com.welab.fund.dto.response.DisbursementsFundAccountDTO
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.MqResendJob
com.welab.fund.app.service.fundaccount.AbstractFundAccountLocalService <|-- com.welab.fund.app.service.fundaccount.MinusRepaymentAccount
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.SynchronousAccountAmountTrackJob
com.welab.fund.mode.FundMatchRuleExample +.. com.welab.fund.mode.FundMatchRuleExample$GeneratedCriteria
com.welab.fund.mode.FundMatchRuleExample +.. com.welab.fund.mode.FundMatchRuleExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundMatchRuleExample$Criteria
com.welab.fund.mode.FundMatchRuleExample +.. com.welab.fund.mode.FundMatchRuleExample$Criterion
com.welab.fund.mode.FundLoanMatchBatchcodeExample +.. com.welab.fund.mode.FundLoanMatchBatchcodeExample$GeneratedCriteria
com.welab.fund.mode.FundLoanMatchBatchcodeExample +.. com.welab.fund.mode.FundLoanMatchBatchcodeExample$Criterion
com.welab.fund.mode.FundLoanMatchBatchcodeExample +.. com.welab.fund.mode.FundLoanMatchBatchcodeExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundLoanMatchBatchcodeExample$Criteria
com.welab.fund.test.SimpleTest <|-- com.welab.fund.test.matchrule.FundMatchRuleTest
com.welab.fund.mode.FundAccountExample +.. com.welab.fund.mode.FundAccountExample$GeneratedCriteria
com.welab.fund.mode.FundAccountExample +.. com.welab.fund.mode.FundAccountExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.FundAccountExample$Criteria
com.welab.fund.mode.FundAccountExample +.. com.welab.fund.mode.FundAccountExample$Criterion
com.welab.fund.mq.FundQueue +.. com.welab.fund.mq.FundQueue$OutStream
com.welab.fund.mq.FundQueue +.. com.welab.fund.mq.FundQueue$InStream
com.welab.fund.app.service.loans_repayment.AbstractLoansAndRepaymentService <|-- com.welab.fund.app.service.loans_repayment.PERMATAServiceImpl
com.welab.fund.mode.FundLoans <|-- com.welab.fund.mode.ext.FundLoansExt
com.welab.fund.mode.RetracementTradingReocrdExample +.. com.welab.fund.mode.RetracementTradingReocrdExample$GeneratedCriteria
com.welab.fund.mode.RetracementTradingReocrdExample +.. com.welab.fund.mode.RetracementTradingReocrdExample$Criteria
com.welab.fund.mode.GeneratedCriteria <|-- com.welab.fund.mode.RetracementTradingReocrdExample$Criteria
com.welab.fund.mode.RetracementTradingReocrdExample +.. com.welab.fund.mode.RetracementTradingReocrdExample$Criterion
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.fund.job.RefundFIFJob
java.io.Serializable <|.. com.welab.fund.dto.response.FundOutInputAccountDTO
@enduml