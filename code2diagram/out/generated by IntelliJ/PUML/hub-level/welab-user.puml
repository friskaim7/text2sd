@startuml
enum com.welab.user.enmu.OrgIdEnum {
+  MAUCASH
+  ADMIN_SYSTEM
+  MAUCASH_BRANCHES
+  PAY_LATE_MERCHANT
+  COLLECTION_FC
+  SPEKTRA
+  FIF_INSIGHT
+  TAPP
+  HSO_AHASS
+  AOP_TOKO
+  TRIO_AHASS
+  GUDANG_ADA
+  DAYA
+  SMP
+  UVF
+  RESOCK
+  MAUMODAL
- String typeName
- Long orgId
- {static} List<Long> PRODUCTIVE_USER_ORGIDS
- <<Create>> OrgIdEnum(String,Long)
+ {static} Boolean checkSwitch(Long)
+ {static} List<Long> getProductiveUserOrgIds()
+ Long getOrgId()
+ String getTypeName()
}
class com.welab.user.model.Button {
- Long id
- Long orgId
- String butName
- String description
- String platform
- Boolean enabled
- Date createdAt
- Date updatedAt
+ <<Create>> Button(String,String)
}
class com.welab.user.vo.UpdatePwdVO {
- String mobile
- SmsCodeDTO smsCode
- String checkId
- String passwd
}
class com.welab.user.app.base.BaseAdminLoginTrack {
- AdminLoginTrackMapper adminLoginTrackMapper
+ Long login(Long,String)
+ int loginOut(Long)
}
class com.welab.user.dto.MsgDTO {
- {static} long serialVersionUID
- String mobile
- Long orgId
- Byte channelType
- String sourceId
}
class com.welab.user.app.command.user.UserRegisterNumberExe {
- JedisCluster jedisCluster
- BaseUserInfoService baseUserInfoService
- {static} String PREFIX
+ void init()
+ Integer getRegisterNumber(Long)
+ void incr(Long)
}
class com.welab.user.service.impl.UserPinServiceImpl {
- BaseUserPinService baseUserPinService
- BaseUserInfoService baseUserInfoService
- UserInfoService userInfoService
- UpdatePwdManager updatePwdManager
+ Response<String> getLoginType(UserPinDTO)
+ Response<Boolean> addLoginPin(UserPasswordDTO)
+ Response<Boolean> putLoginPinBySMS(UserBaseDTO)
+ Response<Boolean> updatePasswordByOldPwd(UserPasswordDTO)
+ Response<Boolean> updatePasswordByUserId(UpdateUserPasswordDTO)
+ Response<Boolean> checkPinStateByUserId(Long)
+ Response<Boolean> putPinState(UserPinStateDTO)
+ Response<Boolean> putFingerprintState(UserPinStateDTO)
+ Response<String> getSmsKey(UserBaseDTO)
+ Response<Boolean> putLoginPinBySMSKey(UserBaseDTO)
+ Response<Boolean> checkUserPin(UserPinCheckDTO)
}
interface com.welab.user.mapper.UserCertMapper {
~ int deleteByUserId(Long)
~ int insert(UserCert)
~ UserCert selectByPrimaryKey(Long)
~ int updateByPrimaryKey(UserCert)
~ UserCert selectByCertTypeAndCertCode(Long,Byte,String)
~ int updateStatusByUserId(Long,Long)
}
class com.welab.user.test.app.service.ButtonServiceTest {
- ButtonService buttonService
- {static} Long BUTTON_ID
+ void listMyButtons()
+ void page()
+ void test_01_01_saveButton()
+ void test_01_02_saveButton()
+ void test_01_03_deleteButton()
}
class com.welab.user.test.app.verify.FifCodeVerifyServiceMockTest {
- FifCodeVerifyService fifCodeVerifyService
- BaseUserInfoService baseUserInfoService
- FifUserDataServiceFacade fifUserDataServiceFacade
+ void setUp()
+ void verify()
}
class com.welab.user.model.AdminRole {
- Long id
- Long adminId
- Long roleId
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getAdminId()
+ void setAdminId(Long)
+ Long getRoleId()
+ void setRoleId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String toString()
}
enum com.welab.user.enmu.UserLoginTypeEnum {
+  PIN
+  OTP
+  FACEBOOK
+  GOOGLE
- String value
- String name
- <<Create>> UserLoginTypeEnum(String,String)
+ String getValue()
+ String getName()
+ {static} UserLoginTypeEnum getType(String)
}
enum com.welab.user.enmu.PermissionsTypeEnum {
+  URL
+  BUTTON
- String value
- String name
- <<Create>> PermissionsTypeEnum(String,String)
+ String getValue()
+ String getName()
+ {static} PermissionsTypeEnum getType(String)
}
class com.welab.user.app.base.BaseDevicesService {
- DevicesExtMapper devicesMapper
- IpStackManager ipStackManager
- void addDeviceInfo(UserDeviceInfoDTO)
+ void addDeviceInfo(UserBaseDTO)
+ Integer updateDevices(Devices)
+ List<DevicesDTO> getDevicesContInfo(Long,int,boolean)
+ Integer updateStateById(Integer,Long)
+ Integer updateStateByWdDeviceId(Integer,Long,String)
+ PageInfo<UserDevicesDTO> getPageUserDevicesDTOByUserId(Long,Integer,int,int)
+ Devices getDevices(Long,String,String)
+ Devices getDevicesById(Long)
+ int getDevicesState(Long,String,String)
+ int countUserWhitelisttDevices(Long)
+ List<Devices> selectByParams(DevicesDTO)
+ List<Devices> selectByParamsSortByUpdateAt(DevicesDTO)
+ Devices getLatestOneByParams(DevicesDTO)
}
class com.welab.user.app.command.user.UserLoginExe {
- LoginMethodConfiguration loginMethodConfiguration
- BaseUserInfoService baseUserInfoService
- BaseDevicesService baseDevicesService
- BasePasswordChangeService basePasswordChangeService
- UserRelatedInfoServiceFacade userRelatedInfoServiceFacade
- UserTrackServiceFacade userTrackServiceFacade
- AppTokenServiceFacade appTokenServiceFacade
- UserTokenExe userTokenExe
- UserRegisterExe userRegisterExe
- DubboAdminServiceImpl dubboAdminService
- UserDecicesVerifyService userDecicesVerifyService
- BaseAdminLoginTrack adminLoginTrack
- BackstageConfigServiceFacade backstageConfigServiceFacade
- BaseAdminProductAuthService baseAdminProductAuthService
- MqProducer mqProducer
- MaumodalServiceFacade maumodalServiceFacade
- UserProfilesServiceFacade userProfilesServiceFacade
+ Response<UserLoginResponseVo> userLogin(UserLoginDTO)
- void sendAidNotify(UserInfo,boolean)
- void processIp(Long,String,String)
- UserLoginResponseVo getUserLoginResponse(UserInfo)
- String getLoginType(UserBaseDTO)
- void setDeviceLoginType(UserBaseDTO,String)
}
interface com.welab.user.mapper.OrgTypeMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(OrgType)
~ int insertSelective(OrgType)
~ OrgType selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(OrgType)
~ int updateByPrimaryKey(OrgType)
~ Integer countByModelSelective(OrgType,boolean)
~ Integer deleteByModelSelective(OrgType,boolean)
~ Integer updateByModelSelective(OrgType,boolean,OrgType)
~ OrgType selectByModelSelective(OrgType,boolean)
}
class com.welab.user.controller.v1.UserController {
- Logger LOG
- UserService userService
- UserInfoService userInfoService
- UserTokenServiceImpl userTokenService
- BaseUserPinService baseUserPinService
- DubboAdminServiceImpl adminService
- UserLoginExe userLoginExe
- InviterMgmServiceFacade inviterMgmServiceFacade
- String GOOGLE_RECAPTCHA_SECRET
- Double GOOGLE_RECAPTCHA_SCORE
- String SERVER_ENV
- {static} String PREFIX
+ Response<String> getLoginType(String,Long)
+ Response<UserLoginResponseVo> userLogin(UserLoginDTO,String,Long,String,String,String,String)
+ Response<InviterMgmRspVO> invitationBinding(UserLoginDTO,String,Long,String,String,String)
+ Response<Boolean> checkMobileExists(String,Long)
+ Response updatePasswordBySms(UserBaseDTO,Long)
+ Response checkSmsVcode(UpdatePwdVO,Long)
+ Response updatePwdByVcode(UpdatePwdVO,Long)
+ Response updatePasswordByOldPwd(UserPasswordDTO,Long,Long)
+ Response addPwd(UserPasswordDTO,Long,Long)
+ Response<Boolean> getPinState(Long)
+ Response putPinState(UserPin,Long)
+ Response putFingerprintState(UserPin,Long)
+ Response userLogout(String,Long,Long)
+ Response<Long> sendSmsCode(Long,String,Byte,String,String)
+ Response<Long> sendSmsCode(SendSmsReqVo,Long,String)
+ Response<Long> sendSmsCodeByUser(String,Long,Byte,String)
+ Response<UserInfoDTO> getUserInfo(Long)
+ Response updateGoogleInfo(Long,Long,UserGoogleInfoDTO)
}
interface com.welab.user.mapper.RolesMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(Roles)
~ int insertSelective(Roles)
~ Roles selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(Roles)
~ int updateByPrimaryKey(Roles)
~ List<Roles> selectByRoles(Roles)
~ List<Roles> selectByAdminId(Long)
}
class com.welab.user.vo.DevicesVO {
- {static} long serialVersionUID
- Long id
- Long orgId
- Long userId
- String appVersion
- String osVersion
- String brand
- String model
- String simCardNumber
- String platform
- String deviceId
- String promoCode
- String wdDeviceId
- Integer deviceState
- String ip
- String location
- String loginType
- Date createdAt
}
class com.welab.user.app.facade.application.UserTrackServiceFacade {
- UserTrackService userTrackService
+ void saveUserTrack(UserInfo,UserLoginDTO)
}
class com.welab.user.app.facade.application.UserProfilesServiceFacade {
- UserProfilesService userProfilesService
+ UserProfileVO getUserProfilesSimpleByUserId(Long)
}
interface com.welab.user.mapper.TemporaryLoginInfoMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(TemporaryLoginInfo)
~ int insertSelective(TemporaryLoginInfo)
~ TemporaryLoginInfo selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(TemporaryLoginInfo)
~ int updateStateByPrimaryKey(TemporaryLoginInfo)
~ TemporaryLoginInfo selectByAccessToken(String)
}
class com.welab.user.app.base.BaseUserInfoService {
- UserInfoMapper userInfoMapper
- UserInfoExtMapper userInfoExtMapper
+ List<UserInfo> getUserInfo(List<Long>)
+ UserInfo getUserInfo(Long)
+ UserInfo getUserInfo(String,Long)
+ UserInfo getTbUserInfo(String,Long)
+ List<UserInfoDTO> getUserInfo(UserInfoRequestVo)
+ List<UserInfoDTO> getUserInfoByMobileHalfLike(UserInfoRequestVo)
+ UserInfo getUserInfoByAdminName(String,Long)
+ Integer updateUser(UserInfo)
+ Integer updateUser(Long,String)
+ Integer countRegisteredNum(Long)
+ Integer getRegisteredNum(UserRegisteredCountVo)
+ List<Long> getRegisteredUserIds(UserRegisteredCountVo)
+ void addUser(UserInfo)
+ int deleteUserByUserId(Long,Long)
+ List<Long> findUserIds(Date,Date)
+ List<UserInfo> listUserInfoByMobile(List<String>,Integer)
+ List<Long> getOrgIdByUser(String,String,List<Long>)
}
class com.welab.user.model.RefuseRegister {
- Long id
- String mobile
- Long orgId
- Date createdAt
+ Long getId()
+ void setId(Long)
+ String getMobile()
+ void setMobile(String)
+ Long getOrgId()
+ void setOrgId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
}
class com.welab.user.dto.DevicesDTO {
- {static} long serialVersionUID
- String brand
- Integer count
- String wdDeviceId
- String deviceId
- String beginTime
- Long userId
}
class com.welab.user.test.app.verify.FifUserCommon {
# {static} String USER_MOBILE
# {static} String USER_CODE
+ {static} UserLoginDTO getFIFUserLoginDTO(String)
+ {static} FifUserBaseInfoVO getFifUserBaseInfoVO(int)
}
class com.welab.user.test.app.base.BaseUserCertServiceTest {
- BaseUserCertService baseUserCertService
- {static} Long CERT_ID
- {static} String CERT_CODE
+ void test_01_addUserCert()
+ void test_02_userCertBinding()
}
class com.welab.user.model.AdminLoginTrack {
- Long id
- Long userId
- Date loginTime
- Date loginOutTime
- String loginPlatform
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ Date getLoginTime()
+ void setLoginTime(Date)
+ Date getLoginOutTime()
+ void setLoginOutTime(Date)
+ String getLoginPlatform()
+ void setLoginPlatform(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.user.test.app.service.MenuServiceTest {
- MenuService menuService
- ProductMenusRelService productMenusRelService
- {static} Long P_MENU_ID
- {static} Long S_MENU_ID
+ void getMenuList()
+ void getMyMenus()
+ void test_01_01_addMenu()
+ void test_01_02_addMenu()
+ void test_01_03_updateMenu()
+ void test_01_04_deleteMenu()
+ void test_01_05_deleteMenu()
+ void saveProductMenusRel()
}
class com.welab.user.dto.UserPinCheckDTO {
- {static} long serialVersionUID
- Long userId
- String passwd
}
class com.welab.user.test.app.service.RoleServiceTest {
- RoleService roleService
- {static} Long ROLE_ID
+ void getRoleList()
+ void getRolePage()
+ void test_01_01_addRoles()
+ void test_01_02_getRoleByRoleId()
+ void test_02_01_updateRoleState()
}
class com.welab.user.dto.UserPinDTO {
- {static} long serialVersionUID
- String mobile
- Long orgId
}
class com.welab.user.app.base.BaseAdminProductAuthService {
- AdminProductAuthMapper adminProductAuthMapper
+ void inserts(Long,List<String>)
+ List<String> getProductCodeByUserId(Long)
}
class com.welab.user.vo.TokenInfo {
- {static} long serialVersionUID
- String token
- Long userId
- Long orgId
- String mobile
- String appId
- String deviceCode
- String origin
- Integer userType
- Date expireTime
}
class com.welab.user.model.AdminProductAuthExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> AdminProductAuthExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.user.model.AdminProductAuthExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andUserIdIsNull()
+ Criteria andUserIdIsNotNull()
+ Criteria andUserIdEqualTo(Long)
+ Criteria andUserIdNotEqualTo(Long)
+ Criteria andUserIdGreaterThan(Long)
+ Criteria andUserIdGreaterThanOrEqualTo(Long)
+ Criteria andUserIdLessThan(Long)
+ Criteria andUserIdLessThanOrEqualTo(Long)
+ Criteria andUserIdIn(List<Long>)
+ Criteria andUserIdNotIn(List<Long>)
+ Criteria andUserIdBetween(Long,Long)
+ Criteria andUserIdNotBetween(Long,Long)
+ Criteria andProductCodeIsNull()
+ Criteria andProductCodeIsNotNull()
+ Criteria andProductCodeEqualTo(String)
+ Criteria andProductCodeNotEqualTo(String)
+ Criteria andProductCodeGreaterThan(String)
+ Criteria andProductCodeGreaterThanOrEqualTo(String)
+ Criteria andProductCodeLessThan(String)
+ Criteria andProductCodeLessThanOrEqualTo(String)
+ Criteria andProductCodeLike(String)
+ Criteria andProductCodeNotLike(String)
+ Criteria andProductCodeIn(List<String>)
+ Criteria andProductCodeNotIn(List<String>)
+ Criteria andProductCodeBetween(String,String)
+ Criteria andProductCodeNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.user.model.AdminProductAuthExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.user.model.AdminProductAuthExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
interface com.welab.user.mapper.UserInfoMapper {
~ int insert(UserInfo)
~ UserInfo selectByPrimaryKey(Long)
~ List<UserInfo> selectByPrimaryKeys(List<Long>)
~ UserInfo selectByMobile(String,Long)
~ List<Long> selectOrgIdByMobileAndOrgIds(String,String,List<Long>)
~ UserInfo selectByAdminName(String,Long)
~ Integer updateByPrimaryKey(UserInfo)
~ List<UserInfoDTO> selectByUserInfoRequestVo(UserInfoRequestVo)
~ List<UserInfoDTO> selectUserInfoByMobileHalfLike(UserInfoRequestVo)
~ int selectCountUserRegistered(Date,Date,Long)
~ List<Long> selectRegisteredUserId(Date,Date,Long)
~ Integer updateByMobile(Long,String)
~ int deleteUserByUserId(Long,Long)
}
class com.welab.user.vo.RoleReqVo {
- {static} long serialVersionUID
- Long roleId
- Long[] permissionIds
- Long[] menuIds
- Long[] buttonIds
+ Long getRoleId()
+ void setRoleId(Long)
+ Long[] getPermissionIds()
+ void setPermissionIds(Long[])
+ Long[] getMenuIds()
+ void setMenuIds(Long[])
+ Long[] getButtonIds()
+ void setButtonIds(Long[])
}
class com.welab.user.app.service.MenuService {
- MenusMapper menusMapper
- ProductMenusRelService productMenusRelService
+ Response<List<Menus>> getMyMenus(Long,String,String)
+ Response<List<Menus>> getMenuList(Menus)
+ Response<Menus> getMenuById(Long)
+ Response<Menus> addOrUpdateMenu(Menus)
+ Response deleteMenu(Long)
- void checkMenu(Menus)
}
class com.welab.user.app.base.BasePinBlacklistService {
- PinBlacklistMapper pinBlacklistMapper
+ List<String> getPins()
+ int adds(List<String>)
+ int deleteAll()
}
class com.welab.user.Application {
- {static} Logger LOG
+ {static} void main(String[])
}
class com.welab.user.model.OrgOrganization {
- Long id
- String orgName
- String orgCode
- Long parentOrgId
- String telephone
- String email
- String orgWebsite
- String legalPerson
- String street
- String description
- Boolean status
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getOrgName()
+ void setOrgName(String)
+ String getOrgCode()
+ void setOrgCode(String)
+ Long getParentOrgId()
+ void setParentOrgId(Long)
+ String getTelephone()
+ void setTelephone(String)
+ String getEmail()
+ void setEmail(String)
+ String getOrgWebsite()
+ void setOrgWebsite(String)
+ String getLegalPerson()
+ void setLegalPerson(String)
+ String getStreet()
+ void setStreet(String)
+ String getDescription()
+ void setDescription(String)
+ Boolean getStatus()
+ void setStatus(Boolean)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String toString()
}
class com.welab.user.app.base.BaseUserPinService {
- UserPinMapper userPinMapper
+ UserPin getUserPin(Long)
+ Boolean checkPinState(Long)
+ void addUserPin(Long,boolean)
+ void addUserPin(UserPin)
+ void addPinStateByUpdatePwd(Long,Long)
+ void putPinState(Long,boolean)
+ void putFingerprintState(Long,boolean)
}
interface com.welab.user.mapper.AdminRoleMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(AdminRole)
~ int insertSelective(AdminRole)
~ AdminRole selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(AdminRole)
~ int updateByPrimaryKey(AdminRole)
~ int deleteByAdminId(Long)
~ int inserts(List<AdminRole>)
~ List<Long> selectUserIdByRoleId(Long)
}
class com.welab.user.dto.DeviceConfirmEmailDTO {
- String toUserEmail
- String customerName
- String deviceModel
- String timestamp
- String location
- String ipAddress
- String callBackUrl
}
class com.welab.user.ConfigConsts {
+ {static} int LOGIN_FAILURE_LIMIT
+ {static} int LOGIN_FAILURE_TIME
+ {static} String APPLICATION_IP_INFO_PROCESS
+ {static} String APPLICATION_AID_MSG_NOTIFY
}
interface com.welab.user.common.Urls {
~ String ROOT
~ String ROOT_USER_TOKEN_DESC
~ String ROOT_USER_DESC
~ String ROOT_ROLE_DESC
~ String ROOT_PERMISSIONS_DESC
~ String ROOT_MENU_DESC
~ String ROOT_ADMIN_DESC
~ String ROOT_TEMPORARYLOGININFO_DESC
~ String ROOT_ADDRESSEE_WHITE_LIST_DESC
~ String ROOT_PIN_BLACKLIST_DESC
~ String ROOT_BUTTON_DESC
~ String V1
~ String V3
~ String V3_NOAUTH
~ String V3_AUTH
}
interface com.welab.user.common.Urls$User {
~ String V1_USER_LOGIN
~ String V1_USER_LOGIN_DESC
~ String V1_INVITATION_BINDING
~ String V1_INVITATION_BINDING_DESC
~ String V1_UPDATE_GOOGLE_INFO
~ String V1_UPDATE_GOOGLE_INFO_DESC
~ String V1_CKECK_MOBILE_EXISTS
~ String V1_CKECK_MOBILE_EXISTS_DESC
~ String V1_USER_LOGOUT
~ String V1_USER_LOGOUT_DESC
~ String V1_SEND_SMS_CODE
~ String V1_SEND_SMS_CODE_DESC
~ String V1_SEND_SMS_CODE_BY_USER
~ String V1_SEND_SMS_CODE_BY_USER_DESC
~ String V1_USER_LOGIN_PASSWORD_BYSMS
~ String V1_USER_LOGIN_PASSWORD_BYSMS_DESC
~ String V1_CHECK_SMS_VCODE
~ String V1_CHECK_SMS_VCODE_DESC
~ String V1_CHECK_SMS_VCODE_FOR_UPDATED_PASSWORD
~ String V1_CHECK_SMS_VCODE_FOR_UPDATED_PASSWORD_DESC
~ String V1_USER_INFO
~ String V1_USER_INFO_DESC
~ String V1_USER_UPDATE_PWD_BY_OLDPWD
~ String V1_USER_UPDATE_PWD_BY_OLDPWD_DESC
~ String V1_PIN
~ String V1_USER_UPDATE_PWD
~ String V1_USER_UPDATE_PWD_DESC
~ String V1_USER_PWD_STATE
~ String V1_USER_PWD_STATE_DESC
~ String V1_USER_PUT_PWD_STATE_DESC
~ String V1_USER_PUT_FINGERPRINT_STATE
~ String V1_USER_PUT_FINGERPRINT_STATE_DESC
~ String V1_USER_LOGIN_TYPE
~ String V1_USER_LOGIN_TYPE_DESC
~ String V3_USER_LOGIN
~ String V3_USER_LOGIN_DESC
~ String V3_PRODUCTIVE
~ String V3_PRODUCTIVE_DESC
~ String V3_USER_LOGOUT
~ String V3_USER_LOGOUT_DESC
~ String V3_NOAUTH_INVITATION_BINDING
~ String V3_NOAUTH_INVITATION_BINDING_DESC
~ String V3_USER_SWITCH_PRODUCT
~ String V3_USER_SWITCH_PRODUCT_DESC
~ String V3_USER_PRODUCT_TYPE
~ String V3_USER_PRODUCT_TYPE_DESC
}
interface com.welab.user.common.Urls$UserToken {
~ String V3_NOAUTH_GET_TOKEN
~ String V3_NOAUTH_GET_TOKEN_DESC
}
interface com.welab.user.common.Urls$Permissions {
~ String V1_PERMISSIONS
~ String V1_CHECK_URL
~ String V1_CHECK_URL_DESC
~ String V1_PERMISSIONS_LIST
~ String V1_PERMISSIONS_LIST_DESC
}
interface com.welab.user.common.Urls$Menu {
~ String V1_MENU
~ String V1_MENU_LIST
~ String V1_MENU_LIST_DESC
~ String V1_MY_MENU
~ String V1_MY_MENU_DESC
~ String V1_MENU_INFO
~ String V1_MENU_INFO_DESC
~ String V1_MENU_MODIFY_INFO
~ String V1_MENU_MODIFY_INFO_DESC
~ String V1_MENU_DELETE
~ String V1_MENU_DELETE_DESC
~ String V1_MENU_SAVE_PRODUCT_REL
~ String V1_MENU_SAVE_PRODUCT_REL_DESC
~ String V1_MENU_QUERY_PRODUCT_REL
~ String V1_MENU_QUERY_PRODUCT_REL_DESC
}
interface com.welab.user.common.Urls$Button {
~ String V1_BUTTON_
~ String V1_BUTTON_PAGE
~ String V1_BUTTON_PAGE_DESC
~ String V1_BUTTON_MY
~ String V1_BUTTON_MY_DESC
~ String V3_BUTTON_MY
~ String V1_BUTTON_SAVE
~ String V1_BUTTON_SAVE_DESC
~ String V1_BUTTON_DELETE
~ String V1_BUTTON_DELETE_DESC
~ String V1_BUTTON_INFO
~ String V1_BUTTON_INFO_DESC
}
interface com.welab.user.common.Urls$Admin {
~ String V1_ADMIN
~ String V3_AUTH_ADMIN
~ String V3_ADMIN
~ String V3_ADMIN_DESC
~ String V3_ADMIN_TAGE
~ String V1_ADMIN_LIST
~ String V1_ADMIN_LIST_DESC
~ String V1_ADMIN_PAGE
~ String V1_ADMIN_PAGE_DESC
~ String V1_ADMIN_INFO
~ String V1_ADMIN_INFO_DESC
~ String V1_ADMIN_MODIFY_INFO
~ String V1_ADMIN_MODIFY_INFO_DESC
~ String V1_ADMIN_MODIFY_ROLE
~ String V1_ADMIN_MODIFY_ROLE_DESC
~ String V1_ADMIN_MODIFY_STATE
~ String V1_ADMIN_MODIFY_STATE_DESC
~ String V1_ADMIN_PRODUCT_CODE
~ String V1_ADMIN_PRODUCT_CODE_DESC
~ String V1_ADMIN_ACTIVE
~ String V1_ADMIN_ACTIVE_DESC
~ String V3_ADMIN_LAST_ACTIVE
~ String V3_ADMIN_LAST_ACTIVE_DESC
~ String V3_ADMIN_PRODUCT_CODE
~ String V3_ADMIN_PRODUCT_CODE_DESC
}
interface com.welab.user.common.Urls$Role {
~ String V1_ROLE
~ String V1_ROLE_LIST
~ String V1_ROLE_LIST_DESC
~ String V1_ROLE_PAGE
~ String V1_ROLE_PAGE_DESC
~ String V1_ROLE_INFO
~ String V1_ROLE_INFO_DESC
~ String V1_ROLE_MODIFY_INFO
~ String V1_ROLE_MODIFY_INFO_DESC
~ String V1_ROLE_MODIFY_MENU
~ String V1_ROLE_MODIFY_MENU_DESC
~ String V1_ROLE_MODIFY_PERMISSIONS
~ String V1_ROLE_MODIFY_PERMISSIONS_DESC
~ String V1_ROLE_MODIFY_STATE
~ String V1_ROLE_MODIFY_STATE_DESC
~ String V1_ROLE_MODIFY_BUTTON
~ String V1_ROLE_MODIFY_BUTTON_DESC
}
interface com.welab.user.common.Urls$TemporaryLoginInfo {
~ String V1_TEMPORARY
~ String V1_TEMPORARY_INFO
~ String V1_TEMPORARY_INFO_DESC
~ String V1_TEMPORARY_CHECK_CODE
~ String V1_TEMPORARY_CHECK_CODE_DESC
~ String V1_TEMPORARY_SEND_EMAIL
~ String V1_TEMPORARY_SEND_EMAIL_DESC
}
interface com.welab.user.common.Urls$AddresseeWhiteList {
~ String V1_ADDRESSEEWHITELIST
~ String V1_GET_MOBILE_WHITE_LIST
~ String V1_GET_MOBILE_WHITE_LIST_DESC
~ String V1_UPDATE_MOBILE_WHITE_LIST
~ String V1_UPDATE_MOBILE_WHITE_LIST_DESC
~ String V1_GET_EMAIL_TASK_WHITE_LIST
~ String V1_GET_EMAIL_TASK_WHITE_LIST_DESC
~ String V1_UPDATE_EMAIL_TASK_WHITE_LIST
~ String V1_UPDATE_EMAIL_TASK_WHITE_LIST_DESC
~ String V3_AUTH_ADDRESSEEWHITELIST
~ String V3_AUTH_GET_MOBILE_WHITE_LIST
~ String V3_AUTH_GET_MOBILE_WHITE_LIST_DESC
~ String V3_AUTH_UPDATE_MOBILE_WHITE_LIST
~ String V3_AUTH_UPDATE_MOBILE_WHITE_LIST_DESC
~ String V3_AUTH_GET_EMAIL_TASK_WHITE_LIST
~ String V3_AUTH_GET_EMAIL_TASK_WHITE_LIST_DESC
~ String V3_AUTH_UPDATE_EMAIL_TASK_WHITE_LIST
~ String V3_AUTH_UPDATE_EMAIL_TASK_WHITE_LIST_DESC
}
interface com.welab.user.common.Urls$PinBlacklist {
~ String V1_PIN_BLACKLIST
~ String V1_PIN_BLACKLIST_GET_DESC
~ String V1_PIN_BLACKLIST_PUT_DESC
}
interface com.welab.user.mapper.RoleMenusMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(RoleMenus)
~ int insertSelective(RoleMenus)
~ RoleMenus selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(RoleMenus)
~ int updateByPrimaryKey(RoleMenus)
~ int deleteByRoleId(Long)
~ int inserts(List<RoleMenus>)
}
class com.welab.user.config.autoconfig.LoginMethodConfiguration {
- Map<String,List<VerifyService>> config
- MobileExistsVerifyService mobileExistsVerifyService
- MobileFormatVerifyService mobileFormatVerifyService
- OrgIdVerifyService orgIdVerifyService
- PasswordFormatVerifyService passwordFormatVerifyService
- PasswordVerifyService passwordVerifyService
- SmsCodeVerifyService smsCodeVerifyService
- InviterCodeVerifyService inviterCodeVerifyService
- FifUserRegVerifyService fifUserRegVerifyService
- FifCodeVerifyService fifCodeVerifyService
+ void init()
+ List<VerifyService> getVerifyService(String)
+ void loginVerify(UserBaseDTO,String)
}
class com.welab.user.model.RoleMenus {
- Long id
- Long roleId
- Long menuId
- Date createdAt
+ Long getId()
+ void setId(Long)
+ Long getRoleId()
+ void setRoleId(Long)
+ Long getMenuId()
+ void setMenuId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ String toString()
}
interface com.welab.user.mapper.ext.DevicesExtMapper {
~ List<Devices> selectByParams(DevicesDTO)
~ List<Devices> selectByParamsSortByUpdateAt(DevicesDTO)
~ Devices getLatestOneByParams(DevicesDTO)
}
enum com.welab.user.response.TokenCodeTypeEnum {
+  INTERNAL_ERROR
+  TOKEN_PARAMETER_EMPYT
+  TOKEN_CHECK_ERROR
+  SING_PARAMETER_EMPYT
+  SING_CHECK_ERROR
+  REQUEST_FREQUENT
- Integer code
- String message
- <<Create>> TokenCodeTypeEnum(Integer,String)
+ Integer getCode()
+ String getMessage()
}
class com.welab.user.app.mq.MqProducer {
- RabbitTemplate rabbitTemplate
- AmqpAdmin amqpAdmin
+ void sendQueue(String,String)
}
class com.welab.user.vo.TemporaryLoginRspVo {
- {static} long serialVersionUID
- String token
- String mobile
- String email
- Long userId
- Integer state
- String productCode
- Boolean passwordExpired
}
class com.welab.user.model.Devices {
- Long id
- Long orgId
- Long userId
- String appVersion
- String osVersion
- String brand
- String model
- String simCardNumber
- String platform
- String deviceId
- String promoCode
- Date createdAt
- String wdDeviceId
- Integer deviceState
- String ip
- String location
- String loginType
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ String getAppVersion()
+ void setAppVersion(String)
+ String getOsVersion()
+ void setOsVersion(String)
+ String getBrand()
+ void setBrand(String)
+ String getModel()
+ void setModel(String)
+ String getSimCardNumber()
+ void setSimCardNumber(String)
+ String getPlatform()
+ void setPlatform(String)
+ String getDeviceId()
+ void setDeviceId(String)
+ String getPromoCode()
+ void setPromoCode(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ String getWdDeviceId()
+ void setWdDeviceId(String)
+ Integer getDeviceState()
+ void setDeviceState(Integer)
+ String getIp()
+ void setIp(String)
+ String getLocation()
+ void setLocation(String)
+ String getLoginType()
+ void setLoginType(String)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String toString()
}
class com.welab.user.test.service.impl.UserServiceImplTest {
- UserServiceImpl userService
- {static} Long TB_USER_ID
+ void getUserInfoByMobile()
+ void getUserInfoByUserId()
+ void getUserInfoByUserIds()
+ void sendVCode()
+ void sendVCode02()
+ void getListUserInfoBy()
+ void getListUserInfoByMobileHalfLike()
+ void getPageUserInfoBy()
+ void updateUserState()
+ void getCountUserRegistered()
+ void getRegisteredUserId()
+ void updateGoogleInfo()
+ void test_01_01_tobUserRegister()
+ void test_01_02_updateUserMobile()
+ void test_01_03_userDelete()
}
class com.welab.user.service.impl.AdminServiceImpl {
- AdminRoleMapper adminRoleMapper
- ApprovalRoleServiceFacade approvalRoleServiceFacade
- PermissionsService permissionsService
- BasePasswordChangeService passwordChangeService
- BaseUserInfoService baseUserInfoService
- BaseAdminProductAuthService baseAdminProductAuthService
+ Response<Long> saveOrUpdateAdmin(UserInfo)
+ Response<Long> updateAdminRole(Long,Long[])
}
class com.welab.user.test.app.service.PinBlacklistServiceTest {
- PinBlacklistService pinBlacklistService
+ void setUp()
+ void updateAndgetPin()
+ void isBlackPin()
}
interface com.welab.user.mapper.PinBlacklistMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(PinBlacklist)
~ int insertSelective(PinBlacklist)
~ PinBlacklist selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(PinBlacklist)
~ int updateByPrimaryKey(PinBlacklist)
~ int inserts(List<String>)
~ List<String> selectPins()
~ List<PinBlacklist> selectAll()
~ List<Long> selectIdByPins(List<String>)
~ int countByPin(String)
~ int deleteByPrimaryKeys(List<Long>)
~ int deleteAll()
}
class com.welab.user.app.base.BaseUserCertService {
- Logger logger
- UserCertMapper userCertMapper
+ UserCert addUserCert(UserCertDTO)
+ void userCertBinding(UserBaseDTO)
+ UserCert getUserCert(Long,Byte,String)
+ int disableAllCertByUserId(Long)
}
class com.welab.user.vo.AdminActiveTimeVo {
- {static} long serialVersionUID
- Long adminId
- Long activeMillisecond
+ void setAdminId(String)
+ void setActiveMillisecond(String)
+ Long getAdminId()
+ void setAdminId(Long)
+ Long getActiveMillisecond()
+ void setActiveMillisecond(Long)
}
class com.welab.user.vo.AdminRspVo {
- {static} long serialVersionUID
- UserInfoDTO adminInfo
- List<Roles> roles
+ List<Roles> getRoles()
+ void setRoles(List<Roles>)
+ UserInfoDTO getAdminInfo()
+ void setAdminInfo(UserInfoDTO)
}
class com.welab.user.service.impl.UserTokenServiceImpl {
- {static} String CHARS
- {static} int LEN_PREFIX_TOKEN
- {static} int LEN_SNOWFLAKE
- UserTokenRedisService userTokenRedisService
- SeqNoManager seqNoManager
- BaseUserTokenService baseUserTokenService
+ Response<String> saveToken(TokenInfo)
+ Response<TokenInfo> getToken(String)
+ Response<Boolean> deleteUserToken(Long)
- List<UserToken> getUserTokensByUserId(Long)
+ Response<Boolean> deleteToken(String)
+ String generateTokenCode()
+ Response<Long> getLastOrgId(Long)
}
class com.welab.user.dto.UserRegisterDTO {
- {static} long serialVersionUID
- String origin
- String productCode
- String inviterCode
- boolean needLogin
- String verifyServiceType
}
class com.welab.user.test.service.impl.DevicesServiceImplTest {
- DevicesServiceImpl devicesService
- DevicesKeyManager devicesKeyManager
- {static} Long DEVICE_ID
- {static} String WD_DEVICE_ID
- {static} String DEVICES_KEY
+ void getDevicesContInfo()
+ void getPageUserDevicesByUserId()
+ void getPageUserDevicesByUserIdAndState()
+ void test_04_01_getUserDevicesKeyWebUrl()
+ void test_04_02_checkDevicesKey()
+ void test_04_03_updateDeviceState()
+ void test_04_04_updateDeviceState()
+ void test_04_05_checkDevicesKey()
}
enum com.welab.user.enmu.CredTypeEnum {
+  GOOGLE
+  FACEBOOK
- String typeName
- Integer typeValue
- <<Create>> CredTypeEnum(String,Integer)
+ Byte getTypeValue()
+ {static} Byte getTypeValue(CredTypeEnum)
+ {static} String getName(CredTypeEnum)
+ {static} String getName(Integer)
+ {static} String getTypeName(Integer)
}
class com.welab.user.dto.UserDeleteDto {
- {static} long serialVersionUID
- Long orgId
- Long userId
}
class com.welab.user.app.verify.UserDecicesVerifyService {
- BaseDevicesService baseDevicesService
- DevicesKeyManager devicesKeyManager
- DeviceConfirmEmailCmd deviceConfirmEmailCmd
- UserProfilesServiceFacade userProfilesServiceFacade
- IpStackManager ipStackManager
+ boolean verify(UserLoginDTO,String)
- void sendDeviceConfirmEmail(UserLoginDTO)
- {static} Boolean checkAppVersion(String)
}
class com.welab.user.app.verify.UserPinFormatVerify {
- PinBlacklistService pinBlacklistService
+ void verify(String)
}
interface com.welab.user.service.IUserTokenService {
~ Response<String> saveToken(TokenInfo)
~ Response<TokenInfo> getToken(String)
~ Response<Boolean> deleteUserToken(Long)
~ Response<Boolean> deleteToken(String)
~ Response<Long> getLastOrgId(Long)
}
class com.welab.user.service.impl.DevicesServiceImpl {
- BaseDevicesService baseDevicesService
- DevicesKeyManager devicesKeyManager
- UserTokenServiceImpl userTokenService
+ List<DevicesDTO> getDevicesContInfo(Long,int)
+ Response<Boolean> updateDeviceState(UserDevicesStateDTO)
+ Response<PageInfo<UserDevicesDTO>> getPageUserDevicesByUserId(Long,int,int)
+ Response<PageInfo<UserDevicesDTO>> getPageUserDevicesByUserIdAndState(Long,Integer,int,int)
+ Response<UserDevicesDTO> checkDevicesKey(String)
+ Response<List<DevicesVO>> getDeviceInfoByParams(DevicesDTO)
+ Response<DevicesVO> getLatestOneByParams(DevicesDTO)
+ Response<List<DevicesVO>> selectByParamsSortByUpdateAt(DevicesDTO)
}
class com.welab.user.dto.UserPasswordDTO {
- {static} long serialVersionUID
- Long userId
- Long orgId
- String passwd
- String oldPasswd
}
interface com.welab.user.mapper.UserPinMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(UserPin)
~ int insertSelective(UserPin)
~ UserPin selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(UserPin)
~ int updateByPrimaryKey(UserPin)
~ UserPin selectByUserId(Long)
}
class com.welab.user.model.PasswordChange {
- Long id
- Long userId
- Date createdAt
+ Long getId()
+ void setId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
}
class com.welab.user.controller.v3.AdminV3Controller {
- DubboAdminServiceImpl adminService
- BaseAdminProductAuthService baseAdminProductAuthService
+ Response<List<ActiveAdminInfoVo>> getAdminInfoByPlatform(String)
+ Response<List<String>> getProductive(Long)
}
class com.welab.user.app.service.PinBlacklistService {
- BasePinBlacklistService basePinBlacklistService
- JedisCluster jedisCluster
- {static} String PREFIX
- {static} Integer SECONDS
+ String getPins()
- List<String> refreshRedis()
+ Boolean isBlackPin(String)
+ void updateBlackPinlistPin(String)
}
class com.welab.user.app.verify.impl.MobileExistsVerifyService {
- BaseUserInfoService baseUserInfoService
+ boolean verify(UserBaseDTO)
}
interface com.welab.user.mapper.OrgOrganizationMapper {
~ int insert(OrgOrganization)
~ OrgOrganization selectByPrimaryKey(Long)
~ int updateByPrimaryKey(OrgOrganization)
~ OrgOrganization getOrgOrganizationByCode(String)
}
interface com.welab.user.mapper.ext.UserInfoExtMapper {
~ List<Long> findUserIds(Date,Date)
~ List<UserInfo> listUserInfoByMobile(List<String>,Integer)
}
class com.welab.user.app.command.user.TemporaryLoginInfoService {
}
class com.welab.user.model.AdminLoginTrackExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> AdminLoginTrackExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.user.model.AdminLoginTrackExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andUserIdIsNull()
+ Criteria andUserIdIsNotNull()
+ Criteria andUserIdEqualTo(Long)
+ Criteria andUserIdNotEqualTo(Long)
+ Criteria andUserIdGreaterThan(Long)
+ Criteria andUserIdGreaterThanOrEqualTo(Long)
+ Criteria andUserIdLessThan(Long)
+ Criteria andUserIdLessThanOrEqualTo(Long)
+ Criteria andUserIdIn(List<Long>)
+ Criteria andUserIdNotIn(List<Long>)
+ Criteria andUserIdBetween(Long,Long)
+ Criteria andUserIdNotBetween(Long,Long)
+ Criteria andLoginTimeIsNull()
+ Criteria andLoginTimeIsNotNull()
+ Criteria andLoginTimeEqualTo(Date)
+ Criteria andLoginTimeNotEqualTo(Date)
+ Criteria andLoginTimeGreaterThan(Date)
+ Criteria andLoginTimeGreaterThanOrEqualTo(Date)
+ Criteria andLoginTimeLessThan(Date)
+ Criteria andLoginTimeLessThanOrEqualTo(Date)
+ Criteria andLoginTimeIn(List<Date>)
+ Criteria andLoginTimeNotIn(List<Date>)
+ Criteria andLoginTimeBetween(Date,Date)
+ Criteria andLoginTimeNotBetween(Date,Date)
+ Criteria andLoginOutTimeIsNull()
+ Criteria andLoginOutTimeIsNotNull()
+ Criteria andLoginOutTimeEqualTo(Date)
+ Criteria andLoginOutTimeNotEqualTo(Date)
+ Criteria andLoginOutTimeGreaterThan(Date)
+ Criteria andLoginOutTimeGreaterThanOrEqualTo(Date)
+ Criteria andLoginOutTimeLessThan(Date)
+ Criteria andLoginOutTimeLessThanOrEqualTo(Date)
+ Criteria andLoginOutTimeIn(List<Date>)
+ Criteria andLoginOutTimeNotIn(List<Date>)
+ Criteria andLoginOutTimeBetween(Date,Date)
+ Criteria andLoginOutTimeNotBetween(Date,Date)
+ Criteria andLoginPlatformIsNull()
+ Criteria andLoginPlatformIsNotNull()
+ Criteria andLoginPlatformEqualTo(String)
+ Criteria andLoginPlatformNotEqualTo(String)
+ Criteria andLoginPlatformGreaterThan(String)
+ Criteria andLoginPlatformGreaterThanOrEqualTo(String)
+ Criteria andLoginPlatformLessThan(String)
+ Criteria andLoginPlatformLessThanOrEqualTo(String)
+ Criteria andLoginPlatformLike(String)
+ Criteria andLoginPlatformNotLike(String)
+ Criteria andLoginPlatformIn(List<String>)
+ Criteria andLoginPlatformNotIn(List<String>)
+ Criteria andLoginPlatformBetween(String,String)
+ Criteria andLoginPlatformNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.user.model.AdminLoginTrackExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.user.model.AdminLoginTrackExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.user.response.ResponsCodeType {
+ {static} String USER_IN_EXISTENCE
+ {static} String USER_NO_LOGIN
+ {static} String USER_STATE_DISABLE
+ {static} String USER_STATE_LOCK
+ {static} String USER_EXISTS
+ {static} String NO_SEND_OTP
+ {static} String EMAIL_EXISTS
+ {static} String USER_INFO_IS_NOT_NULL
+ {static} String USER_ID_IS_NOT_NULL
+ {static} String ORG_ID_IS_NOT_NULL
+ {static} String MOBILE_IS_ERROR
+ {static} String MOBILE_IS_NOT_NULL
+ {static} String USER_PASSWORD_IS_NOT_NULL
+ {static} String USER_OLD_PASSWORD_IS_NOT_NULL
+ {static} String USER_OLD_PASSWORD_IS_NOT_EQUALS_NEW_PASSWORD
+ {static} String PASSWORD_IS_ERROR
+ {static} String PASSWORD_IS_BLACKLIST
+ {static} String USER_PASSWORD_DISAGREE
+ {static} String USER_PASSWORD_DISAGREE_TO_SMS
+ {static} String USER_PASSWORD_TWO_DISAGREE
+ {static} String USER_USE_OTP
+ {static} String NO_REPEATEDLY_SET_PASSWORD
+ {static} String NOT_PIN
+ {static} String SMS_IS_NOT_NULL
+ {static} String QUERY_IS_NOT_NULL
+ {static} String PARAM_IS_NOT_NULL
+ {static} String PARENT_ID_IS_ERROR
+ {static} String DELETE_FAIL_THERE_ARE_CHILDREN
+ {static} String VERIFICATION_CODE_INVALID
+ {static} String INVITATION_CODE_INVALID
+ {static} String FIF_CODE_INVALID
+ {static} String BTN_NAME_NOT_EMPTY
+ {static} String BTN_NAME_NOT_EXIST
+ {static} String LOGIN_TO_OTP
+ {static} String USER_BLACK_DECICES
}
enum com.welab.user.response.UserResponsCodeTypeEnum {
+  USER_IN_EXISTENCE
+  USER_NO_LOGIN
+  USER_PASSWORD_DISAGREE
+  USER_STATE_DISABLE
+  USER_STATE_LOCK
+  USER_EXISTS
+  ORG_ID_IS_NOT_NULL
+  MOBILE_IS_ERROR
+  QUERY_IIS_NOT_NULL
+  PASSWORD_IS_ERROR
+  PARAM_IS_NOT_NULL
+  PARENT_ID_IS_ERROR
+  DELETE_FAIL_THERE_ARE_CHILDREN
+  USER_INFO_IS_NOT_NULL
+  EMAIL_EXISTS
+  VERIFICATION_CODE_INVALID
+  INVITATION_CODE_INVALID
+  USER_OLD_PASSWORD_IS_NOT_EQUALS_NEW_PASSWORD
+  FIF_CODE_INVALID
+  NO_REPEATEDLY_SET_PASSWORD
+  NOT_PIN
+  USER_PASSWORD_DISAGREE_TO_SMS
+  USER_PASSWORD_TWO_DISAGREE
+  USER_USE_OTP
+  PASSWORD_IS_BLACKLIST
+  BTN_NAME_NOT_EMPTY
+  BTN_NAME_NOT_EXIST
+  NO_SEND_OTP
+  LOGIN_TO_OTP
+  USER_BLACK_DECICES
- Integer code
- String message
- <<Create>> UserResponsCodeTypeEnum(Integer,String)
+ Integer getCode()
+ String getMessage()
}
class com.welab.user.dto.ProductiveUserLoginDTO {
- String mobile
- String passwd
}
class com.welab.user.app.service.ButtonService {
- ButtonMapper buttonMapper
+ Response<List<Button>> listMyButtons(Long,String)
+ Response saveButton(Button)
+ Response<Integer> deleteButton(Long)
+ Response<PageInfo> page(int,String,int,Long)
+ Response<Button> getButtonInfo(Long)
- Response checkButtonNameExist(Button)
}
class com.welab.user.dto.UserDevicesStateDTO {
- {static} long serialVersionUID
- Long deviceId
- Integer deviceState
- String deviceKey
}
class com.welab.user.app.verify.impl.PasswordVerifyService {
+ {static} Integer LOGIN_FAILED_COUNT_TO_SMS
- BaseUserInfoService baseUserInfoService
- CollectServiceFacade collectServiceFacade
+ boolean verify(UserBaseDTO)
}
class com.welab.user.dto.UserBaseDTO {
- {static} long serialVersionUID
- Long orgId
- String lastLoginIp
- String mobile
- String passwd
- SmsCodeDTO smsCode
- UserDeviceInfoDTO deviceInfo
- UserCertDTO userCertDTO
- String checkId
- String operateSign
- Boolean isMobile
- String adminName
}
class com.welab.user.test.base.UserCommon {
+ {static} Long ADMIN_ORG_ID
+ {static} String ADMIN_PASSWORD
+ {static} String ORIGIN
+ {static} Long EXISTED_ADMIN_ID
+ {static} String EXISTED_ADMIN_MOBILE
+ {static} String EXISTED_ADMIN_EMAIL
+ {static} Long USER_ORG_ID
+ {static} Long OLD_USER_ID
+ {static} String OLD_USER_MOBILE
+ {static} String USER_PASSWORD
+ {static} String USER_PASSWORD_NEW
}
interface com.welab.user.service.DevicesDubboService {
~ List<DevicesDTO> getDevicesContInfo(Long,int)
~ Response<Boolean> updateDeviceState(UserDevicesStateDTO)
~ Response<PageInfo<UserDevicesDTO>> getPageUserDevicesByUserId(Long,int,int)
~ Response<PageInfo<UserDevicesDTO>> getPageUserDevicesByUserIdAndState(Long,Integer,int,int)
~ Response<UserDevicesDTO> checkDevicesKey(String)
~ Response<List<DevicesVO>> getDeviceInfoByParams(DevicesDTO)
~ Response<List<DevicesVO>> selectByParamsSortByUpdateAt(DevicesDTO)
~ Response<DevicesVO> getLatestOneByParams(DevicesDTO)
}
class com.welab.user.app.facade.message.MessageEmailServiceFacade {
- MessageEmailService messageEmailService
+ void sendMailByTmplName(MailDTO)
+ void sendMail(MailDTO)
}
class com.welab.user.test.command.user.UserLoginExeTest {
- UserLoginExe userLoginExe
- AdminServiceImpl adminService
- BaseUserInfoService baseUserInfoService
- UserPinServiceImpl userPinService
- {static} Long REG_USER_ID
- {static} String REG_USER_MOBILE
+ void test_01_01_userLoginMaucashAdmin()
+ void test_01_02_userLoginMaucashAdmin()
+ void test_03_01_userRegister()
+ void test_03_02_userLogin()
+ void test_03_03_userLogin()
+ void test_03_04_userLogin()
- UserDeviceInfoDTO getUserDeviceInfoDTO()
- UserLoginDTO getMaucashUserLoginDTO(String)
+ {static} void main(String[])
}
class com.welab.user.test.service.impl.UserPinServiceImplTest {
- UserPinServiceImpl userPinService
+ void getLoginType()
+ void test_02_01_addLoginPin()
+ void test_02_02_checkPinStateByUserId()
+ void test_04_01_putFingerprintState()
+ void test_05_01_updatePasswordByOldPwd()
+ void test_05_02_updatePasswordByOldPwd()
+ void test_06_01_putLoginPinBySMS()
+ void test_07_01_putLoginPinBySMSKey()
}
class com.welab.user.vo.ButtonVO {
- Long id
- Long orgId
- String butName
- String description
- String platform
- Boolean enabled
}
class com.welab.user.app.base.BasePasswordChangeService {
- PasswordChangeMapper passwordChangeMapper
+ void addPasswordChange(Long)
+ PasswordChange findLastByUserId(Long)
+ boolean isPasswordExpired(Long)
}
class com.welab.user.service.impl.UserServiceImpl {
- String APP_ID
- MessageSmsServiceFacade messageSmsServiceFacade
- UserInfoService userInfoService
- BaseUserInfoService baseUserInfoService
- UserRegisterExe userRegisterExe
- UserRegisterNumberExe userRegisterNumberExe
- String SERVER_ENV
+ Response<UserInfoDTO> getUserInfoByMobile(String,Long)
+ Response<List<UserInfoDTO>> listUserInfoByMobile(List<String>,Integer)
+ Response<UserInfoDTO> getUserInfoByUserId(Long)
+ Response<List<UserInfoDTO>> getUserInfoByUserIds(List<Long>)
+ Response<Long> sendVCode(String,Long)
+ Response<Long> sendVCode(MsgDTO)
+ Response<List<UserInfoDTO>> getListUserInfoBy(UserInfoRequestVo)
+ Response<List<UserInfoDTO>> getListUserInfoByMobileHalfLike(UserInfoRequestVo)
+ Response<PageInfo<UserInfoDTO>> getPageUserInfoBy(UserInfoRequestVo,int,int)
+ Response updateUserState(Long,Byte)
+ Response<Integer> getCountUserRegistered(UserRegisteredCountVo)
+ Response<List<Long>> getRegisteredUserId(UserRegisteredCountVo)
+ Response<Integer> updateUserMobile(Long,String)
+ Response<Long> tobUserRegister(RegUserDTO)
+ Response<Integer> userDelete(UserDeleteDto)
+ Response<Boolean> updateGoogleInfo(UserGoogleInfoDTO)
- UserInfoDTO userInfoToUserInfoDTO(UserInfo)
- List<UserInfoDTO> userInfoToUserInfoDTO(List<UserInfo>)
+ Response<List<Long>> findUserIds(Date,Date)
}
class com.welab.user.test.app.verify.FifUserRegVerifyServiceMockTest {
- FifUserRegVerifyService fifUserRegVerifyService
- FifUserDataServiceFacade fifUserDataServiceFacade
+ void verifyOldUser()
}
class com.welab.user.app.service.ProductMenusRelService {
- ProductMenusRelMapper productMenusRelMapper
- ProductMenusRelExtMapper productMenusRelExtMapper
+ List<ProductMenusRel> selectProductMenusRel(String)
+ int saveProductMenusRel(String,List<Long>)
}
class com.welab.user.controller.v1.ButtonController {
- ButtonService buttonService
+ Response myButton(Long,String)
+ Response pageButtons(Long,String,int,int)
+ Response getMenuInfo(Long)
+ Response saveButton(Long,ButtonVO)
+ Response deleteMenu(Long)
}
class com.welab.user.model.UserInfo {
- List<String> productCodes
- Long id
- Long orgId
- String mobile
- String adminName
- Byte userType
- String passwd
- Integer loginSucessCount
- Integer loginFailedCount
- String lastLoginIp
- Date lastLoginTime
- String origin
- String productCode
- Long invUserId
- Byte state
- Date createdAt
- Date updatedAt
- String googleFcmToken
- String googleAdvertisingId
+ List<String> getProductCodes()
+ void setProductCodes(List<String>)
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getMobile()
+ void setMobile(String)
+ Byte getUserType()
+ void setUserType(Byte)
+ String getPasswd()
+ void setPasswd(String)
+ Integer getLoginSucessCount()
+ void setLoginSucessCount(Integer)
+ Integer getLoginFailedCount()
+ void setLoginFailedCount(Integer)
+ String getLastLoginIp()
+ void setLastLoginIp(String)
+ Date getLastLoginTime()
+ void setLastLoginTime(Date)
+ String getOrigin()
+ void setOrigin(String)
+ String getProductCode()
+ void setProductCode(String)
+ Long getInvUserId()
+ void setInvUserId(Long)
+ Byte getState()
+ void setState(Byte)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getGoogleFcmToken()
+ void setGoogleFcmToken(String)
+ String getGoogleAdvertisingId()
+ void setGoogleAdvertisingId(String)
+ String getAdminName()
+ void setAdminName(String)
+ String toString()
}
class com.welab.user.app.facade.marketing.BackstageConfigServiceFacade {
- BackstageConfigService backstageConfigService
+ String getCacheConfigValue(String)
+ boolean getRegisterABTest()
}
interface com.welab.user.app.verify.VerifyService {
~ boolean verify(UserBaseDTO)
}
class com.welab.user.dto.UserDeviceInfoDTO {
- {static} long serialVersionUID
- Long id
- Long orgId
- Long userId
- String appVersion
- String osVersion
- String brand
- String model
- String simCardNumber
- String platform
- String deviceId
- String promoCode
- String wdDeviceId
- Integer deviceState
- String location
- String loginType
- String ip
}
class com.welab.user.app.base.BaseUserTokenService {
- UserTokenMapper tokenMapper
+ List<UserToken> selectByUserId(TokenInfo)
+ List<UserToken> selectByUserId(Long)
+ UserToken selectByToken(String)
+ void updateCloseTokenByUserId(Long)
+ void updateCloseTokenByToken(String)
+ void updateOrgidByToken(TokenInfo)
+ void insert(UserToken)
+ Long getLastOrgId(Long)
}
class com.welab.user.app.service.UserTokenRedisService {
- JedisCluster jedisCluster
+ {static} int TOKEN_EXPIRE_HOUR
+ {static} String PREFIX
+ void put(TokenInfo,Date)
+ void put(TokenInfo)
+ TokenInfo get(String)
+ void remove(String)
# int calTokenTTL(Date)
}
interface com.welab.user.mapper.RefuseRegisterMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(RefuseRegister)
~ int insertSelective(RefuseRegister)
~ RefuseRegister selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(RefuseRegister)
~ int updateByPrimaryKey(RefuseRegister)
}
class com.welab.user.app.facade.message.AddresseeWhiteListDubboServiceFacade {
- IAddresseeWhiteListDubboService addresseeWhiteListDubboService
+ List<SpecialEmailSourceDTO> querySpecialEmailReceive()
+ SpecialEmailReceiverDTO queryMobileWhiteList()
+ void saveMobileWhiteList(SpecialEmailReceiverDTO)
+ void saveEmailTaskWhiteList(SpecialEmailReceiverDTO)
}
class com.welab.user.app.service.UserInfoService {
- Logger logger
- BaseUserInfoService baseUserInfoService
- LoginMethodConfiguration loginMethodConfiguration
- BaseUserCertService baseUserCertService
- BaseUserPinService baseUserPinService
- BasePasswordChangeService passwordChangeService
- CollectServiceFacade collectServiceFacade
- UserTokenServiceImpl userTokenService
- AppTokenServiceFacade appTokenServiceFacade
- UserPinFormatVerify userPinFormatVerify
- UpdatePwdManager updatePwdManager
- JedisCluster jedisCluster
+ {static} Integer UPDATE_PASSWORD_TIME_TO_SMS
+ {static} String UPDATE_PASSWORD_FAILED_PREFIX
+ {static} String CHECKID_KEY
+ Response<Integer> userDelete(UserDeleteVo)
+ Response modiflyPwdBySMS(UserBaseDTO)
+ Response<Boolean> modiflyPwdByOldPwd(UserPasswordDTO)
+ Response addPwd(UserPasswordDTO)
+ Response<Boolean> updateGoogleInfo(UserGoogleInfoDTO)
+ Response<String> checkSmsVcode(UserBaseDTO)
+ Response<Boolean> updatePwdBySmsKey(UserBaseDTO)
+ List<Long> getProductiveProductCode(ProductiveUserLoginDTO)
}
interface com.welab.user.mapper.ext.ProductMenusRelExtMapper {
~ int insertsProductMenus(String,List<Long>)
}
class com.welab.user.app.facade.collect.CollectServiceFacade {
- CollectEventService collectEventService
+ void addCollectEvent(Long,String,Long)
}
class com.welab.user.app.manager.IpStackManager {
- String IPSTACK_URL
- String ACCESS_KEY
- JedisCluster jedisCluster
- {static} String PREFIX
- String getAccessKey()
+ String getAddressByIp(String)
}
class com.welab.user.controller.v1.PinBlacklistController {
- PinBlacklistService pinBlacklistService
+ Response<String> getAll()
+ Response putPinBlacklist(PinBlacklistVO)
}
class com.welab.user.vo.UserRegisteredCountVo {
- {static} long serialVersionUID
- Date beginDate
- Date endDate
- Long orgId
}
class com.welab.user.dto.RegUserDTO {
- {static} long serialVersionUID
- Long orgId
- String mobile
- String passwd
- String productCode
- String origin
- Boolean isMobile
- String email
}
class com.welab.user.dto.UserDevicesDTO {
- {static} long serialVersionUID
- Long id
- Long orgId
- Long userId
- String appVersion
- String osVersion
- String brand
- String model
- String platform
- String wdDeviceId
- Integer deviceState
- String ip
- String location
- String loginType
- Date createdAt
- Date updatedAt
}
class com.welab.user.app.facade.message.AppTokenServiceFacade {
- AppTokenService appTokenService
+ void updateAppToken(String,Long,Long)
}
class com.welab.user.filter.LogFilter {
- {static} Logger LOGGER
- {static} String NOTIFICATION_PREFIX
- {static} String REQUEST_PREFIX
- {static} String RESPONSE_PREFIX
- AtomicLong _id
# void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)
+ void destroy()
- void log(StringBuilder)
- StringBuilder prefixId(StringBuilder,long)
- void printRequestLine(StringBuilder,String,long,String,String)
- void printResponseLine(StringBuilder,String,long,int)
- void printPrefixedHeaders(StringBuilder,long,String,HttpServletRequest)
}
class com.welab.user.dto.UserPinStateDTO {
- {static} long serialVersionUID
- Boolean pinState
- Boolean fingerprintState
- Long userId
}
class com.welab.user.model.RoleButton {
- Long id
- Long roleId
- Long buttonId
- Date createdAt
}
class com.welab.user.dto.SmsCodeDTO {
- {static} long serialVersionUID
- Long smsCodeId
- String smsCodeValue
}
class com.welab.user.controller.v1.RoleController {
- RoleService roleService
+ Response getRoleList(Long)
+ Response<PageInfo<Roles>> getRolePage(Long,Integer,Integer)
+ Response getRoleInfo(Long)
+ Response addOrUpdateRole(Long,Roles)
+ Response updateRoleMenu(RoleReqVo)
+ Response updateRolePermission(RoleReqVo)
+ Response updateRoleState(Roles)
+ Response updateRoleButton(RoleReqVo)
}
interface com.welab.user.common.desc.UserV3SwaggerDesc {
~ String V3_USER_LOGIN_DESC
}
class com.welab.user.app.manager.DevicesKeyManager {
- JedisCluster jedisCluster
# {static} String PREFIX
# {static} Integer SECONDS
- String DEVICES_KEY_URL
+ String getDevicesKey(Long,String)
+ String getUserDevicesKeyWebUrl(Long,String)
+ Boolean checkDevicesKey(String)
+ Map getValue(String)
+ Boolean delDevicesKey(String)
}
class com.welab.user.controller.v1.AdminController {
- AdminServiceImpl adminService
- UserServiceImpl userService
- RoleService roleService
- DubboAdminServiceImpl dubboAdminService
- BaseAdminProductAuthService baseAdminProductAuthService
+ Response getAdminList(Long,UserInfoRequestVo)
+ Response<PageInfo<UserInfoDTO>> getAdminPage(Long,Integer,Integer,UserInfoRequestVo)
+ Response getAdminInfo(Long)
+ Response addOrUpdateAdmin(Long,String,UserInfo)
+ Response updateAdminRole(AdminReqVo)
+ Response updateUserState(UserInfo)
+ Response getAdminProductCode(Long)
+ Response getAdminInfoByPlatform(Long)
}
class com.welab.user.service.impl.DubboAdminServiceImpl {
- JedisCluster jedisCluster
- BaseUserInfoService baseUserInfoService
- BaseAdminLoginTrack adminLoginTrack
- {static} String PREFIX_ACTIVE_ADMIN
- {static} String PREFIX_PLATFORM
- {static} String PREFIX_LOGIN_TIME
- {static} String PREFIX_ACTIVE_TIME_BY_DAY
- {static} Long SECONDS
- {static} String[] PLATFROM_NAMES
+ Response<List<Long>> findListActiveAdminId(Long,Set<Long>)
+ Response<List<AdminActiveTimeVo>> findListActiveTime(String,Set<Long>)
+ int loginOut(Long)
+ void refreshActive(Long,String)
+ Long loginActive(Long)
+ int refreshYesterdayActiveTime()
+ List<ActiveAdminInfoVo> getAdminInfoByPlatform(Boolean,Long,String)
- Map<Long,Date> getAdmins(String,Boolean,Long,Set<Long>)
}
class com.welab.user.app.command.user.UserRegisterExe {
- LoginMethodConfiguration loginMethodConfiguration
- BaseUserCertService baseUserCertService
- BaseUserInfoService baseUserInfoService
- BaseDevicesService baseDevicesService
- FifUserDataServiceFacade fifUserDataServiceFacade
- AppTokenServiceFacade appTokenServiceFacade
- UserTokenExe userTokenExe
- UserRelatedInfoServiceFacade userRelatedInfoServiceFacade
- UserRegisterNumberExe userRegisterNumberExe
+ Long userLoginRegister(UserLoginDTO)
+ Response<UserLoginResponseVo> userRegister(UserRegisterDTO,Boolean)
- String getLoginTypeToReg(UserBaseDTO)
- Response saveUser(UserRegisterDTO)
}
class com.welab.user.dto.UserGoogleInfoDTO {
- {static} long serialVersionUID
- Long userId
- Long orgId
- String googleFcmToken
- String googleAdvertisingId
}
class com.welab.user.vo.AdminReqVo {
- {static} long serialVersionUID
- Long adminId
- Long[] roleIds
+ Long getAdminId()
+ void setAdminId(Long)
+ Long[] getRoleIds()
+ void setRoleIds(Long[])
}
class com.welab.user.controller.v1.PermissionsController {
- Logger logger
- PermissionsService permissionsService
+ Response checkUrl(Long,String,String,String,String)
+ Response getPermissionsList()
}
interface com.welab.user.mapper.RolePermissionMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(RolePermission)
~ int insertSelective(RolePermission)
~ RolePermission selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(RolePermission)
~ int updateByPrimaryKey(RolePermission)
~ int deleteByRoleId(Long)
~ int inserts(List<RolePermission>)
}
enum com.welab.user.enmu.AdminProductCodeEnum {
+  YN_SYSTEM
+  YN_MAUCASH
+  YN_SPEKTRA
+  YN_FIF_INSIGHT
+  YN_TB_MANAGER
+  YN_MAUMODAL
- String typeName
- String typeValue
- <<Create>> AdminProductCodeEnum(String,String)
+ String getTypeValue()
+ String getTypeName()
+ {static} String getTypeValue(AdminProductCodeEnum)
+ {static} String getName(AdminProductCodeEnum)
+ {static} String getName(String)
}
class com.welab.user.vo.UserLoginResponseVo {
- String token
- String mobile
- String email
- Long userId
- Long userCertId
- String userProductType
- boolean temporaryLogin
- String accessToken
- Boolean passwordExpired
- String productCode
- boolean newUser
- boolean enableABTest
}
class com.welab.user.app.service.RoleService {
- RolesMapper rolesMapper
- MenusMapper menusMapper
- PermissionsMapper permissionsMapper
- PermissionsService permissionsService
- RolePermissionMapper rolePermissionMapper
- RoleMenusMapper roleMenusMapper
- AdminRoleMapper adminRoleMapper
- RoleButtonMapper roleButtonMapper
- ButtonMapper buttonMapper
+ Response<List<Roles>> getRoleList(Roles)
+ Response<PageInfo<Roles>> getRolePage(Roles,Integer,Integer)
+ Response<Roles> getRoleByRoleId(Long)
+ Response<List<Roles>> getRoleByAdminId(Long)
+ Response updateRoleState(Long,Boolean)
+ Response addOrUpdateRole(Roles)
+ Response updateRolePermission(Long,Long[])
+ Response updateRoleMenu(Long,Long[])
+ Response updateRoleButton(Long,Long[])
- boolean checkRole(Roles)
}
class com.welab.user.dto.UpdateUserPasswordDTO {
- {static} long serialVersionUID
- Long userId
- String passwd
}
class com.welab.user.dto.UserCertDTO {
- {static} long serialVersionUID
- Long id
- Long orgId
- Byte certType
- String certCode
- String certToken
}
class com.welab.user.vo.SendSmsReqVo {
- {static} long serialVersionUID
- String mobile
- Byte channelType
}
class com.welab.user.core.WebAppConfigurer {
+ void addInterceptors(InterceptorRegistry)
}
class com.welab.user.dto.UserLoginDTO {
- {static} long serialVersionUID
- String productCode
- String origin
- String inviterCode
- String inviterSource
- String userAgent
- String appVersion
}
class com.welab.user.app.manager.UpdatePwdManager {
- JedisCluster jedisCluster
- BaseUserPinService baseUserPinService
- BaseUserInfoService baseUserInfoService
- AppTokenServiceFacade appTokenServiceFacade
- CollectServiceFacade collectServiceFacade
+ Response<Boolean> updatePwd(UserBaseDTO)
}
class com.welab.user.vo.PageButtonParamVO {
- Long orgId
- int pageNum
- int pageSize
}
class com.welab.user.model.TemporaryLoginInfo {
- Long id
- Long userId
- String code
- String accessToken
- Integer state
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ String getCode()
+ void setCode(String)
+ String getAccessToken()
+ void setAccessToken(String)
+ Integer getState()
+ void setState(Integer)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
enum com.welab.user.model.StateEnum {
+  INITIAL
+  SUCCESS
+  FAIL
- String typeName
- Integer typeValue
- <<Create>> StateEnum(String,Integer)
+ Integer getTypeValue()
+ {static} Integer getTypeValue(StateEnum)
}
class com.welab.user.model.UserToken {
- Long id
- String tokenCode
- Long userId
- Long orgId
- String mobile
- String appId
- Byte userType
- String deviceCode
- String origin
- Date expireTime
- Boolean state
- Date gmtCreate
- Date gmtModified
- Integer lockVersion
+ Long getId()
+ void setId(Long)
+ String getTokenCode()
+ void setTokenCode(String)
+ Long getUserId()
+ void setUserId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getMobile()
+ void setMobile(String)
+ String getAppId()
+ void setAppId(String)
+ Byte getUserType()
+ void setUserType(Byte)
+ String getDeviceCode()
+ void setDeviceCode(String)
+ String getOrigin()
+ void setOrigin(String)
+ Date getExpireTime()
+ void setExpireTime(Date)
+ Boolean getState()
+ void setState(Boolean)
+ Date getGmtCreate()
+ void setGmtCreate(Date)
+ Date getGmtModified()
+ void setGmtModified(Date)
+ Integer getLockVersion()
+ void setLockVersion(Integer)
}
class com.welab.user.controller.v3.AddresseeWhiteListV3Controller {
- AddresseeWhiteListDubboServiceFacade addresseeWhiteListDubboServiceFacade
+ Response getMobileWhiteList()
+ Response<Object> saveMobileWhiteList(Long,SpecialEmailReceiverDTO)
+ Response getEmailTaskWhiteList()
+ Response<Object> updateEmailTaskWhiteList(Long,SpecialEmailReceiverDTO)
}
interface com.welab.user.mapper.MenusMapper {
~ List<Menus> getMyMenus(Long,String)
~ int deleteByPrimaryKey(Long)
~ int insert(Menus)
~ int insertSelective(Menus)
~ Menus selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(Menus)
~ int updateByPrimaryKey(Menus)
~ List<Menus> selectByMenus(Menus)
~ List<Menus> selectByRoleId(Long)
}
class com.welab.user.app.verify.impl.FifCodeVerifyService {
- BaseUserInfoService baseUserInfoService
- FifUserDataServiceFacade fifUserDataServiceFacade
+ boolean verify(UserBaseDTO)
+ boolean fifVerify(UserBaseDTO,UserInfo)
}
class com.welab.user.app.facade.message.MessageSmsServiceFacade {
- String APP_ID
- MessageSmsService messageSmsService
+ Response<Long> sendLoginVCode(SendSmsRequestVCode)
+ Response<Long> sendLoginVCode(MsgDTO)
+ Response<String> checkVCodeByObject(UserBaseDTO)
}
class com.welab.user.model.ProductMenusRelExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> ProductMenusRelExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.user.model.ProductMenusRelExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andProductCodeIsNull()
+ Criteria andProductCodeIsNotNull()
+ Criteria andProductCodeEqualTo(String)
+ Criteria andProductCodeNotEqualTo(String)
+ Criteria andProductCodeGreaterThan(String)
+ Criteria andProductCodeGreaterThanOrEqualTo(String)
+ Criteria andProductCodeLessThan(String)
+ Criteria andProductCodeLessThanOrEqualTo(String)
+ Criteria andProductCodeLike(String)
+ Criteria andProductCodeNotLike(String)
+ Criteria andProductCodeIn(List<String>)
+ Criteria andProductCodeNotIn(List<String>)
+ Criteria andProductCodeBetween(String,String)
+ Criteria andProductCodeNotBetween(String,String)
+ Criteria andMenuIdIsNull()
+ Criteria andMenuIdIsNotNull()
+ Criteria andMenuIdEqualTo(Long)
+ Criteria andMenuIdNotEqualTo(Long)
+ Criteria andMenuIdGreaterThan(Long)
+ Criteria andMenuIdGreaterThanOrEqualTo(Long)
+ Criteria andMenuIdLessThan(Long)
+ Criteria andMenuIdLessThanOrEqualTo(Long)
+ Criteria andMenuIdIn(List<Long>)
+ Criteria andMenuIdNotIn(List<Long>)
+ Criteria andMenuIdBetween(Long,Long)
+ Criteria andMenuIdNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
}
class com.welab.user.model.ProductMenusRelExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.user.model.ProductMenusRelExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.user.model.Menus {
- Long id
- Long orgId
- String platform
- String name
- Short level
- String url
- Long parentId
- Long orderSeq
- Date createAt
- String remark
+ Long getId()
+ void setId(Long)
+ String getName()
+ void setName(String)
+ Short getLevel()
+ void setLevel(Short)
+ String getUrl()
+ void setUrl(String)
+ Long getParentId()
+ void setParentId(Long)
+ Long getOrderSeq()
+ void setOrderSeq(Long)
+ Date getCreateAt()
+ void setCreateAt(Date)
+ String getRemark()
+ void setRemark(String)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getPlatform()
+ void setPlatform(String)
+ String toString()
}
class com.welab.user.dto.UserInfoDTO {
- {static} long serialVersionUID
- Long id
- Long orgId
- String mobile
- String adminName
- Byte userType
- String passwd
- Integer loginSucessCount
- Integer loginFailedCount
- String lastLoginIp
- Date lastLoginTime
- String origin
- String productCode
- Long invUserId
- Byte state
- String googleFcmToken
- String googleAdvertisingId
- Date createdAt
- Date updatedAt
}
class com.welab.user.controller.v3.UserV3Controller {
- UserTokenServiceImpl userTokenService
- UserLoginExe userLoginExe
- InviterMgmServiceFacade inviterMgmServiceFacade
- DubboAdminServiceImpl adminService
- UserInfoService userInfoService
- UserSwitchProductExe userSwitchProductExe
- MaumodalServiceFacade maumodalServiceFacade
- String GOOGLE_RECAPTCHA_SECRET
- Double GOOGLE_RECAPTCHA_SCORE
- String SERVER_ENV
+ Response<UserLoginResponseVo> userLogin(UserLoginDTO,String,Long,String,String,String,String)
+ Response<List<Long>> getProductive(ProductiveUserLoginDTO)
+ Response userLogout(String,Long,Long)
+ Response<InviterMgmRspVO> invitationBinding(UserLoginDTO,String,Long,String,String,String)
+ Response<Long> switchProduct(Long,Long,String,Long,String)
+ Response<String> userProductType(Long,String,String)
}
interface com.welab.user.mapper.PasswordChangeMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(PasswordChange)
~ int insertSelective(PasswordChange)
~ PasswordChange selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(PasswordChange)
~ int updateByPrimaryKey(PasswordChange)
~ PasswordChange selectLastByUserId(Long)
}
interface com.welab.user.mapper.RoleButtonMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(RoleButton)
~ int insertSelective(RoleButton)
~ RoleButton selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(RoleButton)
~ int updateByPrimaryKey(RoleButton)
~ int deleteByRoleId(Long)
~ int insertList(List<RoleButton>)
}
class com.welab.user.app.command.user.UserSwitchProductExe {
- BaseUserTokenService baseUserTokenService
- UserTokenRedisService userTokenRedisService
- MaumodalServiceFacade maumodalServiceFacade
+ void execute(String,Long,String)
}
class com.welab.user.job.AdminActiveTimeRefreshJob {
# Logger log
- DubboAdminServiceImpl dubboAdminService
+ void execute(ShardingContext)
}
class com.welab.user.app.verify.impl.PasswordFormatVerifyService {
- UserPinFormatVerify userPinFormatVerify
+ boolean verify(UserBaseDTO)
}
class com.welab.user.model.OrgType {
- Long id
- String orgTypeName
- String description
- Boolean status
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getOrgTypeName()
+ void setOrgTypeName(String)
+ String getDescription()
+ void setDescription(String)
+ Boolean getStatus()
+ void setStatus(Boolean)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String toString()
}
enum com.welab.user.enmu.UserTypeEnum {
+  TEMPORARY
+  GUEST
+  USER
- String typeName
- Integer typeValue
- <<Create>> UserTypeEnum(String,Integer)
+ Byte getTypeValue()
+ {static} Byte getTypeValue(UserStateEnum)
+ {static} String getName(UserStateEnum)
+ {static} String getName(Integer)
}
enum com.welab.user.common.enums.LoginMethodEnum {
+  USER_REGISTERED
+  USER_API_REGISTERED
+  USER_NORMAL
+  USER_SMS
+  INVITER_CODE
+  FIF_USER_NORMAL
+  FIF_USER_REG
+  USER_GOOGLE
+  USER_FACEBOOK
+  USER_MODIFLY_PWD_BY_SMS
+  USER_MODIFLY_PWD_BY_SMS_1
+  USER_MODIFLY_PWD_BY_SMS_2
+  ADMIN_NORMAL
+  BRANCHES_NORMAL
+  INVITATION_BINDING
+  HSO_AHASS
+  COLLECTION_FC
- String value
~ <<Create>> LoginMethodEnum(String)
+ {static} LoginMethodEnum getLoginMethodEnum(String)
+ String getValue()
}
class com.welab.user.model.Roles {
- Long id
- Long orgId
- String name
- String cnDescription
- String description
- Boolean enabled
- Date createdAt
- Date updatedAt
- List<Menus> menusList
- List<Permissions> permissionsList
- List<Button> buttonList
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getName()
+ void setName(String)
+ String getCnDescription()
+ void setCnDescription(String)
+ String getDescription()
+ void setDescription(String)
+ Boolean getEnabled()
+ void setEnabled(Boolean)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ List<Menus> getMenusList()
+ void setMenusList(List<Menus>)
+ List<Permissions> getPermissionsList()
+ void setPermissionsList(List<Permissions>)
+ List<Button> getButtonList()
+ void setButtonList(List<Button>)
+ String toString()
}
interface com.welab.user.mapper.ProductMenusRelMapper {
~ long countByExample(ProductMenusRelExample)
~ int deleteByExample(ProductMenusRelExample)
~ int deleteByPrimaryKey(Long)
~ int insert(ProductMenusRel)
~ int insertSelective(ProductMenusRel)
~ List<ProductMenusRel> selectByExample(ProductMenusRelExample)
~ ProductMenusRel selectByPrimaryKey(Long)
~ int updateByExampleSelective(ProductMenusRel,ProductMenusRelExample)
~ int updateByExample(ProductMenusRel,ProductMenusRelExample)
~ int updateByPrimaryKeySelective(ProductMenusRel)
~ int updateByPrimaryKey(ProductMenusRel)
}
class com.welab.user.vo.UserDeleteVo {
- Long orgId
- Long userId
}
class com.welab.user.app.facade.application.FifUserDataServiceFacade {
- FifUserDataService fifUserDataService
+ FifUserBaseInfoVO findUserBy(FifUserBaseInfoDTO)
+ void fifUserRegister(UserRegisterDTO)
}
class com.welab.user.exception.UserException {
- {static} long serialVersionUID
+ <<Create>> UserException(Integer)
+ <<Create>> UserException(String)
+ <<Create>> UserException(Integer,String)
+ <<Create>> UserException(ResponsCodeType.UserResponsCodeTypeEnum)
}
class com.welab.user.model.RolePermission {
- Long id
- Long roleId
- Long permissionId
- Date createdAt
+ Long getId()
+ void setId(Long)
+ Long getRoleId()
+ void setRoleId(Long)
+ Long getPermissionId()
+ void setPermissionId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ String toString()
}
class com.welab.user.app.command.user.UserTokenExe {
- UserTokenServiceImpl userTokenService
- CollectServiceFacade collectServiceFacade
+ String getSsoToken(UserInfo)
}
class com.welab.user.utils.CheckParameterUtils {
+ {static} void checkOrgIdIsNull(UserBaseDTO)
+ {static} void checkOrgIdIsNull(Long)
+ {static} void checkMobile(String)
+ {static} void checkMobile(UserBaseDTO)
}
class com.welab.user.app.facade.approval.ApprovalRoleServiceFacade {
- ApprovalRoleService approvalRoleService
+ void updateRoleByUserId(UserInfo)
}
class com.welab.user.controller.v1.MenuController {
- MenuService menuService
- ProductMenusRelService productMenusRelService
- DubboAdminServiceImpl dubboAdminService
+ Response myMenu(Long,Long,String,String)
+ Response getMenuList(Long)
+ Response getMenuInfo(Long)
+ Response addOrUpdateMenu(Menus)
+ Response deleteMenu(Menus)
+ Response saveProductMenusRel(SaveProductMenusRelVo)
+ Response queryProductMenusRel(String)
}
class com.welab.user.job.ActiveAdminInfoJob {
# Logger log
- DubboAdminServiceImpl dubboAdminService
- String APP_ID
- MessageEmailServiceFacade messageEmailServiceFacade
+ void execute(ShardingContext)
- String getFileString(String,List,LinkedHashMap<String,String>)
}
class com.welab.user.controller.v1.AddresseeWhiteListController {
- AddresseeWhiteListDubboServiceFacade addresseeWhiteListDubboServiceFacade
+ Response getMobileWhiteList()
+ Response<Object> saveMobileWhiteList(Long,SpecialEmailReceiverDTO)
+ Response getEmailTaskWhiteList()
+ Response<Object> updateEmailTaskWhiteList(Long,SpecialEmailReceiverDTO)
}
class com.welab.user.test.facade.InviterMgmServiceFacadeTest {
- InviterMgmServiceFacade inviterMgmServiceFacade
+ void invitationBinding()
- UserLoginDTO getMaucashUserLoginDTO(String)
}
interface com.welab.user.mapper.AdminProductAuthMapper {
~ long countByExample(AdminProductAuthExample)
~ int deleteByExample(AdminProductAuthExample)
~ int deleteByPrimaryKey(Long)
~ int insert(AdminProductAuth)
~ int insertSelective(AdminProductAuth)
~ List<AdminProductAuth> selectByExample(AdminProductAuthExample)
~ AdminProductAuth selectByPrimaryKey(Long)
~ int updateByExampleSelective(AdminProductAuth,AdminProductAuthExample)
~ int updateByExample(AdminProductAuth,AdminProductAuthExample)
~ int updateByPrimaryKeySelective(AdminProductAuth)
~ int updateByPrimaryKey(AdminProductAuth)
~ int deleteByUserId(Long)
~ List<String> selectProductCodeByUserId(Long)
~ int inserts(List<AdminProductAuth>)
}
class com.welab.user.test.service.impl.AdminServiceImplTest {
- AdminServiceImpl adminService
- RoleService roleService
+ {static} Long NEW_ADMIN_ID
+ {static} String NEW_ADMIN_MOBILE
+ void test_01_01_saveAdmin()
+ void test_01_02_saveAdminPasswordError()
+ void test_01_03_saveAdminMobileExisted()
+ void test_01_04_saveAdminEmailExisted()
+ void test_02_01_updateAdmin()
+ void test_02_02_updateAdminMobileExisted()
+ void test_02_03_updateAdminEmailExisted()
+ void test_03_01_updateAdminRole()
}
interface com.welab.user.mapper.DevicesMapper {
~ int insert(Devices)
~ int updateByPrimaryKeySelective(Devices)
~ int updateByPrimaryKey(Devices)
~ int updateStateById(Integer,Long)
~ int updateStateByWdDeviceId(Integer,Long,String)
~ List<DevicesDTO> getDevicesContInfo(Long,int,boolean)
~ List<UserDevicesDTO> selectByUserIdAndtDeviceState(Long,Integer)
~ Devices selectByUserIdAndWdDeviceId(Long,String,String)
~ Devices selectByPrimaryKey(Long)
~ int countUserWhitelisttDevices(Long)
}
class com.welab.user.config.Swagger2Config {
+ Docket createRestApi()
- List<Parameter> buildHeader()
- ApiInfo apiInfo()
}
class com.welab.user.app.verify.impl.FifUserRegVerifyService {
- FifUserDataServiceFacade fifUserDataServiceFacade
+ boolean verify(UserBaseDTO)
}
enum com.welab.user.enmu.UserTokenUserTypeEnum {
+  TEMP
+  GUEST
+  USER
+  OPERATOR
- String typeName
- Integer typeValue
- <<Create>> UserTokenUserTypeEnum(String,Integer)
+ String getTypeName()
+ Integer getTypeValue()
+ {static} UserTokenUserTypeEnum getUserType(Integer)
}
class com.welab.user.app.facade.application.UserRelatedInfoServiceFacade {
- UserRelatedInfoService userRelatedInfoService
+ void addUserRelatedInfo(UserInfo)
}
class com.welab.user.app.facade.application.InviterMgmServiceFacade {
- LoginMethodConfiguration loginMethodConfiguration
- BaseUserInfoService baseUserInfoService
- InviterMgmService inviterMgmService
- UserRegisterExe userRegisterExe
- UserRelatedInfoServiceFacade userRelatedInfoServiceFacade
- UserTrackServiceFacade userTrackServiceFacade
+ Response<InviterMgmRspVO> invitationBinding(UserLoginDTO)
}
class com.welab.user.test.base.SimpleTest {
# Logger logger
- BaseUserInfoService baseUserInfoService
- MessageSmsServiceFacade messageSmsServiceFacade
+ void test()
+ String getRandomMobile()
+ String getNewMobile(Long)
+ Long sendSmsCode(Long,String)
+ SmsCodeDTO getSmsCodeDTO(Long,String)
}
class com.welab.user.controller.v1.TemporaryLoginInfoController {
}
class com.welab.user.test.service.impl.DubboAdminServiceImplTest {
- DubboAdminServiceImpl dubboAdminService
- JedisCluster jedisCluster
+ {static} Long ADMIN_ID
- {static} String PREFIX_LOGIN_TIME
+ void test_01_01_refreshActive()
+ void test_02_01_findListActiveAdminId()
+ void test_02_02_findListActiveAdminId()
+ void test_03_01_getAdminInfoByPlatform()
+ void test_04_01_findListActiveTime()
+ void test_04_02_refreshYesterdayActiveTime()
}
class com.welab.user.vo.UserInfoRequestVo {
- {static} long serialVersionUID
- Long id
- Long orgId
- String mobile
- String adminName
- Date lastLoginTimeBegin
- Date lastLoginTimeEnd
- String origin
- String productCode
- Long invUserId
- Byte state
}
class com.welab.user.model.ProductMenusRel {
- Long id
- String productCode
- Long menuId
- Date createdAt
+ Long getId()
+ void setId(Long)
+ String getProductCode()
+ void setProductCode(String)
+ Long getMenuId()
+ void setMenuId(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
}
interface com.welab.user.service.UserService {
~ Response<UserInfoDTO> getUserInfoByMobile(String,Long)
~ Response<UserInfoDTO> getUserInfoByUserId(Long)
~ Response<List<UserInfoDTO>> getUserInfoByUserIds(List<Long>)
~ Response<Long> sendVCode(String,Long)
~ Response<Long> sendVCode(MsgDTO)
~ Response<List<UserInfoDTO>> getListUserInfoByMobileHalfLike(UserInfoRequestVo)
~ Response<List<UserInfoDTO>> getListUserInfoBy(UserInfoRequestVo)
~ Response<PageInfo<UserInfoDTO>> getPageUserInfoBy(UserInfoRequestVo,int,int)
~ Response updateUserState(Long,Byte)
~ Response<Integer> getCountUserRegistered(UserRegisteredCountVo)
~ Response<List<Long>> getRegisteredUserId(UserRegisteredCountVo)
~ Response<Integer> updateUserMobile(Long,String)
~ Response<Long> tobUserRegister(RegUserDTO)
~ Response<Integer> userDelete(UserDeleteDto)
~ Response<Boolean> updateGoogleInfo(UserGoogleInfoDTO)
~ Response<List<Long>> findUserIds(Date,Date)
~ Response<List<UserInfoDTO>> listUserInfoByMobile(List<String>,Integer)
}
class com.welab.user.app.service.PermissionsService {
- Logger logger
- PermissionsMapper permissionsMapper
- JedisCluster jedisCluster
- DubboAdminServiceImpl dubboAdminService
# {static} String PREFIX
# {static} Integer SECONDS
+ Response<Boolean> checkUrlPermissions(Long,String,String)
+ Response<List<Permissions>> getPermissionsAll()
- Set<String> getUserPermissions(Long,String)
+ void delRedisPermissions(Long)
+ void delRedisPermissions(List<Long>)
}
interface com.welab.user.mapper.UserTokenMapper {
~ int insert(UserToken)
~ int updateByPrimaryKey(UserToken)
~ List<UserToken> selectByUserToken(UserToken)
~ int updateCloseTokenByUserId(Long)
~ int updateCloseTokenByTokenCode(String)
~ int updateOrgidByToken(TokenInfo)
~ Long selectOrgIdByUserId(Long)
}
class com.welab.user.vo.ActiveAdminInfoVo {
- String platform
- Long adminId
- String email
- String mobile
- String lastActiveTime
- Date dLastActiveTime
# {static} LinkedHashMap<String,String> headMap
+ {static} LinkedHashMap<String,String> getHeadMap()
+ int compareTo(ActiveAdminInfoVo)
}
class com.welab.user.test.app.manager.IpStackManagerMockTest {
- Logger logger
- IpStackManager ipStackManager
- JedisCluster jedisCluster
+ void setUp()
+ void getAddressByIp()
}
class com.welab.user.test.app.service.PermissionsServiceTest {
- PermissionsService permissionsService
+ void getPermissionsAll()
+ void checkUrlPermissions()
}
class com.welab.user.model.AdminProductAuth {
- Long id
- Long userId
- String productCode
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ String getProductCode()
+ void setProductCode(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.user.model.PinBlacklist {
- Long id
- String blackPin
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getBlackPin()
+ void setBlackPin(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.user.vo.SaveProductMenusRelVo {
- String productCode
- List<Long> menuIds
}
class com.welab.user.model.UserPin {
- Long id
- Long userId
- Boolean pinState
- Date openPinTime
- Boolean fingerprintState
- Date openFingerprintTime
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ Boolean getPinState()
+ void setPinState(Boolean)
+ Date getOpenPinTime()
+ void setOpenPinTime(Date)
+ Boolean getFingerprintState()
+ void setFingerprintState(Boolean)
+ Date getOpenFingerprintTime()
+ void setOpenFingerprintTime(Date)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
enum com.welab.user.enmu.UserDevicesStateEnum {
+  BLOCK
+  NON_COMMON
+  WHITELIST
- String typeName
- Integer typeValue
- <<Create>> UserDevicesStateEnum(String,Integer)
+ Integer getTypeValue()
+ {static} Integer getTypeValue(UserDevicesStateEnum)
+ {static} String getName(UserDevicesStateEnum)
+ {static} String getName(Integer)
+ {static} String getTypeName(Integer)
}
enum com.welab.user.common.enums.UserWhiteListEnum {
+  WHITE_MOBILE
+  TO_USER_MAILS
+  BCC_USER_MAILS
+  CC_USER_MAILS
- Byte type
+ {static} List<Byte> getEmailTaskTypes()
}
interface com.welab.user.mapper.AdminLoginTrackMapper {
~ long countByExample(AdminLoginTrackExample)
~ int deleteByExample(AdminLoginTrackExample)
~ int deleteByPrimaryKey(Long)
~ int insert(AdminLoginTrack)
~ int insertSelective(AdminLoginTrack)
~ List<AdminLoginTrack> selectByExample(AdminLoginTrackExample)
~ AdminLoginTrack selectByPrimaryKey(Long)
~ int updateByExampleSelective(AdminLoginTrack,AdminLoginTrackExample)
~ int updateByExample(AdminLoginTrack,AdminLoginTrackExample)
~ int updateByPrimaryKeySelective(AdminLoginTrack)
~ int updateByPrimaryKey(AdminLoginTrack)
~ int updateLastLoginOutTimeByUserId(Long)
}
class com.welab.user.app.verify.impl.SmsCodeVerifyService {
- MessageSmsServiceFacade messageSmsServiceFacade
- String APP_ID
+ boolean verify(UserBaseDTO)
}
class com.welab.user.app.verify.impl.OrgIdVerifyService {
+ boolean verify(UserBaseDTO)
}
class com.welab.user.test.app.verify.FifCodeVerifyServiceTest {
- FifCodeVerifyService fifCodeVerifyService
+ void verifyNewUser()
}
interface com.welab.user.service.DubboAdminService {
~ Response<List<Long>> findListActiveAdminId(Long,Set<Long>)
~ Response<List<AdminActiveTimeVo>> findListActiveTime(String,Set<Long>)
}
interface com.welab.user.mapper.ButtonMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(Button)
~ int insertSelective(Button)
~ Button selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(Button)
~ int updateByPrimaryKey(Button)
~ List<Button> selectByButton(Button)
~ List<Button> listButtonByParam(Long,String)
~ List<Button> listByRoleId(Long)
}
class com.welab.user.app.verify.impl.InviterCodeVerifyService {
- BaseUserInfoService baseUserInfoService
+ boolean verify(UserBaseDTO)
- Long inviterCodeToUserId(String)
}
class com.welab.user.controller.v3.UserTokenController {
- UserTokenServiceImpl userTokenService
+ Response<TokenInfo> getToken(String)
}
class com.welab.user.app.command.sendemail.DeviceConfirmEmailCmd {
- MessageEmailServiceFacade messageEmailServiceFacade
+ void sendDeviceConfirmEmail(DeviceConfirmEmailDTO)
}
class com.welab.user.app.facade.application.MaumodalServiceFacade {
- MaumodalService maumodalService
+ UserTypeDTO getCurrentUserType(CurrentUserTypeQry)
}
class com.welab.user.app.facade.application.MaumodalServiceFacade$UserTypeDTO {
+ String userType
+ Long orgId
+ String productCode
}
class com.welab.user.model.UserCert {
- Long id
- Long orgId
- Long userId
- Byte certType
- String certCode
- String email
- Boolean valid
- Boolean status
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ Byte getCertType()
+ void setCertType(Byte)
+ String getCertCode()
+ void setCertCode(String)
+ String getEmail()
+ void setEmail(String)
+ Boolean getValid()
+ void setValid(Boolean)
+ Boolean getStatus()
+ void setStatus(Boolean)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String toString()
}
enum com.welab.user.enmu.UserStateEnum {
+  DISABLE
+  ENABLE
+  LOCK
- String typeName
- Integer typeValue
- <<Create>> UserStateEnum(String,Integer)
+ Byte getTypeValue()
+ {static} Byte getTypeValue(UserStateEnum)
+ {static} String getName(UserStateEnum)
+ {static} String getName(Integer)
}
class com.welab.user.test.service.impl.UserTokenServiceImplTest {
- UserTokenServiceImpl userTokenService
- BaseUserTokenService baseUserTokenService
- UserTokenExe userTokenExe
- BaseUserInfoService userInfoService
- {static} String TOKEN
+ void test_01_01_saveToken()
+ void test_01_02_getToken()
+ void test_01_03_deleteToken()
+ void test_02_01_deleteToken()
}
interface com.welab.user.service.IUserPinService {
~ Response<String> getLoginType(UserPinDTO)
~ Response<Boolean> addLoginPin(UserPasswordDTO)
~ Response<Boolean> putLoginPinBySMS(UserBaseDTO)
~ Response<Boolean> updatePasswordByOldPwd(UserPasswordDTO)
~ Response<Boolean> updatePasswordByUserId(UpdateUserPasswordDTO)
~ Response<Boolean> checkPinStateByUserId(Long)
~ Response<Boolean> putPinState(UserPinStateDTO)
~ Response<Boolean> putFingerprintState(UserPinStateDTO)
~ Response<String> getSmsKey(UserBaseDTO)
~ Response<Boolean> putLoginPinBySMSKey(UserBaseDTO)
~ Response<Boolean> checkUserPin(UserPinCheckDTO)
}
class com.welab.user.app.verify.impl.MobileFormatVerifyService {
+ boolean verify(UserBaseDTO)
}
class com.welab.user.model.Permissions {
- Long id
- Long orgId
- String type
- String name
- String cnName
- String permission
- String platform
- Date createdAt
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getType()
+ void setType(String)
+ String getName()
+ void setName(String)
+ String getCnName()
+ void setCnName(String)
+ String getPermission()
+ void setPermission(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ String getPlatform()
+ void setPlatform(String)
+ String toString()
}
class com.welab.user.vo.PinBlacklistVO {
- String pinBlacklist
}
class com.welab.user.test.job.ActiveAdminInfoJobTest {
- ActiveAdminInfoJob activeAdminInfoJob
+ void execute()
}
interface com.welab.user.mapper.PermissionsMapper {
~ List<String> selectPermissionByAdminIdAndType(Long,String)
~ List<Permissions> selectAll()
~ List<Permissions> selectByRoleId(Long)
}
class com.welab.user.app.manager.SeqNoManager {
- String appId
- String zookeeperUrl
- String username
- String password
- GeneratorConnectorFactory connector
+ void init()
+ long generateKey()
+ long[] generateKey(int)
}


java.io.Serializable <|.. com.welab.user.dto.MsgDTO
com.welab.user.service.IUserPinService <|.. com.welab.user.service.impl.UserPinServiceImpl
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.app.service.ButtonServiceTest
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.app.verify.FifCodeVerifyServiceMockTest
java.io.Serializable <|.. com.welab.user.vo.DevicesVO
java.io.Serializable <|.. com.welab.user.dto.DevicesDTO
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.app.base.BaseUserCertServiceTest
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.app.service.MenuServiceTest
java.io.Serializable <|.. com.welab.user.dto.UserPinCheckDTO
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.app.service.RoleServiceTest
java.io.Serializable <|.. com.welab.user.dto.UserPinDTO
java.io.Serializable <|.. com.welab.user.vo.TokenInfo
com.welab.user.model.AdminProductAuthExample +.. com.welab.user.model.AdminProductAuthExample$GeneratedCriteria
com.welab.user.model.AdminProductAuthExample +.. com.welab.user.model.AdminProductAuthExample$Criteria
com.welab.user.model.GeneratedCriteria <|-- com.welab.user.model.AdminProductAuthExample$Criteria
com.welab.user.model.AdminProductAuthExample +.. com.welab.user.model.AdminProductAuthExample$Criterion
java.io.Serializable <|.. com.welab.user.vo.RoleReqVo
com.welab.user.common.Urls +.. com.welab.user.common.Urls$User
com.welab.user.common.Urls +.. com.welab.user.common.Urls$UserToken
com.welab.user.common.Urls +.. com.welab.user.common.Urls$Permissions
com.welab.user.common.Urls +.. com.welab.user.common.Urls$Menu
com.welab.user.common.Urls +.. com.welab.user.common.Urls$Button
com.welab.user.common.Urls +.. com.welab.user.common.Urls$Admin
com.welab.user.common.Urls +.. com.welab.user.common.Urls$Role
com.welab.user.common.Urls +.. com.welab.user.common.Urls$TemporaryLoginInfo
com.welab.user.common.Urls +.. com.welab.user.common.Urls$AddresseeWhiteList
com.welab.user.common.Urls +.. com.welab.user.common.Urls$PinBlacklist
com.welab.user.mapper.DevicesMapper <|-- com.welab.user.mapper.ext.DevicesExtMapper
java.io.Serializable <|.. com.welab.user.vo.TemporaryLoginRspVo
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.service.impl.UserServiceImplTest
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.app.service.PinBlacklistServiceTest
java.io.Serializable <|.. com.welab.user.vo.AdminActiveTimeVo
java.io.Serializable <|.. com.welab.user.vo.AdminRspVo
com.welab.user.service.IUserTokenService <|.. com.welab.user.service.impl.UserTokenServiceImpl
java.io.Serializable <|.. com.welab.user.dto.UserRegisterDTO
com.welab.user.dto.UserBaseDTO <|-- com.welab.user.dto.UserRegisterDTO
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.service.impl.DevicesServiceImplTest
com.welab.user.dto.Serializable <|.. com.welab.user.dto.UserDeleteDto
com.welab.user.service.DevicesDubboService <|.. com.welab.user.service.impl.DevicesServiceImpl
java.io.Serializable <|.. com.welab.user.dto.UserPasswordDTO
com.welab.user.app.verify.VerifyService <|.. com.welab.user.app.verify.impl.MobileExistsVerifyService
com.welab.user.model.AdminLoginTrackExample +.. com.welab.user.model.AdminLoginTrackExample$GeneratedCriteria
com.welab.user.model.AdminLoginTrackExample +.. com.welab.user.model.AdminLoginTrackExample$Criteria
com.welab.user.model.GeneratedCriteria <|-- com.welab.user.model.AdminLoginTrackExample$Criteria
com.welab.user.model.AdminLoginTrackExample +.. com.welab.user.model.AdminLoginTrackExample$Criterion
java.io.Serializable <|.. com.welab.user.dto.ProductiveUserLoginDTO
java.io.Serializable <|.. com.welab.user.dto.UserDevicesStateDTO
com.welab.user.app.verify.VerifyService <|.. com.welab.user.app.verify.impl.PasswordVerifyService
java.io.Serializable <|.. com.welab.user.dto.UserBaseDTO
com.welab.user.dto.UserGoogleInfoDTO <|-- com.welab.user.dto.UserBaseDTO
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.command.user.UserLoginExeTest
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.service.impl.UserPinServiceImplTest
com.welab.user.service.UserService <|.. com.welab.user.service.impl.UserServiceImpl
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.app.verify.FifUserRegVerifyServiceMockTest
java.io.Serializable <|.. com.welab.user.dto.UserDeviceInfoDTO
java.io.Serializable <|.. com.welab.user.vo.UserRegisteredCountVo
java.io.Serializable <|.. com.welab.user.dto.RegUserDTO
java.io.Serializable <|.. com.welab.user.dto.UserDevicesDTO
org.springframework.web.filter.OncePerRequestFilter <|-- com.welab.user.filter.LogFilter
java.io.Serializable <|.. com.welab.user.dto.UserPinStateDTO
java.io.Serializable <|.. com.welab.user.dto.SmsCodeDTO
com.welab.user.service.DubboAdminService <|.. com.welab.user.service.impl.DubboAdminServiceImpl
java.io.Serializable <|.. com.welab.user.dto.UserGoogleInfoDTO
java.io.Serializable <|.. com.welab.user.vo.AdminReqVo
java.io.Serializable <|.. com.welab.user.dto.UpdateUserPasswordDTO
java.io.Serializable <|.. com.welab.user.dto.UserCertDTO
java.io.Serializable <|.. com.welab.user.vo.SendSmsReqVo
org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter <|-- com.welab.user.core.WebAppConfigurer
java.io.Serializable <|.. com.welab.user.dto.UserLoginDTO
com.welab.user.dto.UserBaseDTO <|-- com.welab.user.dto.UserLoginDTO
com.welab.user.app.verify.VerifyService <|.. com.welab.user.app.verify.impl.FifCodeVerifyService
com.welab.user.model.ProductMenusRelExample +.. com.welab.user.model.ProductMenusRelExample$GeneratedCriteria
com.welab.user.model.ProductMenusRelExample +.. com.welab.user.model.ProductMenusRelExample$Criteria
com.welab.user.model.GeneratedCriteria <|-- com.welab.user.model.ProductMenusRelExample$Criteria
com.welab.user.model.ProductMenusRelExample +.. com.welab.user.model.ProductMenusRelExample$Criterion
java.io.Serializable <|.. com.welab.user.dto.UserInfoDTO
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.user.job.AdminActiveTimeRefreshJob
com.welab.user.app.verify.VerifyService <|.. com.welab.user.app.verify.impl.PasswordFormatVerifyService
com.welab.common.exception.FastRuntimeException <|-- com.welab.user.exception.UserException
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.user.job.ActiveAdminInfoJob
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.facade.InviterMgmServiceFacadeTest
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.service.impl.AdminServiceImplTest
com.welab.user.app.verify.VerifyService <|.. com.welab.user.app.verify.impl.FifUserRegVerifyService
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.service.impl.DubboAdminServiceImplTest
java.io.Serializable <|.. com.welab.user.vo.UserInfoRequestVo
com.welab.user.vo.Comparable <|.. com.welab.user.vo.ActiveAdminInfoVo
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.app.service.PermissionsServiceTest
java.io.Serializable <|.. com.welab.user.vo.SaveProductMenusRelVo
com.welab.user.app.verify.VerifyService <|.. com.welab.user.app.verify.impl.SmsCodeVerifyService
com.welab.user.app.verify.VerifyService <|.. com.welab.user.app.verify.impl.OrgIdVerifyService
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.app.verify.FifCodeVerifyServiceTest
com.welab.user.app.verify.VerifyService <|.. com.welab.user.app.verify.impl.InviterCodeVerifyService
com.welab.user.app.facade.application.MaumodalServiceFacade +.. com.welab.user.app.facade.application.MaumodalServiceFacade$UserTypeDTO
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.service.impl.UserTokenServiceImplTest
com.welab.user.app.verify.VerifyService <|.. com.welab.user.app.verify.impl.MobileFormatVerifyService
com.welab.user.test.base.SimpleTest <|-- com.welab.user.test.job.ActiveAdminInfoJobTest
com.welab.common.keygen.KeyGenerator <|.. com.welab.user.app.manager.SeqNoManager
@enduml