@startuml
abstract class com.welab.message.app.manager.template.AbstractMessageTemplate {
# String getMessageBodyByFreemark(String,Map<String,Object>)
# String getMessageBodyByReplace(String,Map<String,String>)
}
class com.welab.message.app.manager.template.VcodeConfigManager {
- BackstageConfigSeviceFacade backstageConfigSeviceFacade
- String[] ruleKeys
+ VcodeConfig getVcodeConfig(SendSmsRequestVCode)
- boolean match(JSONObject,String,JSONObject)
}
class com.welab.message.app.manager.template.VcodeConfigManager$VcodeConfig {
- Integer timesCount
- Integer effectiveTime
}
class com.welab.message.utils.MessageConfigHolde {
- <<Create>> MessageConfigHolde()
+ {static} MessageConfig.ProductInfo getEmailCommonConfigByOrgId(Long)
+ {static} MessageConfig.SendMailAccountInfo getEmailAccountInfo(Long,String)
}
interface com.welab.message.service.MessageSmsReportService {
~ void saveJatisReport(JatisReportDTO)
}
class com.welab.message.dto.email.EmailTemplateConfDTO {
- {static} long serialVersionUID
- Long tmplConfId
- List<Long> orgIds
- Long orgId
- String tmplName
- String tmplDesc
- String tmplTitle
- Boolean htmlFlag
- Boolean state
- Date createdAt
- Date updatedAt
- String tmplContent
- int pageNum
- int pageSize
}
class com.welab.message.vo.WhatsAppMessageVo {
- String id
- String waId
- String name
- String loanNumber
- Long tmpId
- String tmpName
- Integer type
- String mobile
- String msgType
- String content
- String status
- Long sendAt
- Long readAt
- Long createAt
- String appTags
- Integer isReply
}
class com.welab.message.service.impl.msg.AppServiceImpl {
- MessagePushService messagePushService
# void processMsg(AppPushMsgDTO)
}
class com.welab.message.dto.push.AppPushMsgDTO {
- {static} long serialVersionUID
- Long userId
- Long orgId
- String templateName
- Map<String,String> replaceFieldMap
- Map<String,Object> eventMap
- String buttonCode
- Date sendTime
}
enum com.welab.message.enmu.ContentTypeEnum {
+  TEXT
+  MARKDOWN
+  IMAGE
+  NEWS
- String type
}
class com.welab.message.service.impl.MessageSmsConfServiceImpl {
- MessageTemplateConfMapper messageTemplateConfMapper
+ Response<PageInfo<SmsTemplateConfVO>> getSmsTemplateConfByPage(SmsTemplateConfDTO)
+ Response<Void> updateTemplateSmsConfById(SmsTemplateConfDTO)
+ List<String> getAllSmsTemplateName()
}
class com.welab.message.constants.WhatsAppConstant {
+ {static} String MESSAGE_KEY
+ {static} String REDIS_TOKEN_PREX_KEY
+ {static} String REDIS_WHATSAPP_PREX_KEY
+ {static} String MESSAGE_TIMING_MSG_KEY
+ {static} String MESSAGE_WHATS_APP_LOAN_NUMBER
+ {static} String MESSAGE_WHATS_APP_SEND_MOBILE
+ {static} String MESSAGE_TMPPARAM_KEY
+ {static} String MESSAGE_RESEND_KEY
+ {static} String MESSAGE_INVALIDKEY
- <<Create>> WhatsAppConstant()
}
enum com.welab.message.enmu.AppMsgServiceTypeEnum {
+  APP_PUSH
+  EVENT_APP_PUSH
+  SERVICE_APP_PUSH
- Byte type
}
class com.welab.message.vo.EmailTemplateConfVO {
- {static} long serialVersionUID
- Long orgId
- Long tmplConfId
- String tmplName
- String tmplDesc
- String tmplTitle
- Boolean htmlFlag
- Boolean state
- Date createdAt
- Date updatedAt
- String tmplContent
}
interface com.welab.message.mapper.ext.AppMessageExtMapper {
~ int updateReadAt(Long,List<String>,Date)
~ List<AppMessageDTO> selectByUserId(Long,Byte,Date)
~ List<AppMessageDTO> selectByUserIdForBefore(AppMessageExt)
~ int countByUserIdAndState(AppMessageExt)
~ void batchSaveAppMessage(List<AppMessage>)
~ AppMessage selectMsgForService(AppMessage)
}
interface com.welab.message.service.MessageSmsConfService {
~ Response<PageInfo<SmsTemplateConfVO>> getSmsTemplateConfByPage(SmsTemplateConfDTO)
~ Response<Void> updateTemplateSmsConfById(SmsTemplateConfDTO)
~ List<String> getAllSmsTemplateName()
}
class com.welab.message.model.AddresseeWhiteListExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> AddresseeWhiteListExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.AddresseeWhiteListExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andKeyIsNull()
+ Criteria andKeyIsNotNull()
+ Criteria andKeyEqualTo(String)
+ Criteria andKeyNotEqualTo(String)
+ Criteria andKeyGreaterThan(String)
+ Criteria andKeyGreaterThanOrEqualTo(String)
+ Criteria andKeyLessThan(String)
+ Criteria andKeyLessThanOrEqualTo(String)
+ Criteria andKeyLike(String)
+ Criteria andKeyNotLike(String)
+ Criteria andKeyIn(List<String>)
+ Criteria andKeyNotIn(List<String>)
+ Criteria andKeyBetween(String,String)
+ Criteria andKeyNotBetween(String,String)
+ Criteria andContentIsNull()
+ Criteria andContentIsNotNull()
+ Criteria andContentEqualTo(String)
+ Criteria andContentNotEqualTo(String)
+ Criteria andContentGreaterThan(String)
+ Criteria andContentGreaterThanOrEqualTo(String)
+ Criteria andContentLessThan(String)
+ Criteria andContentLessThanOrEqualTo(String)
+ Criteria andContentLike(String)
+ Criteria andContentNotLike(String)
+ Criteria andContentIn(List<String>)
+ Criteria andContentNotIn(List<String>)
+ Criteria andContentBetween(String,String)
+ Criteria andContentNotBetween(String,String)
+ Criteria andTypeIsNull()
+ Criteria andTypeIsNotNull()
+ Criteria andTypeEqualTo(Byte)
+ Criteria andTypeNotEqualTo(Byte)
+ Criteria andTypeGreaterThan(Byte)
+ Criteria andTypeGreaterThanOrEqualTo(Byte)
+ Criteria andTypeLessThan(Byte)
+ Criteria andTypeLessThanOrEqualTo(Byte)
+ Criteria andTypeIn(List<Byte>)
+ Criteria andTypeNotIn(List<Byte>)
+ Criteria andTypeBetween(Byte,Byte)
+ Criteria andTypeNotBetween(Byte,Byte)
+ Criteria andUpdateUserIsNull()
+ Criteria andUpdateUserIsNotNull()
+ Criteria andUpdateUserEqualTo(Long)
+ Criteria andUpdateUserNotEqualTo(Long)
+ Criteria andUpdateUserGreaterThan(Long)
+ Criteria andUpdateUserGreaterThanOrEqualTo(Long)
+ Criteria andUpdateUserLessThan(Long)
+ Criteria andUpdateUserLessThanOrEqualTo(Long)
+ Criteria andUpdateUserIn(List<Long>)
+ Criteria andUpdateUserNotIn(List<Long>)
+ Criteria andUpdateUserBetween(Long,Long)
+ Criteria andUpdateUserNotBetween(Long,Long)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.AddresseeWhiteListExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.AddresseeWhiteListExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.bean.BeanDefinitionTest {
+ void test()
}
class com.welab.message.model.ext.AppMessageExt {
- Date beforeDate
- String keyword
}
interface com.welab.message.mapper.MessageVcodeLogMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(MessageVcodeLog)
~ int insertSelective(MessageVcodeLog)
~ MessageVcodeLog selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(MessageVcodeLog)
~ int updateByPrimaryKey(MessageVcodeLog)
}
interface com.welab.message.mapper.MessageJatisReportMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(MessageJatisReport)
~ int insertSelective(MessageJatisReport)
~ MessageJatisReport selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(MessageJatisReport)
~ int updateByPrimaryKey(MessageJatisReport)
}
interface com.welab.message.mapper.PushTemplateConfMapper {
~ long countByExample(PushTemplateConfExample)
~ int deleteByExample(PushTemplateConfExample)
~ int deleteByPrimaryKey(Long)
~ int insert(PushTemplateConf)
~ int insertSelective(PushTemplateConf)
~ List<PushTemplateConf> selectByExample(PushTemplateConfExample)
~ PushTemplateConf selectByPrimaryKey(Long)
~ int updateByExampleSelective(PushTemplateConf,PushTemplateConfExample)
~ int updateByExample(PushTemplateConf,PushTemplateConfExample)
~ int updateByPrimaryKeySelective(PushTemplateConf)
~ int updateByPrimaryKey(PushTemplateConf)
}
class com.welab.message.core.mq.AppPushMqListener {
- MessagePushServiceImpl messagePushService
+ void onMessage(Message)
}
enum com.welab.message.enmu.EmailSendResEnum {
+  SUCCESS
+  PARAMETER_ERROR
+  OTHER_EXCEPTION
- int code
- boolean retry
- String desc
}
interface com.welab.message.mapper.AppMessageMapper {
~ long countByExample(AppMessageExample)
~ int deleteByExample(AppMessageExample)
~ int deleteByPrimaryKey(Long)
~ int insert(AppMessage)
~ int insertSelective(AppMessage)
~ List<AppMessage> selectByExampleWithBLOBs(AppMessageExample)
~ List<AppMessage> selectByExample(AppMessageExample)
~ AppMessage selectByPrimaryKey(Long)
~ int updateByExampleSelective(AppMessage,AppMessageExample)
~ int updateByExampleWithBLOBs(AppMessage,AppMessageExample)
~ int updateByExample(AppMessage,AppMessageExample)
~ int updateByPrimaryKeySelective(AppMessage)
~ int updateByPrimaryKeyWithBLOBs(AppMessage)
~ int updateByPrimaryKey(AppMessage)
}
class com.welab.message.dto.push.PushTemplateConfDTO {
- {static} long serialVersionUID
- Long id
- Byte msgType
- Long orgId
- String tmplMsgTitle
- String tmplName
- String tmplDesc
- String tmplContent
- Boolean state
- String category
- int pageNum
- int pageSize
}
class com.welab.message.app.base.BaseCmsgTemplateService {
- CmsgTemplateMapper cmsgTemplateMapper
+ CmsgTemplate findTemplate(String)
}
interface com.welab.message.common.Urls {
~ String ROOT
~ String ROOT_DESC
~ String V1
~ String NO_AUTH
}
interface com.welab.message.common.Urls$AppMessage {
~ String V1_APP
~ String V1_PAGE
~ String V1_PAGE_DESC
~ String V1_DEAT
~ String V1_DEAT_DESC
~ String V1_UNREAD_NUMBER
~ String V1_UNREAD_NUMBER_DESC
~ String V1_DEAT_PUSH
~ String V1_DEAT_PUSH_DESC
~ String V1_SERVICE_APP_MSG_LIST
~ String V1_SERVICE_APP_MSG_LIST_DESC
}
interface com.welab.message.common.Urls$SmsMessage {
~ String V1_REPORT_JATIS
~ String V1_REPORT_JATIS_DESC
~ String V1_SMS_SEND_VCODE
~ String V1_SMS_SEND_VCODE_DESC
~ String KREDDO_CHECK
~ String KREDDO_CHECK_DESC
~ String V1_WHATSAPP_LOGIN_CONFIG
~ String V1_WHATSAPP_LOGIN_CONFIG_DESC
}
interface com.welab.message.common.Urls$PushMessage {
~ String V1_PUSH
~ String V1_PUSH_DESC
~ String V1_PUSH_TEST
~ String V1_PUSH_TEST_DESC
~ String V1_PUSH_BY_USER
~ String V1_PUSH_BY_USER_DESC
~ String V1_PUSH_BATCH
~ String V1_PUSH_BATCH_DESC
}
interface com.welab.message.common.Urls$AppToken {
~ String V1_TOKEN_QUERY
~ String V1_TOKEN_QUERY_DESC
~ String V1_TOKEN_SAVE
~ String V1_TOKEN_SAVE_DESC
~ String V1_TOKEN_QUERY_BYUSERID
~ String V1_TOKEN_QUERY_BYUSERID_DESC
}
interface com.welab.message.common.Urls$AppTokenUnregistered {
~ String V1_TOKEN_UNREGISTERED_SAVE
~ String V1_TOKEN_UNREGISTERED_SAVE_DESC
}
interface com.welab.message.common.Urls$WhatsApp {
~ String V1_REPLY
~ String V1_REPLY_DESC
}
interface com.welab.message.common.Urls$WebSocket {
~ String V1_WHATSAPPWS
~ String V1_WHATSAPPWS_DESC
}
class com.welab.message.model.MessageJatisReport {
- Long id
- String sender
- String messageId
- String deliverystatus
- String description
- Date datereceived
- Date createAt
- Date updateAt
+ Long getId()
+ void setId(Long)
+ String getSender()
+ void setSender(String)
+ String getMessageId()
+ void setMessageId(String)
+ String getDeliverystatus()
+ void setDeliverystatus(String)
+ String getDescription()
+ void setDescription(String)
+ Date getDatereceived()
+ void setDatereceived(Date)
+ Date getCreateAt()
+ void setCreateAt(Date)
+ Date getUpdateAt()
+ void setUpdateAt(Date)
}
interface com.welab.message.service.MessagePushConfService {
~ Response<PageInfo<PushTemplateConfVO>> getPushTmplConfByPage(PushTemplateConfDTO)
~ Response getPushTmplCategoryList(Long)
~ Response<Void> updatePushTmplConfById(PushTemplateConfDTO)
~ List<String> getAllPushTemplateName()
~ Response<PushTemplateConfVO> findPushTmplConf(PushTemplateConfDTO)
}
class com.welab.message.model.CmsgTemplateExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> CmsgTemplateExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.CmsgTemplateExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andTemplateNameIsNull()
+ Criteria andTemplateNameIsNotNull()
+ Criteria andTemplateNameEqualTo(String)
+ Criteria andTemplateNameNotEqualTo(String)
+ Criteria andTemplateNameGreaterThan(String)
+ Criteria andTemplateNameGreaterThanOrEqualTo(String)
+ Criteria andTemplateNameLessThan(String)
+ Criteria andTemplateNameLessThanOrEqualTo(String)
+ Criteria andTemplateNameLike(String)
+ Criteria andTemplateNameNotLike(String)
+ Criteria andTemplateNameIn(List<String>)
+ Criteria andTemplateNameNotIn(List<String>)
+ Criteria andTemplateNameBetween(String,String)
+ Criteria andTemplateNameNotBetween(String,String)
+ Criteria andTemplateContentIsNull()
+ Criteria andTemplateContentIsNotNull()
+ Criteria andTemplateContentEqualTo(String)
+ Criteria andTemplateContentNotEqualTo(String)
+ Criteria andTemplateContentGreaterThan(String)
+ Criteria andTemplateContentGreaterThanOrEqualTo(String)
+ Criteria andTemplateContentLessThan(String)
+ Criteria andTemplateContentLessThanOrEqualTo(String)
+ Criteria andTemplateContentLike(String)
+ Criteria andTemplateContentNotLike(String)
+ Criteria andTemplateContentIn(List<String>)
+ Criteria andTemplateContentNotIn(List<String>)
+ Criteria andTemplateContentBetween(String,String)
+ Criteria andTemplateContentNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.CmsgTemplateExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.CmsgTemplateExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.model.ext.AddresseeWhiteListExt {
- String source
- String title
- String mobiles
- String toUserMails
- String ccUserMails
- String bccUserMails
- List<Byte> types
}
class com.welab.message.service.impl.MessageSmsReportServiceImpl {
- MessageJatisReportMapper messageJatisReportMapper
+ void saveJatisReport(JatisReportDTO)
}
class com.welab.message.interceptor.websocket.WhatsAppWebSocketInterceptor {
- String TOKEN_PREFIX
- JedisCluster jedisCluster
+ boolean beforeHandshake(ServerHttpRequest,ServerHttpResponse,WebSocketHandler,Map<String,Object>)
+ void afterHandshake(ServerHttpRequest,ServerHttpResponse,WebSocketHandler,Exception)
}
class com.welab.message.model.CmsgContactsExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> CmsgContactsExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.CmsgContactsExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andCmsgUserIdIsNull()
+ Criteria andCmsgUserIdIsNotNull()
+ Criteria andCmsgUserIdEqualTo(Long)
+ Criteria andCmsgUserIdNotEqualTo(Long)
+ Criteria andCmsgUserIdGreaterThan(Long)
+ Criteria andCmsgUserIdGreaterThanOrEqualTo(Long)
+ Criteria andCmsgUserIdLessThan(Long)
+ Criteria andCmsgUserIdLessThanOrEqualTo(Long)
+ Criteria andCmsgUserIdIn(List<Long>)
+ Criteria andCmsgUserIdNotIn(List<Long>)
+ Criteria andCmsgUserIdBetween(Long,Long)
+ Criteria andCmsgUserIdNotBetween(Long,Long)
+ Criteria andCmsgUserMobileIsNull()
+ Criteria andCmsgUserMobileIsNotNull()
+ Criteria andCmsgUserMobileEqualTo(String)
+ Criteria andCmsgUserMobileNotEqualTo(String)
+ Criteria andCmsgUserMobileGreaterThan(String)
+ Criteria andCmsgUserMobileGreaterThanOrEqualTo(String)
+ Criteria andCmsgUserMobileLessThan(String)
+ Criteria andCmsgUserMobileLessThanOrEqualTo(String)
+ Criteria andCmsgUserMobileLike(String)
+ Criteria andCmsgUserMobileNotLike(String)
+ Criteria andCmsgUserMobileIn(List<String>)
+ Criteria andCmsgUserMobileNotIn(List<String>)
+ Criteria andCmsgUserMobileBetween(String,String)
+ Criteria andCmsgUserMobileNotBetween(String,String)
+ Criteria andUserNameIsNull()
+ Criteria andUserNameIsNotNull()
+ Criteria andUserNameEqualTo(String)
+ Criteria andUserNameNotEqualTo(String)
+ Criteria andUserNameGreaterThan(String)
+ Criteria andUserNameGreaterThanOrEqualTo(String)
+ Criteria andUserNameLessThan(String)
+ Criteria andUserNameLessThanOrEqualTo(String)
+ Criteria andUserNameLike(String)
+ Criteria andUserNameNotLike(String)
+ Criteria andUserNameIn(List<String>)
+ Criteria andUserNameNotIn(List<String>)
+ Criteria andUserNameBetween(String,String)
+ Criteria andUserNameNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.CmsgContactsExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.model.CmsgContactsExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.WhatsappTemplateConf {
- Long tmplConfId
- Long orgId
- String tmplName
- Byte tmpType
- String tmplTitle
- String tmplDesc
- String nameSpace
- String elementName
- String language
- String sureTmplName
- String negaTmplName
- String otherTmplName
- Boolean state
- Boolean isReply
- Boolean isEnd
- Integer sort
- String appTags
- Date createdAt
- Date updatedAt
- String tmplContent
+ Long getTmplConfId()
+ void setTmplConfId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getTmplName()
+ void setTmplName(String)
+ Byte getTmpType()
+ void setTmpType(Byte)
+ String getTmplTitle()
+ void setTmplTitle(String)
+ String getTmplDesc()
+ void setTmplDesc(String)
+ String getNameSpace()
+ void setNameSpace(String)
+ String getElementName()
+ void setElementName(String)
+ String getLanguage()
+ void setLanguage(String)
+ String getSureTmplName()
+ void setSureTmplName(String)
+ String getNegaTmplName()
+ void setNegaTmplName(String)
+ String getOtherTmplName()
+ void setOtherTmplName(String)
+ Boolean getState()
+ void setState(Boolean)
+ Boolean getIsReply()
+ void setIsReply(Boolean)
+ Boolean getIsEnd()
+ void setIsEnd(Boolean)
+ Integer getSort()
+ void setSort(Integer)
+ String getAppTags()
+ void setAppTags(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getTmplContent()
+ void setTmplContent(String)
}
class com.welab.message.model.AppToken {
- Long id
- Long orgId
- Long userId
- String tokenType
- String token
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ String getTokenType()
+ void setTokenType(String)
+ String getToken()
+ void setToken(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.dto.mq.FifCashierRejectedDto {
- {static} long serialVersionUID
- String loanNumber
- String state
- String reason
- Date date
}
class com.welab.message.core.config.MultiServiceConfiguration {
+ void doAnnotation()
}
interface com.welab.message.service.TimingMsgDubboService {
~ void saveTimingSms(String,Date)
~ void saveTimingEmail(String,Date)
~ void saveTimingAppMsg(String,Date)
~ void saveTimingMsg(TimingMsgDTO)
}
class com.welab.message.app.impl.AppTemplateMessageServiceImpl {
- BaseAppMessageService baseAppMessageService
- AppMessageTemplateManager appMessageTemplateManager
+ Response<Long> sendTemplateAppMsg(AppMessageTemplateDTO)
}
class com.welab.message.test.SimpleTest {
+ <<Create>> SimpleTest()
}
class com.welab.message.core.config.MongoConfig {
+ MappingMongoConverter mappingMongoConverter(MongoDatabaseFactory,MongoMappingContext,BeanFactory)
}
class com.welab.message.controller.MessageSmsController {
- {static} Logger log
- MessageSmsReportService messageSmsReportService
- MessageSmsService messageSmsService
- WhiteListService whiteListDubboService
- WhatsAppServiceImpl whatsAppServiceImpl
- String APP_ID
+ void jatisReport(JatisReportDTO,HttpServletResponse)
- void printData(HttpServletResponse,String)
+ Response<Long> sendVCode(Long,String,String,Boolean,String,Byte,String)
+ Response<Object> getWhatsappLoginConfig()
}
interface com.welab.message.service.PushTemplateService {
}
class com.welab.message.cmsg.CmsgTest {
- CmsgSendCmdExe cmsgSendCmdExe
+ void send()
}
class com.welab.message.dto.sms.JatisReportDTO {
- String userid
- String password
- String sender
- String messageId
- String deliverystatus
- String description
- String datereceived
+ String getUserid()
+ void setUserid(String)
+ String getPassword()
+ void setPassword(String)
+ String getSender()
+ void setSender(String)
+ String getMessageId()
+ void setMessageId(String)
+ String getDeliverystatus()
+ void setDeliverystatus(String)
+ String getDescription()
+ void setDescription(String)
+ String getDatereceived()
+ void setDatereceived(String)
}
class com.welab.message.utils.WebSocketHolder {
- {static} ConcurrentHashMap<String,Set<WebSocketSession>> WHATS_APP_WEB_SOCKET_SESSION_MAP
- {static} ConcurrentHashMap<String,HeartbeatInfo> WEB_SOCKET_HEARTBEAT_MAP
+ {static} int DEFAULT_WEB_SOCKET_HEARTBEAT_TIME
+ {static} int DEFAULT_WEB_SOCKET_HEARTBEAT_FAILURES_THRESHOLD
- {static} HashedWheelTimer WEB_SOCKET_HEARTBEAT_TIMER
- {static} MdcThreadPoolExecutor fixedThreadPool
+ {static} String APPROVAL_WHATSAPP_MSG_HEARTBEAT_TYPE
+ {static} String APPROVAL_WHATSAPP_MSG_COMING_TYPE
- <<Create>> WebSocketHolder()
+ {static} Long getWhatsAppSessionUserId(WebSocketSession)
+ {static} String getWhatsAppSessionLoanNumber(WebSocketSession)
+ {static} String getWhatsAppSessionSendMobile(WebSocketSession)
+ {static} void updateApprovalWhatsAppHeartbeatInfo(WebSocketSession)
- {static} void handApprovalWhatsAppHeartbeatInfo(WebSocketSession)
+ {static} String buildWhatsAppSessionKey(String,String)
+ {static} void addWhatsAppSession(WebSocketSession)
+ {static} void removeWhatsAppSession(WebSocketSession)
+ {static} void replyWhatsAppMessageByLoanNumber(String,String,String)
+ {static} boolean sendTextMessage(WebSocketSession,TextMessage)
+ {static} void main(String[])
}
class com.welab.message.utils.WebSocketHolder$WebSocketNoticeMsg {
- String msgType
- Object data
}
class com.welab.message.utils.WebSocketHolder$HeartbeatInfo {
- String sessionId
- long lastActiveTime
- int failuresCount
}
class com.welab.message.dto.whatsapp.QryWhatsMsgReq {
- String loanNumber
- String mobile
- WhatsTypeEnum type
- WhatsMsgStatusEnum status
- WhatsAppMsgTypeEnum msgType
- AppTagsEnum appTags
- Boolean isReply
- Integer curPage
- Integer pageSize
}
class com.welab.message.model.SpecialSendConfigExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> SpecialSendConfigExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.SpecialSendConfigExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andTypeIsNull()
+ Criteria andTypeIsNotNull()
+ Criteria andTypeEqualTo(Byte)
+ Criteria andTypeNotEqualTo(Byte)
+ Criteria andTypeGreaterThan(Byte)
+ Criteria andTypeGreaterThanOrEqualTo(Byte)
+ Criteria andTypeLessThan(Byte)
+ Criteria andTypeLessThanOrEqualTo(Byte)
+ Criteria andTypeIn(List<Byte>)
+ Criteria andTypeNotIn(List<Byte>)
+ Criteria andTypeBetween(Byte,Byte)
+ Criteria andTypeNotBetween(Byte,Byte)
+ Criteria andBusiCodeIsNull()
+ Criteria andBusiCodeIsNotNull()
+ Criteria andBusiCodeEqualTo(String)
+ Criteria andBusiCodeNotEqualTo(String)
+ Criteria andBusiCodeGreaterThan(String)
+ Criteria andBusiCodeGreaterThanOrEqualTo(String)
+ Criteria andBusiCodeLessThan(String)
+ Criteria andBusiCodeLessThanOrEqualTo(String)
+ Criteria andBusiCodeLike(String)
+ Criteria andBusiCodeNotLike(String)
+ Criteria andBusiCodeIn(List<String>)
+ Criteria andBusiCodeNotIn(List<String>)
+ Criteria andBusiCodeBetween(String,String)
+ Criteria andBusiCodeNotBetween(String,String)
+ Criteria andTitleIsNull()
+ Criteria andTitleIsNotNull()
+ Criteria andTitleEqualTo(String)
+ Criteria andTitleNotEqualTo(String)
+ Criteria andTitleGreaterThan(String)
+ Criteria andTitleGreaterThanOrEqualTo(String)
+ Criteria andTitleLessThan(String)
+ Criteria andTitleLessThanOrEqualTo(String)
+ Criteria andTitleLike(String)
+ Criteria andTitleNotLike(String)
+ Criteria andTitleIn(List<String>)
+ Criteria andTitleNotIn(List<String>)
+ Criteria andTitleBetween(String,String)
+ Criteria andTitleNotBetween(String,String)
+ Criteria andDescIsNull()
+ Criteria andDescIsNotNull()
+ Criteria andDescEqualTo(String)
+ Criteria andDescNotEqualTo(String)
+ Criteria andDescGreaterThan(String)
+ Criteria andDescGreaterThanOrEqualTo(String)
+ Criteria andDescLessThan(String)
+ Criteria andDescLessThanOrEqualTo(String)
+ Criteria andDescLike(String)
+ Criteria andDescNotLike(String)
+ Criteria andDescIn(List<String>)
+ Criteria andDescNotIn(List<String>)
+ Criteria andDescBetween(String,String)
+ Criteria andDescNotBetween(String,String)
+ Criteria andSourceIsNull()
+ Criteria andSourceIsNotNull()
+ Criteria andSourceEqualTo(String)
+ Criteria andSourceNotEqualTo(String)
+ Criteria andSourceGreaterThan(String)
+ Criteria andSourceGreaterThanOrEqualTo(String)
+ Criteria andSourceLessThan(String)
+ Criteria andSourceLessThanOrEqualTo(String)
+ Criteria andSourceLike(String)
+ Criteria andSourceNotLike(String)
+ Criteria andSourceIn(List<String>)
+ Criteria andSourceNotIn(List<String>)
+ Criteria andSourceBetween(String,String)
+ Criteria andSourceNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.SpecialSendConfigExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.SpecialSendConfigExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
enum com.welab.message.enmu.EmailTemplateForSmsEnum {
+  APPLICATION_AGREEMENT_SIGN
- String typeName
- String typeValue
- <<Create>> EmailTemplateForSmsEnum(String,String)
+ String getTypeValue()
+ {static} String getTypeValue(EmailTemplateForSmsEnum)
+ {static} String getName(EmailTemplateForSmsEnum)
+ {static} String getName(String)
}
class com.welab.message.model.WhatsappMessage {
- Long id
- String mogoId
- String loanNumber
- Byte type
- String mobile
- Byte tmpId
- String tmpName
- String content
- String status
- String kreddoKey
- String appTags
- Byte isReply
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getMogoId()
+ void setMogoId(String)
+ String getLoanNumber()
+ void setLoanNumber(String)
+ Byte getType()
+ void setType(Byte)
+ String getMobile()
+ void setMobile(String)
+ Byte getTmpId()
+ void setTmpId(Byte)
+ String getTmpName()
+ void setTmpName(String)
+ String getContent()
+ void setContent(String)
+ String getStatus()
+ void setStatus(String)
+ String getKreddoKey()
+ void setKreddoKey(String)
+ String getAppTags()
+ void setAppTags(String)
+ Byte getIsReply()
+ void setIsReply(Byte)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.bean.TestBeanClass {
+ void test()
}
class com.welab.message.dto.app.AppMessageTemplateDTO {
- {static} long serialVersionUID
- Long userId
- Long orgId
- String tmplName
- Map<String,String> params
- Map<String,Object> modelMap
}
interface com.welab.message.service.IKreddoSendMsgService {
~ String KREDDO_SMS_INITIATIVE
~ String KREDDO_SMS_PASSIVE
~ String KREDDO_WHATSAPP
~ String KREDDO_WHATSAPP2
~ String TEMPLATECODE_INITIATIVE
~ String TEMPLATECODE_PASSIVE
~ String getToken()
~ String getTokenByType(String)
}
class com.welab.message.dto.mq.FifCashierSendbackDto {
- {static} long serialVersionUID
- String loanNumber
- String reason
- Date date
}
class com.welab.message.service.impl.MessageAppServiceImplTest {
- MessageAppService messageAppService
+ void send()
+ void read()
+ void getListAppMessage()
+ void getPageAppMessage()
}
class com.welab.message.dto.mq.InvoiceDto {
- {static} long serialVersionUID
- Long userId
- String externalId
- Boolean isHigh
- Long amount
- Long feesPaidAmount
- String status
- String payerEmail
- String description
- Long adjustedReceivedAmount
- String paymentMethod
- String bankCode
- Long paidAmount
- String retailOutletName
- Date paidDate
- String loanNum
}
class com.welab.message.service.impl.WhatsAppServiceImpl {
- String whatsAppUserName
- String whatsAppPassWord
- String basic
- String loginUrl
- String contactsUrl
- String sendMsgUrl
- Integer whatsAppNum
- Integer whatsAppEnable
- String toMobile
- String body
- String whiteList
- String APP_ID
- BackstageConfigService backstageConfigService
- JedisCluster jedisCluster
- WhatsAppMsgService whatsAppMsgService
- WhatsAppTemplateConfService whatsAppTemplateConfService
+ Map<String,String> getCacheToken()
- JSONObject getToken()
+ Response<List<ContactDto>> checkContacts(List<String>)
+ Response check(WhatsMsgReq)
+ Response<Void> sendMsg(WhatsMsgReq)
+ Response<PageInfo<WhatsAppMessageVo>> queryMsg(QryWhatsMsgReq)
+ WhatsappTemplateConfExample getExample(WhatsappTmplConfReq)
+ Response<List<WhatsappTemplateConfVo>> findAllTmpName(WhatsappTmplConfReq)
+ {static} void main(String[])
+ Response<Object> getWhatsappLoginConfig()
+ Response<Object> getWhatsappLoginConfig(String)
}
enum com.welab.message.enmu.mq.FanoutMessageMetaInfoEnum {
- MessageTypeEnum messageTypeEnum
+ String queueName
+ String bindExchangeName
+ String routingKey
+ String deadExchangeName
+ String deadRoutingKey
+ String tag
+ String listenerContainerFactoryBeanId
}
class com.welab.message.dto.mq.DisbursementDto {
- {static} long serialVersionUID
- Long userId
- String externalId
- Long amount
- String bankCode
- String accountHolderName
- String failure
- String failureCode
- String status
- Date paidDate
}
interface com.welab.message.mapper.MessageTemplateConfMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(MessageTemplateConf)
~ int insertSelective(MessageTemplateConf)
~ MessageTemplateConf selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(MessageTemplateConf)
~ int updateByPrimaryKey(MessageTemplateConf)
~ MessageTemplateConf selectByTmplName(String,Long)
~ List<MessageTemplateConf> getSmsTemplateConfByPage(SmsTemplateConfDTO)
~ List<String> getAllSmsTemplateName()
}
class com.welab.message.dto.mq.BaseMqDto {
- {static} long serialVersionUID
- String ip
- Date activeDate
}
enum com.welab.message.enmu.TimingMsgTypeEnum {
+  APP
+  SMS
+  EMAIL
- Byte type
- String bean
+ {static} TimingMsgTypeEnum getByType(Byte)
}
class com.welab.message.facade.BackstageConfigSeviceFacade {
- BackstageConfigService backstageConfigService
+ JSONObject getCacheJSONObj(String)
+ String getCacheConfigValue(String)
}
interface com.welab.message.mapper.ext.MessageVcodeLogExtMapper {
~ Long countSend(MessageVcodeLog)
~ MessageVcodeLog lastVcode(MessageVcodeLog)
}
class com.welab.message.core.config.ApiConfig {
- Map<String,Config> cfg
+ Config getConfigByType(String)
}
class com.welab.message.core.config.ApiConfig$Config {
- String host
- String accessKey
- String secretKey
- String keyCode
- String templateCode
- String templateMap
}
class com.welab.message.config.MqMetaInfoRegistryImpl {
+ List<BaseQueueEnum> registryMetaInfo()
}
enum com.welab.message.dto.whatsapp.WhatsTypeEnum {
+  send
+  reply
- int type
- String val
~ <<Create>> WhatsTypeEnum(int,String)
+ int getType()
+ String getVal()
}
class com.welab.message.utils.HttpUtil {
- {static} Logger log
- {static} String UTF8_ENCODING
- {static} PoolingHttpClientConnectionManager connMgr
- {static} RequestConfig requestConfig
- {static} int MAX_TIMEOUT
- {static} SSLConnectionSocketFactory socketFactory
- {static} List<BasicNameValuePair> mapToBasicNameValuePair(Map<String,?>)
+ {static} String sendGet(String,Map<String,String>,Map<String,String>,CloseableHttpClient,boolean)
+ {static} String sendGetHttps(String,Map<String,String>,Map<String,String>)
+ {static} String sendGet(String,Map<String,String>,Map<String,String>)
+ {static} String sendGet(String,Map<String,String>)
- {static} HttpResponseSimpleData doPostResponseObj(String,Map<String,String>,Map<String,String>,CloseableHttpClient,boolean)
+ {static} HttpResponseSimpleData doPostResponseObj(String,String,Map<String,String>,CloseableHttpClient,boolean)
+ {static} String doPost(String,String,Map<String,String>,CloseableHttpClient,boolean)
+ {static} String doPostHttps(String,String,Map<String,String>)
+ {static} HttpResponseSimpleData doPost(String,String,Map<String,String>)
+ {static} HttpResponseSimpleData doPost(String,Map<String,String>,Map<String,String>)
+ {static} RestTemplate getRestTemplate()
+ {static} RestTemplate getRestTemplate(String,String)
+ {static} ResponseEntity<String> sendRestRequest(String,org.springframework.http.HttpEntity<String>)
+ {static} void main(String[])
}
class com.welab.message.utils.HttpUtil$HttpResponseSimpleData {
~ int code
~ String respContent
}
class com.welab.message.service.Sms.JatisSmsServiceImpl {
- {static} Logger log
- String jatisSmsUrl
- String jatisSmsUserid
- String jatisSmsPassword
- String jatisSmsSender
- String jatisSmsDivision
- String jatisSmsBatchname
- String messageSmsSwitch
- String MESSAGE_SMS_MOBILE_WHITELIST
- {static} String SMS_SWITCH_OPEN
- {static} String MOBILE_PREFIX
+ SendSmsCommonResponse send(String,String,String)
- Map<String,Object> convertResponse(String)
- String handleMobile(String)
+ Boolean inWhitelist(String)
}
interface com.welab.message.mapper.EmailMessageLogMapper {
~ long countByExample(EmailMessageLogExample)
~ int deleteByExample(EmailMessageLogExample)
~ int deleteByPrimaryKey(Long)
~ int insert(EmailMessageLogWithBLOBs)
~ int insertSelective(EmailMessageLogWithBLOBs)
~ List<EmailMessageLogWithBLOBs> selectByExampleWithBLOBs(EmailMessageLogExample)
~ List<EmailMessageLog> selectByExample(EmailMessageLogExample)
~ EmailMessageLogWithBLOBs selectByPrimaryKey(Long)
~ int updateByExampleSelective(EmailMessageLogWithBLOBs,EmailMessageLogExample)
~ int updateByExampleWithBLOBs(EmailMessageLogWithBLOBs,EmailMessageLogExample)
~ int updateByExample(EmailMessageLog,EmailMessageLogExample)
~ int updateByPrimaryKeySelective(EmailMessageLogWithBLOBs)
~ int updateByPrimaryKeyWithBLOBs(EmailMessageLogWithBLOBs)
~ int updateByPrimaryKey(EmailMessageLog)
}
interface com.welab.message.service.MessageEmailService {
~ Response<Void> sendMail(MailDTO)
~ Response<Void> sendMailByTmplName(MailDTO)
}
class com.welab.message.dto.whatsapp.WhatsMsgReq {
- WhatsAppMsgTypeEnum msgType
- Long orgId
- String loanNumber
- AppTagsEnum appTags
- String mobile
- String text
- String tmpName
- LinkedHashMap<String,String> tmpMap
- String imageId
- String caption
}
enum com.welab.message.enmu.MessageServiceTypeEnum {
+  Semua
+  Pengajuan
+  Pencairan
+  Pembayaran
+  Jatuh_Tempo
- Byte serviceType
- String name
- {static} Map<String,MessageServiceTypeEnum> map
+ {static} String coverName(Byte)
+ {static} MessageServiceTypeEnum mapServiceType(String)
}
class com.welab.message.core.mq.RabbitMqConfig {
- String whatsAppExchange
+ FanoutExchange fanoutExchange()
+ Queue welabSeaEmailQueue()
+ Queue welabSeaEmailQueueV2()
+ Queue welabSeaAppPushQueue()
~ FanoutExchange welabSeaWebSocketFanoutExchange()
+ Queue welabSeaWebSocketQueue()
~ Binding bindingWelabSeaWebSocketExchange(Queue,FanoutExchange)
+ SimpleMessageListenerContainer welabSeaWebSocketMessageContainer(ConnectionFactory,Queue,WebSocketMqListener)
+ Queue appPushStateQueue()
+ SimpleRabbitListenerContainerFactory buildEmailMqContainerFactory(SimpleRabbitListenerContainerFactoryConfigurer,ConnectionFactory)
}
abstract class com.welab.message.service.init.AbstractInitService {
+ {abstract}void init()
+ void run()
}
class com.welab.message.service.push.maucash.MaucashMsgPush {
- String FCM_URL
- String SECRET_KEY
- String PREFIX_SECRET_KEY
# PushAuthBean buildAuth()
}
class com.welab.message.service.init.AddresseeWhiteListInitService {
- AddresseeWhiteListServiceImpl addresseeWhiteListService
+ void init()
- void loadEmail()
}
class com.welab.message.controller.WhatsAppController {
- String whatsAppExchange
- MessageProducer messageProducer
- WhatsAppMsgService whatsAppMsgService
- BackstageConfigSeviceFacade backstageConfigService
- KreddoSendMsgServiceImpl kreddoSendMsgService
- MessageMqService messageMqService
- MessageSmsServiceImpl messageSmsServiceImpl
- UserSendWaForVcodeCmdExe userSendWaForVcodeCmdExe
- String APP_ID
- MessageEmailService messageEmailService
+ Map<String,Object> receipt(HttpServletRequest)
+ Response<Object> checkKreddoMSG(HttpServletRequest)
- void sendKreddoImoprtResultEmail(String)
}
class com.welab.message.service.dubbo.AddresseeWhiteListDubboServiceImpl {
- SpecialSendConfigMapper specialSendConfigMapper
- AddresseeWhiteListServiceImpl addresseeWhiteListService
+ List<SpecialEmailSourceDTO> querySpecialEmailReceive()
+ SpecialEmailReceiverDTO queryMobileWhiteList()
+ void saveMobileWhiteList(SpecialEmailReceiverDTO)
+ void saveEmailTaskWhiteList(SpecialEmailReceiverDTO)
}
interface com.welab.message.mapper.ServicePushMessageMapper {
~ long countByExample(ServicePushMessageExample)
~ int deleteByExample(ServicePushMessageExample)
~ int deleteByPrimaryKey(Long)
~ int insert(ServicePushMessage)
~ int insertSelective(ServicePushMessage)
~ List<ServicePushMessage> selectByExample(ServicePushMessageExample)
~ ServicePushMessage selectByPrimaryKey(Long)
~ int updateByExampleSelective(ServicePushMessage,ServicePushMessageExample)
~ int updateByExample(ServicePushMessage,ServicePushMessageExample)
~ int updateByPrimaryKeySelective(ServicePushMessage)
~ int updateByPrimaryKey(ServicePushMessage)
}
class com.welab.message.dto.sms.SmsTemplateConfDTO {
- {static} long serialVersionUID
- Long tmplConfId
- Long orgId
- String tmplName
- String tmplDesc
- String tmplContent
- Boolean state
- int pageNum
- int pageSize
}
class com.welab.message.model.MessageSmsLog {
- Long msgSmsId
- Long orgId
- String mobile
- String templateName
- String content
- String operateSign
- Date accessTime
- Date sendTime
- String vendor
- String rspCode
- String rspDesc
- String rspMsgid
- Date finishTime
- String tags
- Date createdAt
- Date updatedAt
+ Long getMsgSmsId()
+ void setMsgSmsId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getMobile()
+ void setMobile(String)
+ String getTemplateName()
+ void setTemplateName(String)
+ String getContent()
+ void setContent(String)
+ String getOperateSign()
+ void setOperateSign(String)
+ Date getAccessTime()
+ void setAccessTime(Date)
+ Date getSendTime()
+ void setSendTime(Date)
+ String getVendor()
+ void setVendor(String)
+ String getRspCode()
+ void setRspCode(String)
+ String getRspDesc()
+ void setRspDesc(String)
+ String getRspMsgid()
+ void setRspMsgid(String)
+ Date getFinishTime()
+ void setFinishTime(Date)
+ String getTags()
+ void setTags(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.app.base.BaseEmailMessageLogService {
- EmailMessageLogMapper emailMessageLogMapper
+ Long insertEmailMessageLog(EmailMessageLogWithBLOBs)
+ int updateById(EmailMessageLogWithBLOBs)
}
class com.welab.message.core.config.InitServiceConfiguration {
- ApplicationContext applicationContext
+ void run(String)
}
class com.welab.message.service.impl.MessageAppServiceImpl {
- Logger logger
- BaseAppMessageService baseAppMessageService
- AppMessageExtMapper appMessageExtMapper
- AppMessageMapper appMessageMapper
- PushMessageMapper pushMessageMapper
- ServicePushMessageExtMapper servicePushMessageExtMapper
- MessageMqService messageMqService
- AdvanceRepaymentService advanceRepaymentService
+ Response send(AppMessageDTO)
+ Response read(Long,String)
+ Response<List<AppMessageDTO>> getListAppMessage(Long,Byte)
+ Response<PageInfo<AppMessageDTO>> getPageAppMessage(AppMsgQry)
+ Response<PageInfo<AppMessageDTO>> getPageAppMessage(Long,Byte,int,int)
+ Response<Integer> getUnreadNumber(Long)
+ Response<Integer> getUnreadNumber(AppMsgQry)
+ Response<Object> readMsgPush(Long,String)
+ List<ServicePushMessage> getEventAppMsgList(String)
+ Response<Object> readInbox(AppMessageReadCmd)
}
class com.welab.message.app.base.BaseAppMessageTempalteService {
- PushTemplateConfExtMapper pushTemplateConfExtMapper
+ PushTemplateConfExt getPushTemplateByName(Long,String)
}
interface com.welab.message.mapper.ext.ServicePushMessageExtMapper {
~ int updateNum(ServicePushMessage)
}
enum com.welab.message.enmu.OrgIdEnum {
+  MAUCASH
+  BACKSTAGE_MANAGEMENT
+  SPEKTRA
- Long value
- String name
- <<Create>> OrgIdEnum(Long,String)
+ Long getValue()
+ String getName()
+ {static} OrgIdEnum getProduct(Long)
}
class com.welab.message.config.Swagger2Config {
+ Docket createRestApi()
- ApiInfo apiInfo()
}
class com.welab.message.constants.MessageConstants {
+ {static} String MESSAGE_KEY
+ {static} String VCODE_CONFIG_KEY
}
class com.welab.message.model.CmsgTemplate {
- Long id
- String templateName
- String templateContent
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getTemplateName()
+ void setTemplateName(String)
+ String getTemplateContent()
+ void setTemplateContent(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.service.push.PushAuthBean {
- String url
- String key
- String prefixKey
- boolean supportPush
}
class com.welab.message.service.push.maucash.MaumodalMsgPush {
- String FCM_URL
- String SECRET_KEY
- String PREFIX_SECRET_KEY
# PushAuthBean buildAuth()
}
class com.welab.message.model.ext.PushTemplateConfExt {
- String pushBody
}
class com.welab.message.dto.whatsapp.WhatsAppMq {
- String loanNumber
- String mobile
- String tmpName
- String prevContent
- String content
- String appTags
}
class com.welab.message.service.push.spektra.SpektraMsgPush {
- String FCM_URL
- String SECRET_KEY
- String PREFIX_SECRET_KEY
# PushAuthBean buildAuth()
}
interface com.welab.message.mapper.ext.EmailTemplateConfExtMapper {
~ EmailTemplateConf selectByTmplName(Long,String)
~ List<EmailTemplateConf> getEmailTemplateConfByPage(EmailTemplateConfDTO)
~ List<String> getAllEmailTemplateName()
}
class com.welab.message.model.ext.EmailDtoExt {
- T data
- int sendCount
- String beanName
+ <<Create>> EmailDtoExt()
+ <<Create>> EmailDtoExt(T,String)
}
abstract class com.welab.message.utils.MessageIdGenerator {
- {static} int APPLICATION_ID_LENGTH
- {static} String FORMAT_BASE
- {static} String APPLICATION_ID_RANDOM_FORMAT
- {static} String TIME_STAMP_FORMAT
+ {static} String generate(Date)
+ {static} String generate()
- {static} String generateRandomString(String,int)
- {static} String parseDate(Date)
}
interface com.welab.message.service.MessageMqService {
+ void send(String,String)
+ void sendDto(String,BaseMqDto)
+ void sendFanout(String,String)
+ void declareFanoutExchange(String)
}
enum com.welab.message.constants.FreemarkTypeEnum {
+  REPLACE
+  FREEMARK
- Byte type
}
class com.welab.message.marketing.BackstageService {
- BackstageConfigService backstageConfigService
+ void test()
}
class com.welab.message.utils.FreemarkUtil {
- <<Create>> FreemarkUtil()
+ {static} String processTemplate(String,Object)
}
class com.welab.message.dubbo.email.FastMessageEmailServiceTest {
- FastMessageEmailServiceImpl FastMessageEmailService
+ void sendBaseMail()
+ void sendNormalMail()
+ void saveMail(MailAttachmentDTO)
+ void updateById(MailAttachmentDTO)
}
class com.welab.message.redis.RedisTest {
- JedisCluster jedisCluster
+ void testA()
}
enum com.welab.message.dto.whatsapp.AppTagsEnum {
+  FINAL_PV
- String key
~ <<Create>> AppTagsEnum(String)
+ String getKey()
+ {static} AppTagsEnum getAppTagsEnum(String)
}
interface com.welab.message.exception.ResponseErrorCode {
+ String REJECT_ORG_ID_IS_NOT_NULL_
+ String REJECT_MOBILE_IS_NOT_NULL_
+ String REJECT_APP_TAGS_IS_NOT_NULL_
+ String VERIFICATION_CODE_NO_SEND_
+ String VERIFICATION_CODE_INVALID_
+ String VERIFICATION_CODE_EXPIRED_
+ String VERIFICATION_EXCEEDS_COUNTS_
+ String VERIFICATION_CODE_USED_
+ String PUSH_FAIL_
+ String MOBILE_TOKEN_IS_NULL_
+ String SUBJECT_IS_BANK_
+ String CONTENT_IS_BANK_
+ String EMAIL_ERROR_
+ String EMAIL_NOT_EXITIS_
+ String M_APPTOKEN_USERID_IS_NOT_NULL
+ String M_APPTOKEN_TOKENTYPE_IS_NOT_NULL
+ String M_APPTOKEN_TOKEN_IS_NOT_NULL
+ String M_APPTOKEN_TOKENTYPE_ERROR
+ String _PUSH_TMPL_NAME_IS_NULL
+ String _PUSH_TMPL_TITLE_IS_NULL
+ String _PUSH_TMPL_BODY_IS_NULL
+ String _SMS_TMPL_BODY_IS_NULL
+ String _FREQUENT_REQUEST
+ String _TIMES_OVERLOAD
}
enum com.welab.message.exception.MessageResponsCodeTypeEnum {
+  REJECT_ORG_ID_IS_NOT_NULL
+  REJECT_MOBILE_IS_NOT_NULL
+  REJECT_APP_TAGS_IS_NOT_NULL
+  VERIFICATION_CODE_NO_SEND
+  VERIFICATION_CODE_INVALID
+  VERIFICATION_CODE_EXPIRED
+  VERIFICATION_EXCEEDS_COUNTS
+  VERIFICATION_CODE_USED
+  PUSH_FAIL
+  MOBILE_TOKEN_IS_NULL
+  SUBJECT_IS_BANK
+  CONTENT_IS_BANK
+  EMAIL_ERROR
+  EMAIL_NOT_EXITIS
+  APPTOKEN_USERID_IS_NOT_NULL
+  APPTOKEN_TOKENTYPE_IS_NOT_NULL
+  APPTOKEN_TOKEN_IS_NOT_NULL
+  APPTOKEN_TOKENTYPE_ERROR
+  PUSH_TMPL_NAME_IS_NULL
+  PUSH_TMPL_TITLE_IS_NULL
+  PUSH_TMPL_BODY_IS_NULL
+  SMS_TMPL_BODY_IS_NULL
+  FREQUENT_REQUEST
+  TIMES_OVERLOAD
- Integer code
- String message
- <<Create>> MessageResponsCodeTypeEnum(Integer,String)
+ Integer getCode()
+ String getMessage()
}
class com.welab.message.vo.KreddoRequestVO {
- String callback_type
- String unique_code
- String message_status
- String mobile
- String error_code
- String error_msg
}
class com.welab.message.service.impl.MessageEmailConfServiceImpl {
- EmailTemplateConfExtMapper emailTemplateConfMapper
+ Response<PageInfo<EmailTemplateConfVO>> getEmailTemplateConfByPage(EmailTemplateConfDTO)
+ Response<Void> updateEmailTemplateConfById(EmailTemplateConfDTO)
+ List<String> getAllEmailTemplateName()
+ EmailTemplateConfVO getEmailTemplateByName(String)
}
enum com.welab.message.enmu.EncodingTypeEnum {
+  UTF
+  ISO
- String code
- String message
- <<Create>> EncodingTypeEnum(String,String)
+ String getCode()
+ String getMessage()
}
class com.welab.message.dto.mq.BankAcountValidatorDto {
- {static} long serialVersionUID
- String bankAccountNumber
- String bankAccountHolderName
- String bankCode
- String status
}
interface com.welab.message.service.MessagePushService {
~ void messagePush(MessagePushDTO)
~ void batchMessagePush(MessagePushBatchDTO)
~ void messagePushWithTemplate(Long,Long,String,Map<String,String>)
~ void messagePushWithTemplate(Long,Long,String,Map<String,String>,Map<String,Object>)
~ void messagePushWithTemplate(TemplatePushDTO)
~ void batchMessagePushWithTemplate(List<Long>,Long,String,Map<String,String>)
~ void pushMsg(AppPushMsgDTO)
}
enum com.welab.message.dto.whatsapp.WhatsAppMsgTypeEnum {
+  TEXT
+  HSM
+  IMAGE
- int type
- String val
- <<Create>> WhatsAppMsgTypeEnum(int,String)
+ int getType()
+ String getVal()
}
abstract class com.welab.message.app.service.AbstractEmailSender {
- int EMAIL_TRY_COUNT
- BaseEmailMessageLogService baseEmailMessageLogService
- MessageMqService messageMqService
# MimeMessageBuilder mimeMessageBuilder
# EmailErrorHandler emailErrorHandler
- EmailSenderConfigManager emailSenderConfigManager
- JedisCluster jedisCluster
+ {static} AbstractEmailSender getSender(SenderType)
+ void handEmail(EmailDtoExt<BaseMailDTO>)
+ EmailMessageLogWithBLOBs buildMessageLog(BaseMailDTO)
- JavaMailSenderImplExt getSender(BaseMailDTO)
+ void initEmailParam(BaseMailDTO)
# {abstract}EmailSendResEnum sendEmail(BaseMailDTO,JavaMailSenderImplExt)
}
enum com.welab.message.app.service.SenderType {
+  BaseEmail
+  NormalEmail
- String beanName
}
enum com.welab.message.enmu.AppMsgTypeEnum {
+  NOTE
+  ACTIVITY
+  REPAYMENT
+  DISBURSEMENT
- byte type
- String desc
- <<Create>> AppMsgTypeEnum(int,String)
+ byte getType()
+ String getDesc()
}
class com.welab.message.dto.email.MailDTO {
- {static} long serialVersionUID
- Long orgId
- String subject
- String toUserMail
- String[] toUserMails
- String ccUserMail
- String[] ccUserMails
- String bccUserMail
- String[] bccUserMails
- boolean htmlFlag
- String content
- String tmplName
- Map<String,String> modelTitleMap
- Map<String,String> modelContentMap
- Map<String,Object> modelMap
- Map<String,String> inlineImageMap
- Map<String,String> attachmentMap
- String appTags
- List<EmailFileVO> emailFileVO
- String remark
- String emailBusi
- String emailReceiveBusi
- Date sendTime
}
class com.welab.message.dto.cmsg.CmsgDTO {
- {static} long serialVersionUID
- String groupKey
- ContentTypeEnum contentType
- String content
- List<Long> specifyUser
- boolean specifyAll
- MsgTemplateDTO msgTemplateDTO
}
class com.welab.message.core.config.MessageConfig {
- List<ProductInfo> productInfos
- Map<String,SeaMailProperties> mailProperties
}
class com.welab.message.core.config.MessageConfig$ProductInfo {
- Long orgId
- String productName
- String sendName
}
class com.welab.message.core.config.MessageConfig$SendMailAccountInfo {
- String accountInfo
}
class com.welab.message.core.config.MessageConfig$SeaMailProperties {
- Integer weight
- String emailAccount
- String emailType
- String emailSuffix
}
class com.welab.message.dto.whatsapp.ContactDto {
- String input
- String status
- String waId
}
class com.welab.message.service.whatsapp.KreddoSendMsgServiceImpl {
- ApiConfig apiConfig
- Integer whatsAppEnable
- String messageSmsSwitch
- KreddoKeysConfig kreddoKeysConfig
- {static} String CODE
- {static} String MSG
- {static} String TIME
- {static} String DATA
- {static} String FREETYPE
- {static} String TEMPLATETYPE
- {static} String SMS_SWITCH_OPEN
- JatisSmsServiceImpl jatisSmsServiceImpl
- JedisCluster jedis
- MessageVcodeLogExtMapper messageVcodedLogExtMapper
- Map<String,String> header
- String getTokenByLock(ApiConfig.Config,String)
+ String getToken()
+ String getTokenByType(String)
+ SendSmsCommonResponse sendVCode(MessageVcodeLog,String)
+ ApiConfig.Config getKreddoKey(String,String)
+ void sendWhatsAppMsg(WhatsappMessage,Map<String,String>,ApiConfig.Config)
+ void checkVCodeStatus(KreddoRequestVO)
}
enum com.welab.message.service.whatsapp.KreddoVcodeStatusEnum {
+  SEND
+  DELIVERED
+  READ
+  ERROR
- String code
- String rspStatus
+ {static} KreddoVcodeStatusEnum getByRsp(String)
}
class com.welab.message.test.TempTest {
+ void testTemplate()
}
interface com.welab.message.service.WhatsAppService {
~ Response<List<ContactDto>> checkContacts(List<String>)
~ Response<Void> sendMsg(WhatsMsgReq)
~ Response<PageInfo<WhatsAppMessageVo>> queryMsg(QryWhatsMsgReq)
~ Response<Object> getWhatsappLoginConfig()
~ Response<Object> getWhatsappLoginConfig(String)
~ Response<List<WhatsappTemplateConfVo>> findAllTmpName(WhatsappTmplConfReq)
}
interface com.welab.message.mapper.AppTokenMapper {
~ long countByExample(AppTokenExample)
~ int deleteByExample(AppTokenExample)
~ int deleteByPrimaryKey(Long)
~ int insert(AppToken)
~ int insertSelective(AppToken)
~ List<AppToken> selectByExample(AppTokenExample)
~ AppToken selectByPrimaryKey(Long)
~ int updateByExampleSelective(AppToken,AppTokenExample)
~ int updateByExample(AppToken,AppTokenExample)
~ int updateByPrimaryKeySelective(AppToken)
~ int updateByPrimaryKey(AppToken)
~ AppToken qyeryByUserId(String,Long)
~ List<AppToken> getBatchToken(String,List<Long>)
~ List<AppToken> getBatchTokenById(List<Long>)
}
class com.welab.message.app.impl.EmailConfigServiceImpl {
- NormalEmailSender normalEmailSender
- EmailSenderConfigManager emailSenderConfigManager
- EmailMessageTemplateManager emailMessageTemplateManager
+ Properties getSenderProp(BaseMailDTO)
+ TemplateMailDTO initMailParam(TemplateMailDTO)
}
class com.welab.message.model.TimingMsg {
- Long id
- Byte msgType
- Date sendTime
- Byte status
- Date createdAt
- Date updatedAt
- String content
+ Long getId()
+ void setId(Long)
+ Byte getMsgType()
+ void setMsgType(Byte)
+ Date getSendTime()
+ void setSendTime(Date)
+ Byte getStatus()
+ void setStatus(Byte)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getContent()
+ void setContent(String)
}
class com.welab.message.dto.sms.SendSmsRequestTags {
- {static} long serialVersionUID
- String content
+ {static} SendSmsRequestTags getNewObject(Long,String,String,String)
+ String toStringLog()
+ String getContent()
+ void setContent(String)
}
class com.welab.message.vo.PushTemplateVO {
- {static} long serialVersionUID
- Long id
- Long orgId
- String tmplMsgTitle
- String tmplName
- String tmplDesc
- Boolean state
- Date createdAt
- Date updatedAt
- String tmplContent
}
class com.welab.message.service.impl.msg.EmailServiceImpl {
- MessageEmailServiceImpl messageEmailServiceImpl
# void processMsg(EmailMqInfo)
}
enum com.welab.message.enmu.ServiceTypeEnum {
+  EMAIL
- int value
- String name
- <<Create>> ServiceTypeEnum(int,String)
+ int getValue()
+ String getName()
}
class com.welab.message.service.impl.MessageEmailServiceImplTest {
- MessageEmailService messageEmailService
- String toUser
- String[] userMails
- String templateContent
- String templateFilePath
- String inlineImagePath
- String attachmentImagePath
- String attachmentPdfPath
- String attachmentTxtPath
+ void sendMail()
+ {static} String attachmentData(InputStream)
}
class com.welab.message.ConfigConsts {
+ {static} String EMAIL_TEMPLATE
+ {static} String EMAIL_CONTENT_TYPE
+ {static} String REDIS_PACKAGE
+ {static} String KREDDO_TOKEN_KEY
+ {static} String VCODE_PREX_KEY
+ {static} String VCODE_ID_PREX_KEY
}
class com.welab.message.dto.app.AppMessageDTO {
- {static} long serialVersionUID
- Long id
- Long orgId
- String imageUrl
- Byte serviceType
- Byte msgType
- Long userId
- String messageCode
- String title
- String body
- String state
- Date readAt
- Date sendAt
- Date createdAt
- Date updatedAt
- Long advanceMsgId
- String h5Url
- String appCode
- String buttonTitle
- String buttonCode
+ <<Create>> AppMessageDTO()
+ <<Create>> AppMessageDTO(Long,String,String)
+ <<Create>> AppMessageDTO(Long,Long,String,String)
+ <<Create>> AppMessageDTO(Long,String,String,Date)
+ Byte getMsgType()
+ void setMsgType(Byte)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getMessageCode()
+ void setMessageCode(String)
+ Long getId()
+ void setId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ String getTitle()
+ void setTitle(String)
+ String getBody()
+ void setBody(String)
+ Date getReadAt()
+ void setReadAt(Date)
+ Date getSendAt()
+ void setSendAt(Date)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getState()
+ void setState(String)
+ Long getAdvanceMsgId()
+ void setAdvanceMsgId(Long)
+ String getImageUrl()
+ void setImageUrl(String)
+ String getH5Url()
+ void setH5Url(String)
+ String getAppCode()
+ void setAppCode(String)
+ String getButtonTitle()
+ void setButtonTitle(String)
+ String getButtonCode()
+ void setButtonCode(String)
+ Byte getServiceType()
+ void setServiceType(Byte)
}
class com.welab.message.dto.sms.SmsDTO {
- {static} long serialVersionUID
- String mobile
- String content
- String channel
}
class com.welab.message.model.MessageTemplateConf {
- Long tmplConfId
- Long orgId
- String tmplName
- String tmplDesc
- String tmplContent
- Boolean state
- Date createdAt
- Date updatedAt
+ Long getTmplConfId()
+ void setTmplConfId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getTmplName()
+ void setTmplName(String)
+ String getTmplDesc()
+ void setTmplDesc(String)
+ String getTmplContent()
+ void setTmplContent(String)
+ Boolean getState()
+ void setState(Boolean)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.model.AppTokenExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> AppTokenExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.AppTokenExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andOrgIdIsNull()
+ Criteria andOrgIdIsNotNull()
+ Criteria andOrgIdEqualTo(Long)
+ Criteria andOrgIdNotEqualTo(Long)
+ Criteria andOrgIdGreaterThan(Long)
+ Criteria andOrgIdGreaterThanOrEqualTo(Long)
+ Criteria andOrgIdLessThan(Long)
+ Criteria andOrgIdLessThanOrEqualTo(Long)
+ Criteria andOrgIdIn(List<Long>)
+ Criteria andOrgIdNotIn(List<Long>)
+ Criteria andOrgIdBetween(Long,Long)
+ Criteria andOrgIdNotBetween(Long,Long)
+ Criteria andUserIdIsNull()
+ Criteria andUserIdIsNotNull()
+ Criteria andUserIdEqualTo(Long)
+ Criteria andUserIdNotEqualTo(Long)
+ Criteria andUserIdGreaterThan(Long)
+ Criteria andUserIdGreaterThanOrEqualTo(Long)
+ Criteria andUserIdLessThan(Long)
+ Criteria andUserIdLessThanOrEqualTo(Long)
+ Criteria andUserIdIn(List<Long>)
+ Criteria andUserIdNotIn(List<Long>)
+ Criteria andUserIdBetween(Long,Long)
+ Criteria andUserIdNotBetween(Long,Long)
+ Criteria andTokenTypeIsNull()
+ Criteria andTokenTypeIsNotNull()
+ Criteria andTokenTypeEqualTo(String)
+ Criteria andTokenTypeNotEqualTo(String)
+ Criteria andTokenTypeGreaterThan(String)
+ Criteria andTokenTypeGreaterThanOrEqualTo(String)
+ Criteria andTokenTypeLessThan(String)
+ Criteria andTokenTypeLessThanOrEqualTo(String)
+ Criteria andTokenTypeLike(String)
+ Criteria andTokenTypeNotLike(String)
+ Criteria andTokenTypeIn(List<String>)
+ Criteria andTokenTypeNotIn(List<String>)
+ Criteria andTokenTypeBetween(String,String)
+ Criteria andTokenTypeNotBetween(String,String)
+ Criteria andTokenIsNull()
+ Criteria andTokenIsNotNull()
+ Criteria andTokenEqualTo(String)
+ Criteria andTokenNotEqualTo(String)
+ Criteria andTokenGreaterThan(String)
+ Criteria andTokenGreaterThanOrEqualTo(String)
+ Criteria andTokenLessThan(String)
+ Criteria andTokenLessThanOrEqualTo(String)
+ Criteria andTokenLike(String)
+ Criteria andTokenNotLike(String)
+ Criteria andTokenIn(List<String>)
+ Criteria andTokenNotIn(List<String>)
+ Criteria andTokenBetween(String,String)
+ Criteria andTokenNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.AppTokenExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.AppTokenExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.model.ext.JavaMailSenderImplExt {
- JavaMailSenderImpl sender
- String sendName
}
enum com.welab.message.enmu.ServicePushTypeEnum {
+  TMPLATE
+  CUSTOMIZE
- Byte type
}
class com.welab.message.dto.app.AppTokenDTO {
- {static} long serialVersionUID
- Long id
- Long userId
- Long orgId
- String tokenType
- String token
- Date createdAt
- Date updatedAt
}
interface com.welab.message.mapper.CmsgGroupMapper {
~ long countByExample(CmsgGroupExample)
~ int deleteByExample(CmsgGroupExample)
~ int deleteByPrimaryKey(Long)
~ int insert(CmsgGroup)
~ int insertSelective(CmsgGroup)
~ List<CmsgGroup> selectByExample(CmsgGroupExample)
~ CmsgGroup selectByPrimaryKey(Long)
~ int updateByExampleSelective(CmsgGroup,CmsgGroupExample)
~ int updateByExample(CmsgGroup,CmsgGroupExample)
~ int updateByPrimaryKeySelective(CmsgGroup)
~ int updateByPrimaryKey(CmsgGroup)
}
class com.welab.message.service.impl.MessagePushConfServiceImpl {
- PushTemplateConfExtMapper pushTemplateConfExtMapper
- ServicePushMessageExtMapper servicePushMessageExtMapper
+ Response<PageInfo<PushTemplateConfVO>> getPushTmplConfByPage(PushTemplateConfDTO)
+ Response<List<String>> getPushTmplCategoryList(Long)
+ Response<Void> updatePushTmplConfById(PushTemplateConfDTO)
- PushTemplateConfExample buildExample(PushTemplateConfDTO,boolean)
+ List<String> getAllPushTemplateName()
+ Response<PushTemplateConfVO> findPushTmplConf(PushTemplateConfDTO)
}
interface com.welab.message.service.CmsgService {
~ void sendCmsgService(CmsgDTO)
}
class com.welab.message.model.WhatsappMessageExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> WhatsappMessageExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.WhatsappMessageExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andMogoIdIsNull()
+ Criteria andMogoIdIsNotNull()
+ Criteria andMogoIdEqualTo(String)
+ Criteria andMogoIdNotEqualTo(String)
+ Criteria andMogoIdGreaterThan(String)
+ Criteria andMogoIdGreaterThanOrEqualTo(String)
+ Criteria andMogoIdLessThan(String)
+ Criteria andMogoIdLessThanOrEqualTo(String)
+ Criteria andMogoIdLike(String)
+ Criteria andMogoIdNotLike(String)
+ Criteria andMogoIdIn(List<String>)
+ Criteria andMogoIdNotIn(List<String>)
+ Criteria andMogoIdBetween(String,String)
+ Criteria andMogoIdNotBetween(String,String)
+ Criteria andLoanNumberIsNull()
+ Criteria andLoanNumberIsNotNull()
+ Criteria andLoanNumberEqualTo(String)
+ Criteria andLoanNumberNotEqualTo(String)
+ Criteria andLoanNumberGreaterThan(String)
+ Criteria andLoanNumberGreaterThanOrEqualTo(String)
+ Criteria andLoanNumberLessThan(String)
+ Criteria andLoanNumberLessThanOrEqualTo(String)
+ Criteria andLoanNumberLike(String)
+ Criteria andLoanNumberNotLike(String)
+ Criteria andLoanNumberIn(List<String>)
+ Criteria andLoanNumberNotIn(List<String>)
+ Criteria andLoanNumberBetween(String,String)
+ Criteria andLoanNumberNotBetween(String,String)
+ Criteria andTypeIsNull()
+ Criteria andTypeIsNotNull()
+ Criteria andTypeEqualTo(Byte)
+ Criteria andTypeNotEqualTo(Byte)
+ Criteria andTypeGreaterThan(Byte)
+ Criteria andTypeGreaterThanOrEqualTo(Byte)
+ Criteria andTypeLessThan(Byte)
+ Criteria andTypeLessThanOrEqualTo(Byte)
+ Criteria andTypeIn(List<Byte>)
+ Criteria andTypeNotIn(List<Byte>)
+ Criteria andTypeBetween(Byte,Byte)
+ Criteria andTypeNotBetween(Byte,Byte)
+ Criteria andMobileIsNull()
+ Criteria andMobileIsNotNull()
+ Criteria andMobileEqualTo(String)
+ Criteria andMobileNotEqualTo(String)
+ Criteria andMobileGreaterThan(String)
+ Criteria andMobileGreaterThanOrEqualTo(String)
+ Criteria andMobileLessThan(String)
+ Criteria andMobileLessThanOrEqualTo(String)
+ Criteria andMobileLike(String)
+ Criteria andMobileNotLike(String)
+ Criteria andMobileIn(List<String>)
+ Criteria andMobileNotIn(List<String>)
+ Criteria andMobileBetween(String,String)
+ Criteria andMobileNotBetween(String,String)
+ Criteria andTmpIdIsNull()
+ Criteria andTmpIdIsNotNull()
+ Criteria andTmpIdEqualTo(Byte)
+ Criteria andTmpIdNotEqualTo(Byte)
+ Criteria andTmpIdGreaterThan(Byte)
+ Criteria andTmpIdGreaterThanOrEqualTo(Byte)
+ Criteria andTmpIdLessThan(Byte)
+ Criteria andTmpIdLessThanOrEqualTo(Byte)
+ Criteria andTmpIdIn(List<Byte>)
+ Criteria andTmpIdNotIn(List<Byte>)
+ Criteria andTmpIdBetween(Byte,Byte)
+ Criteria andTmpIdNotBetween(Byte,Byte)
+ Criteria andTmpNameIsNull()
+ Criteria andTmpNameIsNotNull()
+ Criteria andTmpNameEqualTo(String)
+ Criteria andTmpNameNotEqualTo(String)
+ Criteria andTmpNameGreaterThan(String)
+ Criteria andTmpNameGreaterThanOrEqualTo(String)
+ Criteria andTmpNameLessThan(String)
+ Criteria andTmpNameLessThanOrEqualTo(String)
+ Criteria andTmpNameLike(String)
+ Criteria andTmpNameNotLike(String)
+ Criteria andTmpNameIn(List<String>)
+ Criteria andTmpNameNotIn(List<String>)
+ Criteria andTmpNameBetween(String,String)
+ Criteria andTmpNameNotBetween(String,String)
+ Criteria andContentIsNull()
+ Criteria andContentIsNotNull()
+ Criteria andContentEqualTo(String)
+ Criteria andContentNotEqualTo(String)
+ Criteria andContentGreaterThan(String)
+ Criteria andContentGreaterThanOrEqualTo(String)
+ Criteria andContentLessThan(String)
+ Criteria andContentLessThanOrEqualTo(String)
+ Criteria andContentLike(String)
+ Criteria andContentNotLike(String)
+ Criteria andContentIn(List<String>)
+ Criteria andContentNotIn(List<String>)
+ Criteria andContentBetween(String,String)
+ Criteria andContentNotBetween(String,String)
+ Criteria andStatusIsNull()
+ Criteria andStatusIsNotNull()
+ Criteria andStatusEqualTo(String)
+ Criteria andStatusNotEqualTo(String)
+ Criteria andStatusGreaterThan(String)
+ Criteria andStatusGreaterThanOrEqualTo(String)
+ Criteria andStatusLessThan(String)
+ Criteria andStatusLessThanOrEqualTo(String)
+ Criteria andStatusLike(String)
+ Criteria andStatusNotLike(String)
+ Criteria andStatusIn(List<String>)
+ Criteria andStatusNotIn(List<String>)
+ Criteria andStatusBetween(String,String)
+ Criteria andStatusNotBetween(String,String)
+ Criteria andKreddoKeyIsNull()
+ Criteria andKreddoKeyIsNotNull()
+ Criteria andKreddoKeyEqualTo(String)
+ Criteria andKreddoKeyNotEqualTo(String)
+ Criteria andKreddoKeyGreaterThan(String)
+ Criteria andKreddoKeyGreaterThanOrEqualTo(String)
+ Criteria andKreddoKeyLessThan(String)
+ Criteria andKreddoKeyLessThanOrEqualTo(String)
+ Criteria andKreddoKeyLike(String)
+ Criteria andKreddoKeyNotLike(String)
+ Criteria andKreddoKeyIn(List<String>)
+ Criteria andKreddoKeyNotIn(List<String>)
+ Criteria andKreddoKeyBetween(String,String)
+ Criteria andKreddoKeyNotBetween(String,String)
+ Criteria andAppTagsIsNull()
+ Criteria andAppTagsIsNotNull()
+ Criteria andAppTagsEqualTo(String)
+ Criteria andAppTagsNotEqualTo(String)
+ Criteria andAppTagsGreaterThan(String)
+ Criteria andAppTagsGreaterThanOrEqualTo(String)
+ Criteria andAppTagsLessThan(String)
+ Criteria andAppTagsLessThanOrEqualTo(String)
+ Criteria andAppTagsLike(String)
+ Criteria andAppTagsNotLike(String)
+ Criteria andAppTagsIn(List<String>)
+ Criteria andAppTagsNotIn(List<String>)
+ Criteria andAppTagsBetween(String,String)
+ Criteria andAppTagsNotBetween(String,String)
+ Criteria andIsReplyIsNull()
+ Criteria andIsReplyIsNotNull()
+ Criteria andIsReplyEqualTo(Byte)
+ Criteria andIsReplyNotEqualTo(Byte)
+ Criteria andIsReplyGreaterThan(Byte)
+ Criteria andIsReplyGreaterThanOrEqualTo(Byte)
+ Criteria andIsReplyLessThan(Byte)
+ Criteria andIsReplyLessThanOrEqualTo(Byte)
+ Criteria andIsReplyIn(List<Byte>)
+ Criteria andIsReplyNotIn(List<Byte>)
+ Criteria andIsReplyBetween(Byte,Byte)
+ Criteria andIsReplyNotBetween(Byte,Byte)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.WhatsappMessageExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.model.WhatsappMessageExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.service.push.PushConfig {
- ApplicationContext applicationContext
- {static} Map<String,Object> serviceMap
+ void init()
+ {static} T getService(Long)
}
class com.welab.message.utils.FileUtil {
- <<Create>> FileUtil()
+ {static} void copyFileFromURL(URL,File)
}
interface com.welab.message.mapper.EmailTemplateConfMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(EmailTemplateConf)
~ int insertSelective(EmailTemplateConf)
~ EmailTemplateConf selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(EmailTemplateConf)
~ int updateByPrimaryKeyWithBLOBs(EmailTemplateConf)
~ int updateByPrimaryKey(EmailTemplateConf)
}
interface com.welab.message.mapper.WhatsappTemplateConfMapper {
~ long countByExample(WhatsappTemplateConfExample)
~ int deleteByExample(WhatsappTemplateConfExample)
~ int deleteByPrimaryKey(Long)
~ int insert(WhatsappTemplateConf)
~ int insertSelective(WhatsappTemplateConf)
~ List<WhatsappTemplateConf> selectByExampleWithBLOBs(WhatsappTemplateConfExample)
~ List<WhatsappTemplateConf> selectByExample(WhatsappTemplateConfExample)
~ WhatsappTemplateConf selectByPrimaryKey(Long)
~ int updateByExampleSelective(WhatsappTemplateConf,WhatsappTemplateConfExample)
~ int updateByExampleWithBLOBs(WhatsappTemplateConf,WhatsappTemplateConfExample)
~ int updateByExample(WhatsappTemplateConf,WhatsappTemplateConfExample)
~ int updateByPrimaryKeySelective(WhatsappTemplateConf)
~ int updateByPrimaryKeyWithBLOBs(WhatsappTemplateConf)
~ int updateByPrimaryKey(WhatsappTemplateConf)
}
class com.welab.message.model.EmailMessageLogWithBLOBs {
- String sendTo
- String ccTo
- String bccTo
+ String getSendTo()
+ void setSendTo(String)
+ String getCcTo()
+ void setCcTo(String)
+ String getBccTo()
+ void setBccTo(String)
}
class com.welab.message.service.impl.MessageEmailServiceImpl {
- MessageMqService messageMqService
- EmailMessageLogMapper emailMessageLogMapper
- int EMAIL_TRY_COUNT
- BaseEmailService baseMultiAccountEmailService
- EmailMessageTemplateManager emailMessageTemplateManager
- Semaphore semaphore
+ Response<Void> sendMail(MailDTO)
+ Response<Void> sendMailByTmplName(MailDTO)
+ Long insertEmailMessageLog(MailDTO)
- String handMails(String,String[])
+ int updateById(EmailMessageLogWithBLOBs)
+ void handEmailMq(EmailMqInfo)
+ void handEmail(EmailMqInfo)
- void initEmailParam(EmailMqInfo)
}
class com.welab.message.model.PushTemplateConf {
- Long id
- Long orgId
- Byte msgType
- String tmplMsgTitle
- String tmplName
- String tmplDesc
- String tmplContent
- Boolean state
- Byte freemarkType
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ Byte getMsgType()
+ void setMsgType(Byte)
+ String getTmplMsgTitle()
+ void setTmplMsgTitle(String)
+ String getTmplName()
+ void setTmplName(String)
+ String getTmplDesc()
+ void setTmplDesc(String)
+ String getTmplContent()
+ void setTmplContent(String)
+ Boolean getState()
+ void setState(Boolean)
+ Byte getFreemarkType()
+ void setFreemarkType(Byte)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.dto.sms.SendSmsRequestVCode {
- {static} long serialVersionUID
- String sourceId
- Integer allowCheckTimes
- Integer effectTime
- String templateName
- Byte channelType
- String operateSign
- Long vcodeId
- String vcode
+ {static} SendSmsRequestVCode getNewObject(Long,String,String)
+ String toStringLog()
+ String getTemplateName()
+ void setTemplateName(String)
+ Integer getAllowCheckTimes()
+ void setAllowCheckTimes(Integer)
+ Integer getEffectTime()
+ void setEffectTime(Integer)
+ Byte getChannelType()
+ void setChannelType(Byte)
}
class com.welab.message.app.cmd.CmsgSendCmdExe {
- BaseCmsgGroupService baseCmsgGroupService
- BaseCmsgContactsService baseCmsgContactsService
- CmsgTemplateManager cmsgTemplateManager
- String url
+ boolean sendCmsg(CmsgDTO)
}
interface com.welab.message.mapper.AddresseeWhiteListMapper {
~ long countByExample(AddresseeWhiteListExample)
~ int deleteByExample(AddresseeWhiteListExample)
~ int deleteByPrimaryKey(Long)
~ int insert(AddresseeWhiteList)
~ int insertSelective(AddresseeWhiteList)
~ List<AddresseeWhiteList> selectByExample(AddresseeWhiteListExample)
~ AddresseeWhiteList selectByPrimaryKey(Long)
~ int updateByExampleSelective(AddresseeWhiteList,AddresseeWhiteListExample)
~ int updateByExample(AddresseeWhiteList,AddresseeWhiteListExample)
~ int updateByPrimaryKeySelective(AddresseeWhiteList)
~ int updateByPrimaryKey(AddresseeWhiteList)
}
class com.welab.message.dto.sms.SendSmsRequestTemplate {
- {static} long serialVersionUID
- String templateName
- String replaceField
+ {static} SendSmsRequestTemplate getNewObject(Long,String,String,String,String)
+ String toStringLog()
+ String getTemplateName()
+ void setTemplateName(String)
+ String getReplaceField()
+ void setReplaceField(String)
}
class com.welab.message.model.WhatsappTemplateConfExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> WhatsappTemplateConfExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.WhatsappTemplateConfExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andTmplConfIdIsNull()
+ Criteria andTmplConfIdIsNotNull()
+ Criteria andTmplConfIdEqualTo(Long)
+ Criteria andTmplConfIdNotEqualTo(Long)
+ Criteria andTmplConfIdGreaterThan(Long)
+ Criteria andTmplConfIdGreaterThanOrEqualTo(Long)
+ Criteria andTmplConfIdLessThan(Long)
+ Criteria andTmplConfIdLessThanOrEqualTo(Long)
+ Criteria andTmplConfIdIn(List<Long>)
+ Criteria andTmplConfIdNotIn(List<Long>)
+ Criteria andTmplConfIdBetween(Long,Long)
+ Criteria andTmplConfIdNotBetween(Long,Long)
+ Criteria andOrgIdIsNull()
+ Criteria andOrgIdIsNotNull()
+ Criteria andOrgIdEqualTo(Long)
+ Criteria andOrgIdNotEqualTo(Long)
+ Criteria andOrgIdGreaterThan(Long)
+ Criteria andOrgIdGreaterThanOrEqualTo(Long)
+ Criteria andOrgIdLessThan(Long)
+ Criteria andOrgIdLessThanOrEqualTo(Long)
+ Criteria andOrgIdIn(List<Long>)
+ Criteria andOrgIdNotIn(List<Long>)
+ Criteria andOrgIdBetween(Long,Long)
+ Criteria andOrgIdNotBetween(Long,Long)
+ Criteria andTmplNameIsNull()
+ Criteria andTmplNameIsNotNull()
+ Criteria andTmplNameEqualTo(String)
+ Criteria andTmplNameNotEqualTo(String)
+ Criteria andTmplNameGreaterThan(String)
+ Criteria andTmplNameGreaterThanOrEqualTo(String)
+ Criteria andTmplNameLessThan(String)
+ Criteria andTmplNameLessThanOrEqualTo(String)
+ Criteria andTmplNameLike(String)
+ Criteria andTmplNameNotLike(String)
+ Criteria andTmplNameIn(List<String>)
+ Criteria andTmplNameNotIn(List<String>)
+ Criteria andTmplNameBetween(String,String)
+ Criteria andTmplNameNotBetween(String,String)
+ Criteria andTmpTypeIsNull()
+ Criteria andTmpTypeIsNotNull()
+ Criteria andTmpTypeEqualTo(Byte)
+ Criteria andTmpTypeNotEqualTo(Byte)
+ Criteria andTmpTypeGreaterThan(Byte)
+ Criteria andTmpTypeGreaterThanOrEqualTo(Byte)
+ Criteria andTmpTypeLessThan(Byte)
+ Criteria andTmpTypeLessThanOrEqualTo(Byte)
+ Criteria andTmpTypeIn(List<Byte>)
+ Criteria andTmpTypeNotIn(List<Byte>)
+ Criteria andTmpTypeBetween(Byte,Byte)
+ Criteria andTmpTypeNotBetween(Byte,Byte)
+ Criteria andTmplTitleIsNull()
+ Criteria andTmplTitleIsNotNull()
+ Criteria andTmplTitleEqualTo(String)
+ Criteria andTmplTitleNotEqualTo(String)
+ Criteria andTmplTitleGreaterThan(String)
+ Criteria andTmplTitleGreaterThanOrEqualTo(String)
+ Criteria andTmplTitleLessThan(String)
+ Criteria andTmplTitleLessThanOrEqualTo(String)
+ Criteria andTmplTitleLike(String)
+ Criteria andTmplTitleNotLike(String)
+ Criteria andTmplTitleIn(List<String>)
+ Criteria andTmplTitleNotIn(List<String>)
+ Criteria andTmplTitleBetween(String,String)
+ Criteria andTmplTitleNotBetween(String,String)
+ Criteria andTmplDescIsNull()
+ Criteria andTmplDescIsNotNull()
+ Criteria andTmplDescEqualTo(String)
+ Criteria andTmplDescNotEqualTo(String)
+ Criteria andTmplDescGreaterThan(String)
+ Criteria andTmplDescGreaterThanOrEqualTo(String)
+ Criteria andTmplDescLessThan(String)
+ Criteria andTmplDescLessThanOrEqualTo(String)
+ Criteria andTmplDescLike(String)
+ Criteria andTmplDescNotLike(String)
+ Criteria andTmplDescIn(List<String>)
+ Criteria andTmplDescNotIn(List<String>)
+ Criteria andTmplDescBetween(String,String)
+ Criteria andTmplDescNotBetween(String,String)
+ Criteria andNameSpaceIsNull()
+ Criteria andNameSpaceIsNotNull()
+ Criteria andNameSpaceEqualTo(String)
+ Criteria andNameSpaceNotEqualTo(String)
+ Criteria andNameSpaceGreaterThan(String)
+ Criteria andNameSpaceGreaterThanOrEqualTo(String)
+ Criteria andNameSpaceLessThan(String)
+ Criteria andNameSpaceLessThanOrEqualTo(String)
+ Criteria andNameSpaceLike(String)
+ Criteria andNameSpaceNotLike(String)
+ Criteria andNameSpaceIn(List<String>)
+ Criteria andNameSpaceNotIn(List<String>)
+ Criteria andNameSpaceBetween(String,String)
+ Criteria andNameSpaceNotBetween(String,String)
+ Criteria andElementNameIsNull()
+ Criteria andElementNameIsNotNull()
+ Criteria andElementNameEqualTo(String)
+ Criteria andElementNameNotEqualTo(String)
+ Criteria andElementNameGreaterThan(String)
+ Criteria andElementNameGreaterThanOrEqualTo(String)
+ Criteria andElementNameLessThan(String)
+ Criteria andElementNameLessThanOrEqualTo(String)
+ Criteria andElementNameLike(String)
+ Criteria andElementNameNotLike(String)
+ Criteria andElementNameIn(List<String>)
+ Criteria andElementNameNotIn(List<String>)
+ Criteria andElementNameBetween(String,String)
+ Criteria andElementNameNotBetween(String,String)
+ Criteria andLanguageIsNull()
+ Criteria andLanguageIsNotNull()
+ Criteria andLanguageEqualTo(String)
+ Criteria andLanguageNotEqualTo(String)
+ Criteria andLanguageGreaterThan(String)
+ Criteria andLanguageGreaterThanOrEqualTo(String)
+ Criteria andLanguageLessThan(String)
+ Criteria andLanguageLessThanOrEqualTo(String)
+ Criteria andLanguageLike(String)
+ Criteria andLanguageNotLike(String)
+ Criteria andLanguageIn(List<String>)
+ Criteria andLanguageNotIn(List<String>)
+ Criteria andLanguageBetween(String,String)
+ Criteria andLanguageNotBetween(String,String)
+ Criteria andSureTmplNameIsNull()
+ Criteria andSureTmplNameIsNotNull()
+ Criteria andSureTmplNameEqualTo(String)
+ Criteria andSureTmplNameNotEqualTo(String)
+ Criteria andSureTmplNameGreaterThan(String)
+ Criteria andSureTmplNameGreaterThanOrEqualTo(String)
+ Criteria andSureTmplNameLessThan(String)
+ Criteria andSureTmplNameLessThanOrEqualTo(String)
+ Criteria andSureTmplNameLike(String)
+ Criteria andSureTmplNameNotLike(String)
+ Criteria andSureTmplNameIn(List<String>)
+ Criteria andSureTmplNameNotIn(List<String>)
+ Criteria andSureTmplNameBetween(String,String)
+ Criteria andSureTmplNameNotBetween(String,String)
+ Criteria andNegaTmplNameIsNull()
+ Criteria andNegaTmplNameIsNotNull()
+ Criteria andNegaTmplNameEqualTo(String)
+ Criteria andNegaTmplNameNotEqualTo(String)
+ Criteria andNegaTmplNameGreaterThan(String)
+ Criteria andNegaTmplNameGreaterThanOrEqualTo(String)
+ Criteria andNegaTmplNameLessThan(String)
+ Criteria andNegaTmplNameLessThanOrEqualTo(String)
+ Criteria andNegaTmplNameLike(String)
+ Criteria andNegaTmplNameNotLike(String)
+ Criteria andNegaTmplNameIn(List<String>)
+ Criteria andNegaTmplNameNotIn(List<String>)
+ Criteria andNegaTmplNameBetween(String,String)
+ Criteria andNegaTmplNameNotBetween(String,String)
+ Criteria andOtherTmplNameIsNull()
+ Criteria andOtherTmplNameIsNotNull()
+ Criteria andOtherTmplNameEqualTo(String)
+ Criteria andOtherTmplNameNotEqualTo(String)
+ Criteria andOtherTmplNameGreaterThan(String)
+ Criteria andOtherTmplNameGreaterThanOrEqualTo(String)
+ Criteria andOtherTmplNameLessThan(String)
+ Criteria andOtherTmplNameLessThanOrEqualTo(String)
+ Criteria andOtherTmplNameLike(String)
+ Criteria andOtherTmplNameNotLike(String)
+ Criteria andOtherTmplNameIn(List<String>)
+ Criteria andOtherTmplNameNotIn(List<String>)
+ Criteria andOtherTmplNameBetween(String,String)
+ Criteria andOtherTmplNameNotBetween(String,String)
+ Criteria andStateIsNull()
+ Criteria andStateIsNotNull()
+ Criteria andStateEqualTo(Boolean)
+ Criteria andStateNotEqualTo(Boolean)
+ Criteria andStateGreaterThan(Boolean)
+ Criteria andStateGreaterThanOrEqualTo(Boolean)
+ Criteria andStateLessThan(Boolean)
+ Criteria andStateLessThanOrEqualTo(Boolean)
+ Criteria andStateIn(List<Boolean>)
+ Criteria andStateNotIn(List<Boolean>)
+ Criteria andStateBetween(Boolean,Boolean)
+ Criteria andStateNotBetween(Boolean,Boolean)
+ Criteria andIsReplyIsNull()
+ Criteria andIsReplyIsNotNull()
+ Criteria andIsReplyEqualTo(Boolean)
+ Criteria andIsReplyNotEqualTo(Boolean)
+ Criteria andIsReplyGreaterThan(Boolean)
+ Criteria andIsReplyGreaterThanOrEqualTo(Boolean)
+ Criteria andIsReplyLessThan(Boolean)
+ Criteria andIsReplyLessThanOrEqualTo(Boolean)
+ Criteria andIsReplyIn(List<Boolean>)
+ Criteria andIsReplyNotIn(List<Boolean>)
+ Criteria andIsReplyBetween(Boolean,Boolean)
+ Criteria andIsReplyNotBetween(Boolean,Boolean)
+ Criteria andIsEndIsNull()
+ Criteria andIsEndIsNotNull()
+ Criteria andIsEndEqualTo(Boolean)
+ Criteria andIsEndNotEqualTo(Boolean)
+ Criteria andIsEndGreaterThan(Boolean)
+ Criteria andIsEndGreaterThanOrEqualTo(Boolean)
+ Criteria andIsEndLessThan(Boolean)
+ Criteria andIsEndLessThanOrEqualTo(Boolean)
+ Criteria andIsEndIn(List<Boolean>)
+ Criteria andIsEndNotIn(List<Boolean>)
+ Criteria andIsEndBetween(Boolean,Boolean)
+ Criteria andIsEndNotBetween(Boolean,Boolean)
+ Criteria andSortIsNull()
+ Criteria andSortIsNotNull()
+ Criteria andSortEqualTo(Integer)
+ Criteria andSortNotEqualTo(Integer)
+ Criteria andSortGreaterThan(Integer)
+ Criteria andSortGreaterThanOrEqualTo(Integer)
+ Criteria andSortLessThan(Integer)
+ Criteria andSortLessThanOrEqualTo(Integer)
+ Criteria andSortIn(List<Integer>)
+ Criteria andSortNotIn(List<Integer>)
+ Criteria andSortBetween(Integer,Integer)
+ Criteria andSortNotBetween(Integer,Integer)
+ Criteria andAppTagsIsNull()
+ Criteria andAppTagsIsNotNull()
+ Criteria andAppTagsEqualTo(String)
+ Criteria andAppTagsNotEqualTo(String)
+ Criteria andAppTagsGreaterThan(String)
+ Criteria andAppTagsGreaterThanOrEqualTo(String)
+ Criteria andAppTagsLessThan(String)
+ Criteria andAppTagsLessThanOrEqualTo(String)
+ Criteria andAppTagsLike(String)
+ Criteria andAppTagsNotLike(String)
+ Criteria andAppTagsIn(List<String>)
+ Criteria andAppTagsNotIn(List<String>)
+ Criteria andAppTagsBetween(String,String)
+ Criteria andAppTagsNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.WhatsappTemplateConfExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.WhatsappTemplateConfExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.dto.push.BatchResultDTO {
- String error
- String message_id
}
interface com.welab.message.service.IAddresseeWhiteListDubboService {
~ List<SpecialEmailSourceDTO> querySpecialEmailReceive()
~ SpecialEmailReceiverDTO queryMobileWhiteList()
~ void saveMobileWhiteList(SpecialEmailReceiverDTO)
~ void saveEmailTaskWhiteList(SpecialEmailReceiverDTO)
}
class com.welab.message.email.EmailTest {
+ {static} void main(String[])
}
class com.welab.message.email.EmailTest$EmailWork {
- AtomicInteger atomicInteger
- JavaMailSenderImpl mailSender
- MimeMessage mimeMessage
+ <<Create>> EmailWork(AtomicInteger,JavaMailSenderImpl,MimeMessage)
+ void run()
}
class com.welab.message.model.AppMessageExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> AppMessageExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.AppMessageExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andOrgIdIsNull()
+ Criteria andOrgIdIsNotNull()
+ Criteria andOrgIdEqualTo(Long)
+ Criteria andOrgIdNotEqualTo(Long)
+ Criteria andOrgIdGreaterThan(Long)
+ Criteria andOrgIdGreaterThanOrEqualTo(Long)
+ Criteria andOrgIdLessThan(Long)
+ Criteria andOrgIdLessThanOrEqualTo(Long)
+ Criteria andOrgIdIn(List<Long>)
+ Criteria andOrgIdNotIn(List<Long>)
+ Criteria andOrgIdBetween(Long,Long)
+ Criteria andOrgIdNotBetween(Long,Long)
+ Criteria andMsgTypeIsNull()
+ Criteria andMsgTypeIsNotNull()
+ Criteria andMsgTypeEqualTo(Byte)
+ Criteria andMsgTypeNotEqualTo(Byte)
+ Criteria andMsgTypeGreaterThan(Byte)
+ Criteria andMsgTypeGreaterThanOrEqualTo(Byte)
+ Criteria andMsgTypeLessThan(Byte)
+ Criteria andMsgTypeLessThanOrEqualTo(Byte)
+ Criteria andMsgTypeIn(List<Byte>)
+ Criteria andMsgTypeNotIn(List<Byte>)
+ Criteria andMsgTypeBetween(Byte,Byte)
+ Criteria andMsgTypeNotBetween(Byte,Byte)
+ Criteria andMessageCodeIsNull()
+ Criteria andMessageCodeIsNotNull()
+ Criteria andMessageCodeEqualTo(String)
+ Criteria andMessageCodeNotEqualTo(String)
+ Criteria andMessageCodeGreaterThan(String)
+ Criteria andMessageCodeGreaterThanOrEqualTo(String)
+ Criteria andMessageCodeLessThan(String)
+ Criteria andMessageCodeLessThanOrEqualTo(String)
+ Criteria andMessageCodeLike(String)
+ Criteria andMessageCodeNotLike(String)
+ Criteria andMessageCodeIn(List<String>)
+ Criteria andMessageCodeNotIn(List<String>)
+ Criteria andMessageCodeBetween(String,String)
+ Criteria andMessageCodeNotBetween(String,String)
+ Criteria andImageUrlIsNull()
+ Criteria andImageUrlIsNotNull()
+ Criteria andImageUrlEqualTo(String)
+ Criteria andImageUrlNotEqualTo(String)
+ Criteria andImageUrlGreaterThan(String)
+ Criteria andImageUrlGreaterThanOrEqualTo(String)
+ Criteria andImageUrlLessThan(String)
+ Criteria andImageUrlLessThanOrEqualTo(String)
+ Criteria andImageUrlLike(String)
+ Criteria andImageUrlNotLike(String)
+ Criteria andImageUrlIn(List<String>)
+ Criteria andImageUrlNotIn(List<String>)
+ Criteria andImageUrlBetween(String,String)
+ Criteria andImageUrlNotBetween(String,String)
+ Criteria andUserIdIsNull()
+ Criteria andUserIdIsNotNull()
+ Criteria andUserIdEqualTo(Long)
+ Criteria andUserIdNotEqualTo(Long)
+ Criteria andUserIdGreaterThan(Long)
+ Criteria andUserIdGreaterThanOrEqualTo(Long)
+ Criteria andUserIdLessThan(Long)
+ Criteria andUserIdLessThanOrEqualTo(Long)
+ Criteria andUserIdIn(List<Long>)
+ Criteria andUserIdNotIn(List<Long>)
+ Criteria andUserIdBetween(Long,Long)
+ Criteria andUserIdNotBetween(Long,Long)
+ Criteria andTitleIsNull()
+ Criteria andTitleIsNotNull()
+ Criteria andTitleEqualTo(String)
+ Criteria andTitleNotEqualTo(String)
+ Criteria andTitleGreaterThan(String)
+ Criteria andTitleGreaterThanOrEqualTo(String)
+ Criteria andTitleLessThan(String)
+ Criteria andTitleLessThanOrEqualTo(String)
+ Criteria andTitleLike(String)
+ Criteria andTitleNotLike(String)
+ Criteria andTitleIn(List<String>)
+ Criteria andTitleNotIn(List<String>)
+ Criteria andTitleBetween(String,String)
+ Criteria andTitleNotBetween(String,String)
+ Criteria andStateIsNull()
+ Criteria andStateIsNotNull()
+ Criteria andStateEqualTo(String)
+ Criteria andStateNotEqualTo(String)
+ Criteria andStateGreaterThan(String)
+ Criteria andStateGreaterThanOrEqualTo(String)
+ Criteria andStateLessThan(String)
+ Criteria andStateLessThanOrEqualTo(String)
+ Criteria andStateLike(String)
+ Criteria andStateNotLike(String)
+ Criteria andStateIn(List<String>)
+ Criteria andStateNotIn(List<String>)
+ Criteria andStateBetween(String,String)
+ Criteria andStateNotBetween(String,String)
+ Criteria andReadAtIsNull()
+ Criteria andReadAtIsNotNull()
+ Criteria andReadAtEqualTo(Date)
+ Criteria andReadAtNotEqualTo(Date)
+ Criteria andReadAtGreaterThan(Date)
+ Criteria andReadAtGreaterThanOrEqualTo(Date)
+ Criteria andReadAtLessThan(Date)
+ Criteria andReadAtLessThanOrEqualTo(Date)
+ Criteria andReadAtIn(List<Date>)
+ Criteria andReadAtNotIn(List<Date>)
+ Criteria andReadAtBetween(Date,Date)
+ Criteria andReadAtNotBetween(Date,Date)
+ Criteria andSendAtIsNull()
+ Criteria andSendAtIsNotNull()
+ Criteria andSendAtEqualTo(Date)
+ Criteria andSendAtNotEqualTo(Date)
+ Criteria andSendAtGreaterThan(Date)
+ Criteria andSendAtGreaterThanOrEqualTo(Date)
+ Criteria andSendAtLessThan(Date)
+ Criteria andSendAtLessThanOrEqualTo(Date)
+ Criteria andSendAtIn(List<Date>)
+ Criteria andSendAtNotIn(List<Date>)
+ Criteria andSendAtBetween(Date,Date)
+ Criteria andSendAtNotBetween(Date,Date)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
+ Criteria andButtonTitleIsNull()
+ Criteria andButtonTitleIsNotNull()
+ Criteria andButtonTitleEqualTo(String)
+ Criteria andButtonTitleNotEqualTo(String)
+ Criteria andButtonTitleGreaterThan(String)
+ Criteria andButtonTitleGreaterThanOrEqualTo(String)
+ Criteria andButtonTitleLessThan(String)
+ Criteria andButtonTitleLessThanOrEqualTo(String)
+ Criteria andButtonTitleLike(String)
+ Criteria andButtonTitleNotLike(String)
+ Criteria andButtonTitleIn(List<String>)
+ Criteria andButtonTitleNotIn(List<String>)
+ Criteria andButtonTitleBetween(String,String)
+ Criteria andButtonTitleNotBetween(String,String)
+ Criteria andH5UrlIsNull()
+ Criteria andH5UrlIsNotNull()
+ Criteria andH5UrlEqualTo(String)
+ Criteria andH5UrlNotEqualTo(String)
+ Criteria andH5UrlGreaterThan(String)
+ Criteria andH5UrlGreaterThanOrEqualTo(String)
+ Criteria andH5UrlLessThan(String)
+ Criteria andH5UrlLessThanOrEqualTo(String)
+ Criteria andH5UrlLike(String)
+ Criteria andH5UrlNotLike(String)
+ Criteria andH5UrlIn(List<String>)
+ Criteria andH5UrlNotIn(List<String>)
+ Criteria andH5UrlBetween(String,String)
+ Criteria andH5UrlNotBetween(String,String)
+ Criteria andAppCodeIsNull()
+ Criteria andAppCodeIsNotNull()
+ Criteria andAppCodeEqualTo(String)
+ Criteria andAppCodeNotEqualTo(String)
+ Criteria andAppCodeGreaterThan(String)
+ Criteria andAppCodeGreaterThanOrEqualTo(String)
+ Criteria andAppCodeLessThan(String)
+ Criteria andAppCodeLessThanOrEqualTo(String)
+ Criteria andAppCodeLike(String)
+ Criteria andAppCodeNotLike(String)
+ Criteria andAppCodeIn(List<String>)
+ Criteria andAppCodeNotIn(List<String>)
+ Criteria andAppCodeBetween(String,String)
+ Criteria andAppCodeNotBetween(String,String)
+ Criteria andButtonCodeIsNull()
+ Criteria andButtonCodeIsNotNull()
+ Criteria andButtonCodeEqualTo(String)
+ Criteria andButtonCodeNotEqualTo(String)
+ Criteria andButtonCodeGreaterThan(String)
+ Criteria andButtonCodeGreaterThanOrEqualTo(String)
+ Criteria andButtonCodeLessThan(String)
+ Criteria andButtonCodeLessThanOrEqualTo(String)
+ Criteria andButtonCodeLike(String)
+ Criteria andButtonCodeNotLike(String)
+ Criteria andButtonCodeIn(List<String>)
+ Criteria andButtonCodeNotIn(List<String>)
+ Criteria andButtonCodeBetween(String,String)
+ Criteria andButtonCodeNotBetween(String,String)
+ Criteria andServiceTypeIsNull()
+ Criteria andServiceTypeIsNotNull()
+ Criteria andServiceTypeEqualTo(Byte)
+ Criteria andServiceTypeNotEqualTo(Byte)
+ Criteria andServiceTypeGreaterThan(Byte)
+ Criteria andServiceTypeGreaterThanOrEqualTo(Byte)
+ Criteria andServiceTypeLessThan(Byte)
+ Criteria andServiceTypeLessThanOrEqualTo(Byte)
+ Criteria andServiceTypeIn(List<Byte>)
+ Criteria andServiceTypeNotIn(List<Byte>)
+ Criteria andServiceTypeBetween(Byte,Byte)
+ Criteria andServiceTypeNotBetween(Byte,Byte)
}
class com.welab.message.model.AppMessageExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.AppMessageExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.controller.MessageAppController {
- MessageAppServiceImpl messageAppService
+ Response getPage(Long,Byte,Integer,Integer)
+ Response deat(Long,String)
+ Response<Object> deatPushPutReq(String)
+ Response<Object> deatPush(Long,String)
+ Response getUnreadNumber(Long)
+ Response<List<ServicePushMessage>> getEventAppMsgList(String)
}
enum com.welab.message.enmu.MessageChannelEnum {
+  MATCH_RULE
+  JATIS
+  KREDDO
+  ADA
- Byte channelType
- String value
- String name
+ {static} MessageChannelEnum getByChannelType(Byte)
+ {static} MessageChannelEnum getType(String)
}
class com.welab.message.vo.MessagePushByUserIdVO {
- {static} long serialVersionUID
- String userIds
- String title
- String body
+ String getUserIds()
+ void setUserIds(String)
+ String getTitle()
+ void setTitle(String)
+ String getBody()
+ void setBody(String)
}
class com.welab.message.core.config.KreddoKeysConfig {
- List<ApiConfig.Config> keys
}
class com.welab.message.app.cmd.UserSendWaForVcodeCmdExe {
- JatisSmsServiceImpl jatisSmsServiceImpl
- MessageSmsServiceImpl messageSmsServiceImpl
- BaseMsgVcodeService baseMsgVcodeService
- JedisCluster jedisCluster
- String appId
- {static} String SMS_SWITCH_OPEN
- Integer timesCount
- Integer effectiveTime
- String messageSmsSwitch
- String MESSAGE_SMS_MOBILE_WHITELIST
- String smsCode
- ApiConfig apiConfig
+ MessageVcodeLog forVcodeByWa(String,String)
}
class com.welab.message.mongo.MongoTest {
- MongoTemplateExt mongoTemplate
- WhatsAppMsgService whatsAppMsgService
+ void createCollection()
+ void insert()
+ void query()
+ void del()
+ void queryOne()
+ void replay()
+ void status()
+ void testNum()
}
class com.welab.message.app.base.BaseCmsgGroupService {
- CmsgGroupMapper cmsgGroupMapper
+ CmsgGroup getDataByGroupKey(String)
}
class com.welab.message.app.base.BaseAppMessageService {
- AppMessageMapper appMessageMapper
+ AppMessage addAppMessage(AppMessage)
}
abstract class com.welab.message.service.push.AbsPushService {
- {static} int MAX_PUSH_SIZE
- AppMessageExtMapper appMessageExtMapper
- AppMessageMapper appMessageMapper
- AppTokenServiceImpl appTokenService
- PushMessageMapper pushMessageMapper
- PushMessageExtMapper pushMessageExtMapper
- ServicePushMessageExtMapper servicePushMessageExtMapper
- PushTemplateConfExtMapper pushTemplateConfExtMapper
- AppMessageTemplateManager appMessageTemplateManager
- JedisCluster redis
- BackstageConfigSeviceFacade backstageConfigSeviceFacade
~ ScheduledExecutorService scheduledPool
- String pattern_suffix
- String pattern_prefix
# {abstract}PushAuthBean buildAuth()
+ void baseMessagePush(MessagePushDTO)
# void doSend(MessagePushDTO,long,PushAuthBean,PushMessage,Map<String,Object>,int)
+ void baseBatchMessagePush(MessagePushBatchDTO)
+ void messagePush(MessagePushDTO)
- AppMessage saveAppMessage(MessagePushDTO,String)
- PushMessage savePushMessage(MessagePushDTO,String)
- void batchSaveAppMessage(MessagePushBatchDTO,List<Long>,String)
- List<PushMessage> batchSavePushMessage(MessagePushBatchDTO,List<Long>,String)
- void updatePushMessage(PushMessage)
- Map<String,String> getPushHeaderMap(PushAuthBean)
+ void batchMessagePush(MessagePushBatchDTO)
+ void messagePushWithTemplate(Long,Long,String,Map<String,String>)
+ void messagePushWithTemplate(TemplatePushDTO)
+ void batchMessagePushWithTemplate(List<Long>,Long,String,Map<String,String>)
- void converTemplateMsg(MessagePushDTO)
- void converTemplateMsg(MessagePushBatchDTO)
- Long staticTemplateSendPushCount(String,Long,List<Long>)
}
class com.welab.message.service.email.EmailErrorHandler {
- JedisCluster jedis
- Integer times
- Integer expire
+ EmailSendResEnum errorHand(MailSendException,BaseMailDTO,JavaMailSenderImpl)
- void invalidAddresses(BaseMailDTO)
+ EmailSendResEnum errorHand(MailSendException,EmailMqInfo,JavaMailSenderImpl)
- void invalidAddresses(EmailMqInfo)
}
enum com.welab.message.service.email.EmailErrorEnum {
+  INVALID_ADDRESSES
}
class com.welab.message.core.mq.EmailMqReceiver {
- MessageEmailServiceImpl messageEmailService
- TimingMsgDubboService timingMsgDubboService
+ void process(Message)
+ void newEmailHandler(Message)
}
class com.welab.message.model.EmailTemplateConf {
- Long tmplConfId
- Long orgId
- String tmplName
- String tmplDesc
- String tmplTitle
- Boolean htmlFlag
- Boolean state
- Byte freemarkType
- Date createdAt
- Date updatedAt
- String tmplContent
+ Long getTmplConfId()
+ void setTmplConfId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getTmplName()
+ void setTmplName(String)
+ String getTmplDesc()
+ void setTmplDesc(String)
+ String getTmplTitle()
+ void setTmplTitle(String)
+ Boolean getHtmlFlag()
+ void setHtmlFlag(Boolean)
+ Boolean getState()
+ void setState(Boolean)
+ Byte getFreemarkType()
+ void setFreemarkType(Byte)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getTmplContent()
+ void setTmplContent(String)
}
class com.welab.message.dto.push.TemplatePushDTO {
- Long userId
- Long orgId
- String templateName
- Map<String,String> replaceField
- Map<String,Object> eventMap
- String buttonCode
}
class com.welab.message.app.service.NormalEmailSender {
- EmailMessageTemplateManager emailMessageTemplateManager
# EmailSendResEnum sendEmail(BaseMailDTO,JavaMailSenderImplExt)
+ EmailMessageLogWithBLOBs buildMessageLog(BaseMailDTO)
+ void initEmailParam(BaseMailDTO)
}
enum com.welab.message.enmu.SourceChannelEnum {
+  DAILY
+  ALERT
+  OTP
- String value
- String name
- <<Create>> SourceChannelEnum(String,String)
+ String getValue()
+ String getName()
+ {static} SourceChannelEnum getType(String)
}
class com.welab.message.job.DeleteMailJob {
- EmailSenderConfigManager baseEmailService
- Integer QUANTITY
+ void execute(ShardingContext)
+ void resceive(Map<String,String>)
+ void deleteMessage(Folder,Date)
+ void asyncDeleteMessage(Message[],Date,boolean)
}
enum com.welab.message.enmu.mq.DelayMessageMetaInfoEnum {
- MessageTypeEnum messageTypeEnum
+ String queueName
+ String bindExchangeName
+ String routingKey
+ String deadExchangeName
+ String deadRoutingKey
+ String tag
+ String listenerContainerFactoryBeanId
}
class com.welab.message.app.cmd.VcodeChannelChooseCmdExe {
- BackstageConfigSeviceFacade backstageConfigSeviceFacade
- WhiteListService whiteListDubboService
+ void chooseMessageChannel(SendSmsRequestVCode)
- boolean isPriotyAda(String)
}
class com.welab.message.constant.MessageMqConstant {
+ {static} String SEA_EMAIL_QUEUE_NAME
+ {static} String SEA_EMAIL_QUEUE_NAME_V2
+ {static} String SEA_WEBSOCKET_FANOUT_EXCHANGE_NAME
+ {static} String SEA_APP_PUSH_QUEUE_NAME
+ {static} String SEA_APP_PUSH_STATE_QUEUE_NAME
- <<Create>> MessageMqConstant()
}
interface com.welab.message.mapper.ext.PushTemplateConfExtMapper {
~ List<String> getAllPushTemplateName()
~ PushTemplateConfExt selectByCondition(Long,String)
}
class com.welab.message.dto.whatsapp.WhatsappTmplConfReq {
- Long orgId
- Long tmplConfId
- String tmplName
- AppTagsEnum appTags
- Boolean state
- Boolean isReply
- WhatsAppMsgTypeEnum msgTypeEnum
}
class com.welab.message.model.CmsgGroupExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> CmsgGroupExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.CmsgGroupExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andGroupNameIsNull()
+ Criteria andGroupNameIsNotNull()
+ Criteria andGroupNameEqualTo(String)
+ Criteria andGroupNameNotEqualTo(String)
+ Criteria andGroupNameGreaterThan(String)
+ Criteria andGroupNameGreaterThanOrEqualTo(String)
+ Criteria andGroupNameLessThan(String)
+ Criteria andGroupNameLessThanOrEqualTo(String)
+ Criteria andGroupNameLike(String)
+ Criteria andGroupNameNotLike(String)
+ Criteria andGroupNameIn(List<String>)
+ Criteria andGroupNameNotIn(List<String>)
+ Criteria andGroupNameBetween(String,String)
+ Criteria andGroupNameNotBetween(String,String)
+ Criteria andGroupKeyIsNull()
+ Criteria andGroupKeyIsNotNull()
+ Criteria andGroupKeyEqualTo(String)
+ Criteria andGroupKeyNotEqualTo(String)
+ Criteria andGroupKeyGreaterThan(String)
+ Criteria andGroupKeyGreaterThanOrEqualTo(String)
+ Criteria andGroupKeyLessThan(String)
+ Criteria andGroupKeyLessThanOrEqualTo(String)
+ Criteria andGroupKeyLike(String)
+ Criteria andGroupKeyNotLike(String)
+ Criteria andGroupKeyIn(List<String>)
+ Criteria andGroupKeyNotIn(List<String>)
+ Criteria andGroupKeyBetween(String,String)
+ Criteria andGroupKeyNotBetween(String,String)
+ Criteria andQywxRobotKeyIsNull()
+ Criteria andQywxRobotKeyIsNotNull()
+ Criteria andQywxRobotKeyEqualTo(String)
+ Criteria andQywxRobotKeyNotEqualTo(String)
+ Criteria andQywxRobotKeyGreaterThan(String)
+ Criteria andQywxRobotKeyGreaterThanOrEqualTo(String)
+ Criteria andQywxRobotKeyLessThan(String)
+ Criteria andQywxRobotKeyLessThanOrEqualTo(String)
+ Criteria andQywxRobotKeyLike(String)
+ Criteria andQywxRobotKeyNotLike(String)
+ Criteria andQywxRobotKeyIn(List<String>)
+ Criteria andQywxRobotKeyNotIn(List<String>)
+ Criteria andQywxRobotKeyBetween(String,String)
+ Criteria andQywxRobotKeyNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.CmsgGroupExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.model.CmsgGroupExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.app.manager.template.AppMessageTemplateManager {
- BaseAppMessageTempalteService baseAppMessageTempalteService
+ PushTemplateConfExt getPushMessageBody(Long,String,Map<String,String>)
+ PushTemplateConfExt getPushMessageBody(AppMessageTemplateDTO)
}
class com.welab.message.model.MessageVcodeLog {
- Long msgVcodeId
- Long orgId
- String mobile
- String sourceId
- String templateName
- String vcode
- Integer checkTimes
- Integer checkedTimes
- Date shelfLife
- Boolean usedFlag
- String operateSign
- Date accessTime
- Date sendTime
- String vendor
- String rspCode
- String rspDesc
- String rspMsgid
- Date finishTime
- String tags
- Date createdAt
- Date updatedAt
+ Long getMsgVcodeId()
+ void setMsgVcodeId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getMobile()
+ void setMobile(String)
+ String getSourceId()
+ void setSourceId(String)
+ String getTemplateName()
+ void setTemplateName(String)
+ String getVcode()
+ void setVcode(String)
+ Integer getCheckTimes()
+ void setCheckTimes(Integer)
+ Integer getCheckedTimes()
+ void setCheckedTimes(Integer)
+ Date getShelfLife()
+ void setShelfLife(Date)
+ Boolean getUsedFlag()
+ void setUsedFlag(Boolean)
+ String getOperateSign()
+ void setOperateSign(String)
+ Date getAccessTime()
+ void setAccessTime(Date)
+ Date getSendTime()
+ void setSendTime(Date)
+ String getVendor()
+ void setVendor(String)
+ String getRspCode()
+ void setRspCode(String)
+ String getRspDesc()
+ void setRspDesc(String)
+ String getRspMsgid()
+ void setRspMsgid(String)
+ Date getFinishTime()
+ void setFinishTime(Date)
+ String getTags()
+ void setTags(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.config.WebSocketConfig {
- WhatsAppWebSocketHander whatsAppWebSocketHander
+ void registerWebSocketHandlers(WebSocketHandlerRegistry)
}
class com.welab.message.core.mq.WebSocketMqListener {
+ void onMessage(Message)
}
class com.welab.message.service.impl.TimingMsgServiceImpl {
- TimingMsgExtMapper timingMsgExtMapper
- JedisCluster redisClient
+ void saveTimingMsg(TimingMsg)
+ void processTimingMsg(Byte)
}
class com.welab.message.model.EmailMessageLog {
- Long id
- Long orgId
- String tmplName
- String title
- String appTags
- Byte sendStatus
- String remark
- Date sendAt
- Date createdAt
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getTmplName()
+ void setTmplName(String)
+ String getTitle()
+ void setTitle(String)
+ String getAppTags()
+ void setAppTags(String)
+ Byte getSendStatus()
+ void setSendStatus(Byte)
+ String getRemark()
+ void setRemark(String)
+ Date getSendAt()
+ void setSendAt(Date)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
}
class com.welab.message.dubbo.email.EmailConfigServiceTest {
- EmailConfigServiceImpl emailConfigServiceImpl
+ void test1()
+ void test2()
}
class com.welab.message.handler.websocket.WhatsAppWebSocketHander {
+ void afterConnectionEstablished(WebSocketSession)
# void handleTextMessage(WebSocketSession,TextMessage)
+ void afterConnectionClosed(WebSocketSession,CloseStatus)
}
enum com.welab.message.enmu.AppTokenTypeEnum {
+  GOOGLE
- String value
- String name
- <<Create>> AppTokenTypeEnum(String,String)
+ String getValue()
+ String getName()
+ {static} boolean check(String)
}
class com.welab.message.filter.LogFilter {
- {static} Logger LOGGER
- {static} String NOTIFICATION_PREFIX
- {static} String REQUEST_PREFIX
- {static} String RESPONSE_PREFIX
- AtomicLong _id
# void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)
+ void destroy()
- void log(StringBuilder)
- StringBuilder prefixId(StringBuilder,long)
- void printRequestLine(StringBuilder,String,long,String,String)
- void printResponseLine(StringBuilder,String,long,int)
- void printPrefixedHeaders(StringBuilder,long,String,HttpServletRequest)
}
class com.welab.message.job.TransferData2MonthTableJob {
- WelabSeaDynamicDbService welabSeaDynamicDbService
- JdbcTemplate jdbcTemplate
+ void execute(ShardingContext)
}
interface com.welab.message.mapper.CmsgTemplateMapper {
~ long countByExample(CmsgTemplateExample)
~ int deleteByExample(CmsgTemplateExample)
~ int deleteByPrimaryKey(Long)
~ int insert(CmsgTemplate)
~ int insertSelective(CmsgTemplate)
~ List<CmsgTemplate> selectByExample(CmsgTemplateExample)
~ CmsgTemplate selectByPrimaryKey(Long)
~ int updateByExampleSelective(CmsgTemplate,CmsgTemplateExample)
~ int updateByExample(CmsgTemplate,CmsgTemplateExample)
~ int updateByPrimaryKeySelective(CmsgTemplate)
~ int updateByPrimaryKey(CmsgTemplate)
}
class com.welab.message.model.AppMessage {
- Long id
- Long orgId
- Byte msgType
- String messageCode
- String imageUrl
- Long userId
- String title
- String state
- Date readAt
- Date sendAt
- Date createdAt
- Date updatedAt
- String buttonTitle
- String h5Url
- String appCode
- String buttonCode
- Byte serviceType
- String body
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ Byte getMsgType()
+ void setMsgType(Byte)
+ String getMessageCode()
+ void setMessageCode(String)
+ String getImageUrl()
+ void setImageUrl(String)
+ Long getUserId()
+ void setUserId(Long)
+ String getTitle()
+ void setTitle(String)
+ String getState()
+ void setState(String)
+ Date getReadAt()
+ void setReadAt(Date)
+ Date getSendAt()
+ void setSendAt(Date)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getButtonTitle()
+ void setButtonTitle(String)
+ String getH5Url()
+ void setH5Url(String)
+ String getAppCode()
+ void setAppCode(String)
+ String getButtonCode()
+ void setButtonCode(String)
+ Byte getServiceType()
+ void setServiceType(Byte)
+ String getBody()
+ void setBody(String)
}
class com.welab.message.dto.mq.VirtualAccountCreateDto {
- {static} long serialVersionUID
- String id
- Long userId
- String externalId
- String accountNumber
- String bankCode
- String name
- Boolean isClosed
- Boolean isSingleUse
- String status
- String expirationDate
- String updated
- String created
}
enum com.welab.message.enmu.VcodeServiceEnum {
+  LOGIN_REGISTER
+  SIGN
+  INVITE
+  MODIFY_MOBILE
+  CANCEL
- String operateSign
- String serviceSign
+ {static} VcodeServiceEnum getByServiceSign(String)
}
class com.welab.message.test.TestMybatis {
}
enum com.welab.message.enmu.PushMessageStateEnum {
+  INIT
+  SEND_SUCCESS
+  SEND_FAIL
+  SEND_ARRIVED
+  READED
- Byte state
}
class com.welab.message.controller.TestController {
+ String testFifEmail()
}
enum com.welab.message.enmu.UserWhiteListEnums {
+  WHITE_MOBILE
+  TO_USER_MAILS
+  BCC_USER_MAILS
+  CC_USER_MAILS
- Byte type
+ {static} List<Byte> getEmailTaskTypes()
}
class com.welab.message.service.whatsapp.WhatsAppMsgService {
- MessageMqServiceImpl messageMqService
- WhatsappMessageMapper whatsappMessageMapper
- WhatsAppTemplateConfService whatsAppTemplateConfService
- WhatsAppMsgService whatsAppMsgService
- JedisCluster jedisCluster
+ WhatsappMessage getFirstRecord(String,String)
+ void save(WhatsappMessage)
+ void updateMysqlDbByMogoId(WhatsappMessage)
+ void updateById(WhatsappMessage)
+ WhatsappMessage findOneByMobile(String,WhatsTypeEnum,Boolean)
+ PageInfo queryByPage(QryWhatsMsgReq)
+ void checkMsgStatus(KreddoRequestVO)
+ WhatsappMessage findOne(String,String,WhatsTypeEnum,Boolean)
+ void saveTmpParam(Long,Map<String,String>)
}
class com.welab.message.service.whatsapp.task.WhatsAppReplyMsgTask {
- String whatsAppExchange
- String body
- WhatsAppMsgService whatsAppMsgService
- WhatsAppTemplateConfService whatsAppTempConfService
+ <<Create>> WhatsAppReplyMsgTask(String,WhatsAppMsgService,String)
- WhatsAppTemplateConfService getWhatsAppTempConfService()
+ void run()
+ void handle()
+ JSONObject startParseJson()
+ Map<String,String> parseName(JSONArray)
+ List<WhatsAppMq> saveData(List<WhatsappMessage>,Boolean)
+ WhatsAppMq replyMsg(WhatsappMessage)
+ void sendMQ(List<WhatsAppMq>)
}
abstract class com.welab.message.dto.sms.SendSmsRequest {
- {static} long serialVersionUID
- Long orgId
- String mobile
- String sourceChannel
- String messageChannel
- String appTags
- String signName
- Boolean isSendMail
- Date sendTime
+ StringBuffer toBufLog()
+ String getSignName()
+ void setSignName(String)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getMobile()
+ void setMobile(String)
+ String getSourceChannel()
+ void setSourceChannel(String)
+ String getMessageChannel()
+ void setMessageChannel(String)
+ String getAppTags()
+ void setAppTags(String)
+ Boolean getIsSendMail()
+ void setIsSendMail(Boolean)
+ Date getSendTime()
+ void setSendTime(Date)
}
class com.welab.message.app.impl.FastMessageEmailServiceImpl {
- BaseEmailMessageLogService baseEmailMessageLogService
- NormalEmailSender normalEmailSender
- MessageMqService messageMqService
+ void sendBaseMail(BaseMailDTO)
+ void sendNormalMail(TemplateMailDTO)
+ Long saveMail(MailAttachmentDTO)
+ void updateById(MailAttachmentDTO)
}
enum com.welab.message.enmu.EmailTmplNameEnum {
+  APPROVER_NOTICE
- String value
- String name
- <<Create>> EmailTmplNameEnum(String,String)
+ String getValue()
+ String getName()
+ {static} EmailTmplNameEnum getType(String)
}
class com.welab.message.test.LuaTest {
+ void testRateLimit()
+ void testCyclicBarrier()
}
interface com.welab.message.service.AppTokenService {
~ Response<AppTokenDTO> query(String,String)
~ Response save(AppTokenDTO)
~ Response<AppTokenDTO> qyeryByUserId(Long)
~ Response<AppTokenDTO> queryAppTokenById(Long)
~ List<AppTokenDTO> getBatchToken(List<Long>)
~ List<AppTokenDTO> getBatchTokenById(List<Long>)
~ Response<Void> saveUnregisteredToken(AppTokenDTO)
}
class com.welab.message.service.mq.MessageMqServiceImpl {
- RabbitTemplate rabbitTemplate
- AmqpAdmin amqpAdmin
+ void send(String,String)
+ void sendDto(String,BaseMqDto)
+ void sendFanout(String,String)
+ void declareFanoutExchange(String)
}
class com.welab.message.vo.PushTemplateConfVO {
- {static} long serialVersionUID
- Long id
- Long orgId
- String tmplMsgTitle
- String tmplName
- String tmplDesc
- String tmplContent
- Boolean state
- Date createdAt
- Date updatedAt
- Integer pushNum
- Integer readNum
- String readRate
}
class com.welab.message.controller.MessagePushController {
- MessagePushService messagePushService
- ApplicationService applicationService
+ Response<Void> push(MessagePushDTO,Long)
+ Response<Void> pushBatch(MessagePushBatchDTO,Long)
+ Response<Void> pushTest(List<MessagePushVO>)
+ Response<Void> pushByUser(MessagePushByUserIdVO)
}
class com.welab.message.model.ext.EmailMqInfo {
- Long id
- Integer sendCount
}
interface com.welab.message.service.MessageEmailConfService {
~ Response<PageInfo<EmailTemplateConfVO>> getEmailTemplateConfByPage(EmailTemplateConfDTO)
~ Response<Void> updateEmailTemplateConfById(EmailTemplateConfDTO)
~ List<String> getAllEmailTemplateName()
~ EmailTemplateConfVO getEmailTemplateByName(String)
}
interface com.welab.message.mapper.ext.AddresseeWhiteListExtMapper {
~ AddresseeWhiteList getWhiteListRecord(AddresseeWhiteListExt)
~ List<AddresseeWhiteList> getWhiteList(AddresseeWhiteListExt)
}
class com.welab.message.model.ServicePushMessageExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> ServicePushMessageExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.ServicePushMessageExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andServiceTypeIsNull()
+ Criteria andServiceTypeIsNotNull()
+ Criteria andServiceTypeEqualTo(Byte)
+ Criteria andServiceTypeNotEqualTo(Byte)
+ Criteria andServiceTypeGreaterThan(Byte)
+ Criteria andServiceTypeGreaterThanOrEqualTo(Byte)
+ Criteria andServiceTypeLessThan(Byte)
+ Criteria andServiceTypeLessThanOrEqualTo(Byte)
+ Criteria andServiceTypeIn(List<Byte>)
+ Criteria andServiceTypeNotIn(List<Byte>)
+ Criteria andServiceTypeBetween(Byte,Byte)
+ Criteria andServiceTypeNotBetween(Byte,Byte)
+ Criteria andKeywordIsNull()
+ Criteria andKeywordIsNotNull()
+ Criteria andKeywordEqualTo(String)
+ Criteria andKeywordNotEqualTo(String)
+ Criteria andKeywordGreaterThan(String)
+ Criteria andKeywordGreaterThanOrEqualTo(String)
+ Criteria andKeywordLessThan(String)
+ Criteria andKeywordLessThanOrEqualTo(String)
+ Criteria andKeywordLike(String)
+ Criteria andKeywordNotLike(String)
+ Criteria andKeywordIn(List<String>)
+ Criteria andKeywordNotIn(List<String>)
+ Criteria andKeywordBetween(String,String)
+ Criteria andKeywordNotBetween(String,String)
+ Criteria andContentIsNull()
+ Criteria andContentIsNotNull()
+ Criteria andContentEqualTo(String)
+ Criteria andContentNotEqualTo(String)
+ Criteria andContentGreaterThan(String)
+ Criteria andContentGreaterThanOrEqualTo(String)
+ Criteria andContentLessThan(String)
+ Criteria andContentLessThanOrEqualTo(String)
+ Criteria andContentLike(String)
+ Criteria andContentNotLike(String)
+ Criteria andContentIn(List<String>)
+ Criteria andContentNotIn(List<String>)
+ Criteria andContentBetween(String,String)
+ Criteria andContentNotBetween(String,String)
+ Criteria andSendNumIsNull()
+ Criteria andSendNumIsNotNull()
+ Criteria andSendNumEqualTo(Integer)
+ Criteria andSendNumNotEqualTo(Integer)
+ Criteria andSendNumGreaterThan(Integer)
+ Criteria andSendNumGreaterThanOrEqualTo(Integer)
+ Criteria andSendNumLessThan(Integer)
+ Criteria andSendNumLessThanOrEqualTo(Integer)
+ Criteria andSendNumIn(List<Integer>)
+ Criteria andSendNumNotIn(List<Integer>)
+ Criteria andSendNumBetween(Integer,Integer)
+ Criteria andSendNumNotBetween(Integer,Integer)
+ Criteria andReadNumIsNull()
+ Criteria andReadNumIsNotNull()
+ Criteria andReadNumEqualTo(Integer)
+ Criteria andReadNumNotEqualTo(Integer)
+ Criteria andReadNumGreaterThan(Integer)
+ Criteria andReadNumGreaterThanOrEqualTo(Integer)
+ Criteria andReadNumLessThan(Integer)
+ Criteria andReadNumLessThanOrEqualTo(Integer)
+ Criteria andReadNumIn(List<Integer>)
+ Criteria andReadNumNotIn(List<Integer>)
+ Criteria andReadNumBetween(Integer,Integer)
+ Criteria andReadNumNotBetween(Integer,Integer)
+ Criteria andInboxReadNumIsNull()
+ Criteria andInboxReadNumIsNotNull()
+ Criteria andInboxReadNumEqualTo(Integer)
+ Criteria andInboxReadNumNotEqualTo(Integer)
+ Criteria andInboxReadNumGreaterThan(Integer)
+ Criteria andInboxReadNumGreaterThanOrEqualTo(Integer)
+ Criteria andInboxReadNumLessThan(Integer)
+ Criteria andInboxReadNumLessThanOrEqualTo(Integer)
+ Criteria andInboxReadNumIn(List<Integer>)
+ Criteria andInboxReadNumNotIn(List<Integer>)
+ Criteria andInboxReadNumBetween(Integer,Integer)
+ Criteria andInboxReadNumNotBetween(Integer,Integer)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.ServicePushMessageExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.model.ServicePushMessageExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.service.impl.AddresseeWhiteListServiceImpl {
- AddresseeWhiteListMapper addresseeWhiteListMapper
- AddresseeWhiteListExtMapper addresseeWhiteListExtMapper
+ List<AddresseeWhiteList> getWhiteListByTypes(List<Byte>)
+ void saveMobileWhiteList(AddresseeWhiteListExt)
+ void saveEmailTaskWhiteList(AddresseeWhiteListExt)
+ void saveOrUpdateRecord(AddresseeWhiteList,AddresseeWhiteList,String)
}
interface com.welab.message.mapper.CmsgContactsMapper {
~ long countByExample(CmsgContactsExample)
~ int deleteByExample(CmsgContactsExample)
~ int deleteByPrimaryKey(Long)
~ int insert(CmsgContacts)
~ int insertSelective(CmsgContacts)
~ List<CmsgContacts> selectByExample(CmsgContactsExample)
~ CmsgContacts selectByPrimaryKey(Long)
~ int updateByExampleSelective(CmsgContacts,CmsgContactsExample)
~ int updateByExample(CmsgContacts,CmsgContactsExample)
~ int updateByPrimaryKeySelective(CmsgContacts)
~ int updateByPrimaryKey(CmsgContacts)
}
class com.welab.message.service.whatsapp.ADASendMsgService {
- String host
- String authorization
- Boolean enable
+ SendSmsCommonResponse sendVCode(MessageVcodeLog,String)
- SendSmsCommonResponse retry(Map<String,String>,Map<String,String>,int)
}
interface com.welab.message.mapper.TimingMsgMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(TimingMsg)
~ int insertSelective(TimingMsg)
~ TimingMsg selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(TimingMsg)
~ int updateByPrimaryKeyWithBLOBs(TimingMsg)
~ int updateByPrimaryKey(TimingMsg)
}
class com.welab.message.dto.email.SpecialEmailSourceDTO {
- {static} long serialVersionUID
- String source
- List<SpecialEmailReceiverDTO> list
}
interface com.welab.message.service.AppTemplateMessageService {
~ Response<Long> sendTemplateAppMsg(AppMessageTemplateDTO)
}
class com.welab.message.utils.ListUtil {
+ {static} List<List<T>> splitList(List<T>,int)
- {static} List<T> subList(List<T>,int,int)
}
class com.welab.message.Application {
- {static} Logger LOG
+ {static} void main(String[])
}
class com.welab.message.dto.email.SpecialEmailReceiverDTO {
- {static} long serialVersionUID
- String toUserMails
- String ccUserMails
- String bccUserMails
- String title
- String key
- String desc
- String source
- Long updateUser
- String mobiles
}
class com.welab.message.app.manager.email.EmailSenderConfigManager {
- MessageConfig messageConfig
- ConcurrentMap<String,JavaMailSenderImpl> mailSenderMap
- ConcurrentMap<String,AtomicPositiveInteger> sequencesMap
- ConcurrentMap<String,AtomicPositiveInteger> weightSequencesMap
+ MessageConfig.SeaMailProperties doSelect(BaseMailDTO,List<MessageConfig.SeaMailProperties>)
- int getWeight(MessageConfig.SeaMailProperties)
+ List<Map<String,String>> getEmailAccount()
+ JavaMailSenderImpl doSelect(SeaMailProperties)
- JavaMailSenderImpl initJavaMailSender(SeaMailProperties)
+ Properties initMailProperties(MessageConfig.SeaMailProperties)
}
class com.welab.message.utils.SpringUtils {
- {static} ApplicationContext applicationContext
+ void setApplicationContext(ApplicationContext)
+ {static} ApplicationContext getApplicationContext()
+ {static} Object getBean(String)
+ {static} T getBean(Class<T>)
+ {static} T getBean(String,Class<T>)
+ {static} String getProperty(String)
}
class com.welab.message.dto.sms.SendSmsCommonResponse {
- Date sendTime
- Date finishTime
- String rspCode
- String rspDesc
- String rspMsgid
+ Date getSendTime()
+ void setSendTime(Date)
+ Date getFinishTime()
+ void setFinishTime(Date)
+ String getRspCode()
+ void setRspCode(String)
+ String getRspDesc()
+ void setRspDesc(String)
+ String getRspMsgid()
+ void setRspMsgid(String)
}
class com.welab.message.exception.MessageException {
- {static} long serialVersionUID
+ <<Create>> MessageException(Integer)
+ <<Create>> MessageException(Integer,String)
+ <<Create>> MessageException(ResponseErrorCode.MessageResponsCodeTypeEnum)
}
class com.welab.message.model.PushMessage {
- Long id
- Long orgId
- String messageCode
- Long msgServiceId
- Byte msgServiceType
- Long userId
- String title
- Byte state
- Date sentAt
- String messageId
- String resultDesc
- Date createdAt
- Date updatedAt
- String body
+ Long getId()
+ void setId(Long)
+ Long getOrgId()
+ void setOrgId(Long)
+ String getMessageCode()
+ void setMessageCode(String)
+ Long getMsgServiceId()
+ void setMsgServiceId(Long)
+ Byte getMsgServiceType()
+ void setMsgServiceType(Byte)
+ Long getUserId()
+ void setUserId(Long)
+ String getTitle()
+ void setTitle(String)
+ Byte getState()
+ void setState(Byte)
+ Date getSentAt()
+ void setSentAt(Date)
+ String getMessageId()
+ void setMessageId(String)
+ String getResultDesc()
+ void setResultDesc(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
+ String getBody()
+ void setBody(String)
}
class com.welab.message.dto.mq.VirtualAccountPaymentDto {
- {static} long serialVersionUID
- Long userId
- String externalId
- String accountNumber
- String bankCode
- Long amount
- Date transactionDate
- String orderNo
}
interface com.welab.message.service.MessageSmsService {
~ Response<Long> sendVCode(SendSmsRequestVCode)
~ Response<String> checkVCode(Long,String,String)
~ Response<String> checkVCodeByObject(SendSmsRequestVCode)
~ Response<String> sendWithTags(SendSmsRequestTags)
~ Response<String> sendTemplateWithTags(SendSmsRequestTemplate)
}
interface com.welab.message.service.push.IMessagePushService {
~ void messagePush(MessagePushDTO)
~ void batchMessagePush(MessagePushBatchDTO)
~ void messagePushWithTemplate(Long,Long,String,Map<String,String>)
~ void messagePushWithTemplate(TemplatePushDTO)
~ void batchMessagePushWithTemplate(List<Long>,Long,String,Map<String,String>)
}
class com.welab.message.service.impl.MessageSmsServiceImplTest {
- MessageSmsService messageSmsService
+ void sendVCode()
+ void checkVCode()
+ void sendWithTags()
+ void sendTemplateWithTags()
}
class com.welab.message.app.base.BaseCmsgContactsService {
- CmsgContactsMapper cmsgContactsMapper
+ List<CmsgContacts> findMobile(List<Long>)
}
class com.welab.message.model.EmailMessageLogExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> EmailMessageLogExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.EmailMessageLogExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andOrgIdIsNull()
+ Criteria andOrgIdIsNotNull()
+ Criteria andOrgIdEqualTo(Long)
+ Criteria andOrgIdNotEqualTo(Long)
+ Criteria andOrgIdGreaterThan(Long)
+ Criteria andOrgIdGreaterThanOrEqualTo(Long)
+ Criteria andOrgIdLessThan(Long)
+ Criteria andOrgIdLessThanOrEqualTo(Long)
+ Criteria andOrgIdIn(List<Long>)
+ Criteria andOrgIdNotIn(List<Long>)
+ Criteria andOrgIdBetween(Long,Long)
+ Criteria andOrgIdNotBetween(Long,Long)
+ Criteria andTmplNameIsNull()
+ Criteria andTmplNameIsNotNull()
+ Criteria andTmplNameEqualTo(String)
+ Criteria andTmplNameNotEqualTo(String)
+ Criteria andTmplNameGreaterThan(String)
+ Criteria andTmplNameGreaterThanOrEqualTo(String)
+ Criteria andTmplNameLessThan(String)
+ Criteria andTmplNameLessThanOrEqualTo(String)
+ Criteria andTmplNameLike(String)
+ Criteria andTmplNameNotLike(String)
+ Criteria andTmplNameIn(List<String>)
+ Criteria andTmplNameNotIn(List<String>)
+ Criteria andTmplNameBetween(String,String)
+ Criteria andTmplNameNotBetween(String,String)
+ Criteria andTitleIsNull()
+ Criteria andTitleIsNotNull()
+ Criteria andTitleEqualTo(String)
+ Criteria andTitleNotEqualTo(String)
+ Criteria andTitleGreaterThan(String)
+ Criteria andTitleGreaterThanOrEqualTo(String)
+ Criteria andTitleLessThan(String)
+ Criteria andTitleLessThanOrEqualTo(String)
+ Criteria andTitleLike(String)
+ Criteria andTitleNotLike(String)
+ Criteria andTitleIn(List<String>)
+ Criteria andTitleNotIn(List<String>)
+ Criteria andTitleBetween(String,String)
+ Criteria andTitleNotBetween(String,String)
+ Criteria andAppTagsIsNull()
+ Criteria andAppTagsIsNotNull()
+ Criteria andAppTagsEqualTo(String)
+ Criteria andAppTagsNotEqualTo(String)
+ Criteria andAppTagsGreaterThan(String)
+ Criteria andAppTagsGreaterThanOrEqualTo(String)
+ Criteria andAppTagsLessThan(String)
+ Criteria andAppTagsLessThanOrEqualTo(String)
+ Criteria andAppTagsLike(String)
+ Criteria andAppTagsNotLike(String)
+ Criteria andAppTagsIn(List<String>)
+ Criteria andAppTagsNotIn(List<String>)
+ Criteria andAppTagsBetween(String,String)
+ Criteria andAppTagsNotBetween(String,String)
+ Criteria andSendStatusIsNull()
+ Criteria andSendStatusIsNotNull()
+ Criteria andSendStatusEqualTo(Byte)
+ Criteria andSendStatusNotEqualTo(Byte)
+ Criteria andSendStatusGreaterThan(Byte)
+ Criteria andSendStatusGreaterThanOrEqualTo(Byte)
+ Criteria andSendStatusLessThan(Byte)
+ Criteria andSendStatusLessThanOrEqualTo(Byte)
+ Criteria andSendStatusIn(List<Byte>)
+ Criteria andSendStatusNotIn(List<Byte>)
+ Criteria andSendStatusBetween(Byte,Byte)
+ Criteria andSendStatusNotBetween(Byte,Byte)
+ Criteria andRemarkIsNull()
+ Criteria andRemarkIsNotNull()
+ Criteria andRemarkEqualTo(String)
+ Criteria andRemarkNotEqualTo(String)
+ Criteria andRemarkGreaterThan(String)
+ Criteria andRemarkGreaterThanOrEqualTo(String)
+ Criteria andRemarkLessThan(String)
+ Criteria andRemarkLessThanOrEqualTo(String)
+ Criteria andRemarkLike(String)
+ Criteria andRemarkNotLike(String)
+ Criteria andRemarkIn(List<String>)
+ Criteria andRemarkNotIn(List<String>)
+ Criteria andRemarkBetween(String,String)
+ Criteria andRemarkNotBetween(String,String)
+ Criteria andSendAtIsNull()
+ Criteria andSendAtIsNotNull()
+ Criteria andSendAtEqualTo(Date)
+ Criteria andSendAtNotEqualTo(Date)
+ Criteria andSendAtGreaterThan(Date)
+ Criteria andSendAtGreaterThanOrEqualTo(Date)
+ Criteria andSendAtLessThan(Date)
+ Criteria andSendAtLessThanOrEqualTo(Date)
+ Criteria andSendAtIn(List<Date>)
+ Criteria andSendAtNotIn(List<Date>)
+ Criteria andSendAtBetween(Date,Date)
+ Criteria andSendAtNotBetween(Date,Date)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
}
class com.welab.message.model.EmailMessageLogExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.EmailMessageLogExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
interface com.welab.message.mapper.ext.TimingMsgExtMapper {
~ List<TimingMsg> getTimingMsg(TimingMsgExt)
}
class com.welab.message.model.AddresseeWhiteList {
- Long id
- String key
- String content
- Byte type
- Long updateUser
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getKey()
+ void setKey(String)
+ String getContent()
+ void setContent(String)
+ Byte getType()
+ void setType(Byte)
+ Long getUpdateUser()
+ void setUpdateUser(Long)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.utils.RedisConfigUtil {
+ {static} String REDIS_CONFIG_PREFIX
- <<Create>> RedisConfigUtil()
+ {static} EmailTaskEnum.EmailTaskUserMails getEmailTaskUserMails(String)
+ {static} void saveEmailTaskUserMails(String,EmailTaskEnum.EmailTaskUserMails)
+ {static} void saveMobileWhiteList(String)
+ {static} JedisCluster getJedisCluster()
+ {static} String getMobileWhiteList()
}
abstract class com.welab.message.core.config.AbstractConfig {
# {static} Map<String,Object> services
# ApplicationContext applicationContext
+ void init()
+ {abstract}void doAnnotation()
+ {static} T getService(OrgIdEnum,ServiceTypeEnum)
+ {static} T getService(Long,ServiceTypeEnum)
# {static} String generateKey(OrgIdEnum,ServiceTypeEnum)
}
class com.welab.message.ScaffoldServer {
- {static} Logger LOG
+ {static} void main(String[])
}
class com.welab.message.model.ServicePushMessage {
- Long id
- Byte serviceType
- String keyword
- String content
- Integer sendNum
- Integer readNum
- Integer inboxReadNum
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Byte getServiceType()
+ void setServiceType(Byte)
+ String getKeyword()
+ void setKeyword(String)
+ String getContent()
+ void setContent(String)
+ Integer getSendNum()
+ void setSendNum(Integer)
+ Integer getReadNum()
+ void setReadNum(Integer)
+ Integer getInboxReadNum()
+ void setInboxReadNum(Integer)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.exception.SMSException {
- {static} long serialVersionUID
+ <<Create>> SMSException()
+ <<Create>> SMSException(String,Throwable,boolean,boolean)
+ <<Create>> SMSException(String,Throwable)
+ <<Create>> SMSException(String)
+ <<Create>> SMSException(Throwable)
}
class com.welab.message.mq.EmailMQHandlerTest {
- EmailMqReceiver emailMqReceiver
+ void mqHandler()
}
class com.welab.message.model.EmailMessageExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> EmailMessageExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.EmailMessageExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andMessageCodeIsNull()
+ Criteria andMessageCodeIsNotNull()
+ Criteria andMessageCodeEqualTo(String)
+ Criteria andMessageCodeNotEqualTo(String)
+ Criteria andMessageCodeGreaterThan(String)
+ Criteria andMessageCodeGreaterThanOrEqualTo(String)
+ Criteria andMessageCodeLessThan(String)
+ Criteria andMessageCodeLessThanOrEqualTo(String)
+ Criteria andMessageCodeLike(String)
+ Criteria andMessageCodeNotLike(String)
+ Criteria andMessageCodeIn(List<String>)
+ Criteria andMessageCodeNotIn(List<String>)
+ Criteria andMessageCodeBetween(String,String)
+ Criteria andMessageCodeNotBetween(String,String)
+ Criteria andUserIdIsNull()
+ Criteria andUserIdIsNotNull()
+ Criteria andUserIdEqualTo(Long)
+ Criteria andUserIdNotEqualTo(Long)
+ Criteria andUserIdGreaterThan(Long)
+ Criteria andUserIdGreaterThanOrEqualTo(Long)
+ Criteria andUserIdLessThan(Long)
+ Criteria andUserIdLessThanOrEqualTo(Long)
+ Criteria andUserIdIn(List<Long>)
+ Criteria andUserIdNotIn(List<Long>)
+ Criteria andUserIdBetween(Long,Long)
+ Criteria andUserIdNotBetween(Long,Long)
+ Criteria andTitleIsNull()
+ Criteria andTitleIsNotNull()
+ Criteria andTitleEqualTo(String)
+ Criteria andTitleNotEqualTo(String)
+ Criteria andTitleGreaterThan(String)
+ Criteria andTitleGreaterThanOrEqualTo(String)
+ Criteria andTitleLessThan(String)
+ Criteria andTitleLessThanOrEqualTo(String)
+ Criteria andTitleLike(String)
+ Criteria andTitleNotLike(String)
+ Criteria andTitleIn(List<String>)
+ Criteria andTitleNotIn(List<String>)
+ Criteria andTitleBetween(String,String)
+ Criteria andTitleNotBetween(String,String)
+ Criteria andStateIsNull()
+ Criteria andStateIsNotNull()
+ Criteria andStateEqualTo(Boolean)
+ Criteria andStateNotEqualTo(Boolean)
+ Criteria andStateGreaterThan(Boolean)
+ Criteria andStateGreaterThanOrEqualTo(Boolean)
+ Criteria andStateLessThan(Boolean)
+ Criteria andStateLessThanOrEqualTo(Boolean)
+ Criteria andStateIn(List<Boolean>)
+ Criteria andStateNotIn(List<Boolean>)
+ Criteria andStateBetween(Boolean,Boolean)
+ Criteria andStateNotBetween(Boolean,Boolean)
+ Criteria andSentAtIsNull()
+ Criteria andSentAtIsNotNull()
+ Criteria andSentAtEqualTo(Date)
+ Criteria andSentAtNotEqualTo(Date)
+ Criteria andSentAtGreaterThan(Date)
+ Criteria andSentAtGreaterThanOrEqualTo(Date)
+ Criteria andSentAtLessThan(Date)
+ Criteria andSentAtLessThanOrEqualTo(Date)
+ Criteria andSentAtIn(List<Date>)
+ Criteria andSentAtNotIn(List<Date>)
+ Criteria andSentAtBetween(Date,Date)
+ Criteria andSentAtNotBetween(Date,Date)
+ Criteria andResultDescIsNull()
+ Criteria andResultDescIsNotNull()
+ Criteria andResultDescEqualTo(String)
+ Criteria andResultDescNotEqualTo(String)
+ Criteria andResultDescGreaterThan(String)
+ Criteria andResultDescGreaterThanOrEqualTo(String)
+ Criteria andResultDescLessThan(String)
+ Criteria andResultDescLessThanOrEqualTo(String)
+ Criteria andResultDescLike(String)
+ Criteria andResultDescNotLike(String)
+ Criteria andResultDescIn(List<String>)
+ Criteria andResultDescNotIn(List<String>)
+ Criteria andResultDescBetween(String,String)
+ Criteria andResultDescNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.EmailMessageExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.EmailMessageExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
enum com.welab.message.enmu.WhatsappDialogueTypeEnum {
+  CONTACTS
+  VCODE
- Integer type
- String typeName
}
class com.welab.message.dto.TimingMsgDTO {
- {static} long serialVersionUID
- Byte msgType
- String templateKey
- Date sendTime
- String data
}
class com.welab.message.app.service.BaseEmailSender {
# EmailSendResEnum sendEmail(BaseMailDTO,JavaMailSenderImplExt)
}
class com.welab.message.service.dubbo.TimingMsgDubboServiceImpl {
- TimingMsgServiceImpl timingMsgServiceImpl
+ void saveTimingSms(String,Date)
+ void saveTimingEmail(String,Date)
+ void saveTimingAppMsg(String,Date)
+ void saveTimingMsg(TimingMsgDTO)
}
class com.welab.message.vo.WhatsappTemplateConfVo {
- Long tmplConfId
- Long orgId
- String tmplName
- Byte tmpType
- String tmplTitle
- String tmplDesc
- String nameSpace
- String elementName
- String sureTmplName
- String negaTmplName
- String otherTmplName
- Boolean state
- Boolean isReply
- Boolean isEnd
- Integer sort
- String appTags
- Date createdAt
- Date updatedAt
- String tmplContent
}
class com.welab.message.model.PushTemplateConfExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> PushTemplateConfExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.PushTemplateConfExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andOrgIdIsNull()
+ Criteria andOrgIdIsNotNull()
+ Criteria andOrgIdEqualTo(Long)
+ Criteria andOrgIdNotEqualTo(Long)
+ Criteria andOrgIdGreaterThan(Long)
+ Criteria andOrgIdGreaterThanOrEqualTo(Long)
+ Criteria andOrgIdLessThan(Long)
+ Criteria andOrgIdLessThanOrEqualTo(Long)
+ Criteria andOrgIdIn(List<Long>)
+ Criteria andOrgIdNotIn(List<Long>)
+ Criteria andOrgIdBetween(Long,Long)
+ Criteria andOrgIdNotBetween(Long,Long)
+ Criteria andMsgTypeIsNull()
+ Criteria andMsgTypeIsNotNull()
+ Criteria andMsgTypeEqualTo(Byte)
+ Criteria andMsgTypeNotEqualTo(Byte)
+ Criteria andMsgTypeGreaterThan(Byte)
+ Criteria andMsgTypeGreaterThanOrEqualTo(Byte)
+ Criteria andMsgTypeLessThan(Byte)
+ Criteria andMsgTypeLessThanOrEqualTo(Byte)
+ Criteria andMsgTypeIn(List<Byte>)
+ Criteria andMsgTypeNotIn(List<Byte>)
+ Criteria andMsgTypeBetween(Byte,Byte)
+ Criteria andMsgTypeNotBetween(Byte,Byte)
+ Criteria andTmplMsgTitleIsNull()
+ Criteria andTmplMsgTitleIsNotNull()
+ Criteria andTmplMsgTitleEqualTo(String)
+ Criteria andTmplMsgTitleNotEqualTo(String)
+ Criteria andTmplMsgTitleGreaterThan(String)
+ Criteria andTmplMsgTitleGreaterThanOrEqualTo(String)
+ Criteria andTmplMsgTitleLessThan(String)
+ Criteria andTmplMsgTitleLessThanOrEqualTo(String)
+ Criteria andTmplMsgTitleLike(String)
+ Criteria andTmplMsgTitleNotLike(String)
+ Criteria andTmplMsgTitleIn(List<String>)
+ Criteria andTmplMsgTitleNotIn(List<String>)
+ Criteria andTmplMsgTitleBetween(String,String)
+ Criteria andTmplMsgTitleNotBetween(String,String)
+ Criteria andTmplNameIsNull()
+ Criteria andTmplNameIsNotNull()
+ Criteria andTmplNameEqualTo(String)
+ Criteria andTmplNameNotEqualTo(String)
+ Criteria andTmplNameGreaterThan(String)
+ Criteria andTmplNameGreaterThanOrEqualTo(String)
+ Criteria andTmplNameLessThan(String)
+ Criteria andTmplNameLessThanOrEqualTo(String)
+ Criteria andTmplNameLike(String)
+ Criteria andTmplNameNotLike(String)
+ Criteria andTmplNameIn(List<String>)
+ Criteria andTmplNameNotIn(List<String>)
+ Criteria andTmplNameBetween(String,String)
+ Criteria andTmplNameNotBetween(String,String)
+ Criteria andTmplDescIsNull()
+ Criteria andTmplDescIsNotNull()
+ Criteria andTmplDescEqualTo(String)
+ Criteria andTmplDescNotEqualTo(String)
+ Criteria andTmplDescGreaterThan(String)
+ Criteria andTmplDescGreaterThanOrEqualTo(String)
+ Criteria andTmplDescLessThan(String)
+ Criteria andTmplDescLessThanOrEqualTo(String)
+ Criteria andTmplDescLike(String)
+ Criteria andTmplDescNotLike(String)
+ Criteria andTmplDescIn(List<String>)
+ Criteria andTmplDescNotIn(List<String>)
+ Criteria andTmplDescBetween(String,String)
+ Criteria andTmplDescNotBetween(String,String)
+ Criteria andTmplContentIsNull()
+ Criteria andTmplContentIsNotNull()
+ Criteria andTmplContentEqualTo(String)
+ Criteria andTmplContentNotEqualTo(String)
+ Criteria andTmplContentGreaterThan(String)
+ Criteria andTmplContentGreaterThanOrEqualTo(String)
+ Criteria andTmplContentLessThan(String)
+ Criteria andTmplContentLessThanOrEqualTo(String)
+ Criteria andTmplContentLike(String)
+ Criteria andTmplContentNotLike(String)
+ Criteria andTmplContentIn(List<String>)
+ Criteria andTmplContentNotIn(List<String>)
+ Criteria andTmplContentBetween(String,String)
+ Criteria andTmplContentNotBetween(String,String)
+ Criteria andStateIsNull()
+ Criteria andStateIsNotNull()
+ Criteria andStateEqualTo(Boolean)
+ Criteria andStateNotEqualTo(Boolean)
+ Criteria andStateGreaterThan(Boolean)
+ Criteria andStateGreaterThanOrEqualTo(Boolean)
+ Criteria andStateLessThan(Boolean)
+ Criteria andStateLessThanOrEqualTo(Boolean)
+ Criteria andStateIn(List<Boolean>)
+ Criteria andStateNotIn(List<Boolean>)
+ Criteria andStateBetween(Boolean,Boolean)
+ Criteria andStateNotBetween(Boolean,Boolean)
+ Criteria andFreemarkTypeIsNull()
+ Criteria andFreemarkTypeIsNotNull()
+ Criteria andFreemarkTypeEqualTo(Byte)
+ Criteria andFreemarkTypeNotEqualTo(Byte)
+ Criteria andFreemarkTypeGreaterThan(Byte)
+ Criteria andFreemarkTypeGreaterThanOrEqualTo(Byte)
+ Criteria andFreemarkTypeLessThan(Byte)
+ Criteria andFreemarkTypeLessThanOrEqualTo(Byte)
+ Criteria andFreemarkTypeIn(List<Byte>)
+ Criteria andFreemarkTypeNotIn(List<Byte>)
+ Criteria andFreemarkTypeBetween(Byte,Byte)
+ Criteria andFreemarkTypeNotBetween(Byte,Byte)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.PushTemplateConfExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.model.PushTemplateConfExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
interface com.welab.message.mapper.PushMessageMapper {
~ long countByExample(PushMessageExample)
~ int deleteByExample(PushMessageExample)
~ int deleteByPrimaryKey(Long)
~ int insert(PushMessage)
~ int insertSelective(PushMessage)
~ List<PushMessage> selectByExampleWithBLOBs(PushMessageExample)
~ List<PushMessage> selectByExample(PushMessageExample)
~ PushMessage selectByPrimaryKey(Long)
~ int updateByExampleSelective(PushMessage,PushMessageExample)
~ int updateByExampleWithBLOBs(PushMessage,PushMessageExample)
~ int updateByExample(PushMessage,PushMessageExample)
~ int updateByPrimaryKeySelective(PushMessage)
~ int updateByPrimaryKeyWithBLOBs(PushMessage)
~ int updateByPrimaryKey(PushMessage)
}
abstract class com.welab.message.service.impl.msg.AbstractMsgProcessService {
# TimingMsgExtMapper timingMsgExtMapper
+ void processTimingMsg(TimingMsg)
# {abstract}void processMsg(T)
}
class com.welab.message.dto.app.PushTemplateDTO {
- {static} long serialVersionUID
- Long orgId
- String tmplName
- Boolean state
}
class com.welab.message.model.PushMessageExample {
# String orderByClause
# boolean distinct
# List<Criteria> oredCriteria
+ <<Create>> PushMessageExample()
+ void setOrderByClause(String)
+ String getOrderByClause()
+ void setDistinct(boolean)
+ boolean isDistinct()
+ List<Criteria> getOredCriteria()
+ void or(Criteria)
+ Criteria or()
+ Criteria createCriteria()
# Criteria createCriteriaInternal()
+ void clear()
}
abstract class com.welab.message.model.PushMessageExample$GeneratedCriteria {
# List<Criterion> criteria
# <<Create>> GeneratedCriteria()
+ boolean isValid()
+ List<Criterion> getAllCriteria()
+ List<Criterion> getCriteria()
# void addCriterion(String)
# void addCriterion(String,Object,String)
# void addCriterion(String,Object,Object,String)
+ Criteria andIdIsNull()
+ Criteria andIdIsNotNull()
+ Criteria andIdEqualTo(Long)
+ Criteria andIdNotEqualTo(Long)
+ Criteria andIdGreaterThan(Long)
+ Criteria andIdGreaterThanOrEqualTo(Long)
+ Criteria andIdLessThan(Long)
+ Criteria andIdLessThanOrEqualTo(Long)
+ Criteria andIdIn(List<Long>)
+ Criteria andIdNotIn(List<Long>)
+ Criteria andIdBetween(Long,Long)
+ Criteria andIdNotBetween(Long,Long)
+ Criteria andOrgIdIsNull()
+ Criteria andOrgIdIsNotNull()
+ Criteria andOrgIdEqualTo(Long)
+ Criteria andOrgIdNotEqualTo(Long)
+ Criteria andOrgIdGreaterThan(Long)
+ Criteria andOrgIdGreaterThanOrEqualTo(Long)
+ Criteria andOrgIdLessThan(Long)
+ Criteria andOrgIdLessThanOrEqualTo(Long)
+ Criteria andOrgIdIn(List<Long>)
+ Criteria andOrgIdNotIn(List<Long>)
+ Criteria andOrgIdBetween(Long,Long)
+ Criteria andOrgIdNotBetween(Long,Long)
+ Criteria andMessageCodeIsNull()
+ Criteria andMessageCodeIsNotNull()
+ Criteria andMessageCodeEqualTo(String)
+ Criteria andMessageCodeNotEqualTo(String)
+ Criteria andMessageCodeGreaterThan(String)
+ Criteria andMessageCodeGreaterThanOrEqualTo(String)
+ Criteria andMessageCodeLessThan(String)
+ Criteria andMessageCodeLessThanOrEqualTo(String)
+ Criteria andMessageCodeLike(String)
+ Criteria andMessageCodeNotLike(String)
+ Criteria andMessageCodeIn(List<String>)
+ Criteria andMessageCodeNotIn(List<String>)
+ Criteria andMessageCodeBetween(String,String)
+ Criteria andMessageCodeNotBetween(String,String)
+ Criteria andMsgServiceIdIsNull()
+ Criteria andMsgServiceIdIsNotNull()
+ Criteria andMsgServiceIdEqualTo(Long)
+ Criteria andMsgServiceIdNotEqualTo(Long)
+ Criteria andMsgServiceIdGreaterThan(Long)
+ Criteria andMsgServiceIdGreaterThanOrEqualTo(Long)
+ Criteria andMsgServiceIdLessThan(Long)
+ Criteria andMsgServiceIdLessThanOrEqualTo(Long)
+ Criteria andMsgServiceIdIn(List<Long>)
+ Criteria andMsgServiceIdNotIn(List<Long>)
+ Criteria andMsgServiceIdBetween(Long,Long)
+ Criteria andMsgServiceIdNotBetween(Long,Long)
+ Criteria andMsgServiceTypeIsNull()
+ Criteria andMsgServiceTypeIsNotNull()
+ Criteria andMsgServiceTypeEqualTo(Byte)
+ Criteria andMsgServiceTypeNotEqualTo(Byte)
+ Criteria andMsgServiceTypeGreaterThan(Byte)
+ Criteria andMsgServiceTypeGreaterThanOrEqualTo(Byte)
+ Criteria andMsgServiceTypeLessThan(Byte)
+ Criteria andMsgServiceTypeLessThanOrEqualTo(Byte)
+ Criteria andMsgServiceTypeIn(List<Byte>)
+ Criteria andMsgServiceTypeNotIn(List<Byte>)
+ Criteria andMsgServiceTypeBetween(Byte,Byte)
+ Criteria andMsgServiceTypeNotBetween(Byte,Byte)
+ Criteria andUserIdIsNull()
+ Criteria andUserIdIsNotNull()
+ Criteria andUserIdEqualTo(Long)
+ Criteria andUserIdNotEqualTo(Long)
+ Criteria andUserIdGreaterThan(Long)
+ Criteria andUserIdGreaterThanOrEqualTo(Long)
+ Criteria andUserIdLessThan(Long)
+ Criteria andUserIdLessThanOrEqualTo(Long)
+ Criteria andUserIdIn(List<Long>)
+ Criteria andUserIdNotIn(List<Long>)
+ Criteria andUserIdBetween(Long,Long)
+ Criteria andUserIdNotBetween(Long,Long)
+ Criteria andTitleIsNull()
+ Criteria andTitleIsNotNull()
+ Criteria andTitleEqualTo(String)
+ Criteria andTitleNotEqualTo(String)
+ Criteria andTitleGreaterThan(String)
+ Criteria andTitleGreaterThanOrEqualTo(String)
+ Criteria andTitleLessThan(String)
+ Criteria andTitleLessThanOrEqualTo(String)
+ Criteria andTitleLike(String)
+ Criteria andTitleNotLike(String)
+ Criteria andTitleIn(List<String>)
+ Criteria andTitleNotIn(List<String>)
+ Criteria andTitleBetween(String,String)
+ Criteria andTitleNotBetween(String,String)
+ Criteria andStateIsNull()
+ Criteria andStateIsNotNull()
+ Criteria andStateEqualTo(Byte)
+ Criteria andStateNotEqualTo(Byte)
+ Criteria andStateGreaterThan(Byte)
+ Criteria andStateGreaterThanOrEqualTo(Byte)
+ Criteria andStateLessThan(Byte)
+ Criteria andStateLessThanOrEqualTo(Byte)
+ Criteria andStateIn(List<Byte>)
+ Criteria andStateNotIn(List<Byte>)
+ Criteria andStateBetween(Byte,Byte)
+ Criteria andStateNotBetween(Byte,Byte)
+ Criteria andSentAtIsNull()
+ Criteria andSentAtIsNotNull()
+ Criteria andSentAtEqualTo(Date)
+ Criteria andSentAtNotEqualTo(Date)
+ Criteria andSentAtGreaterThan(Date)
+ Criteria andSentAtGreaterThanOrEqualTo(Date)
+ Criteria andSentAtLessThan(Date)
+ Criteria andSentAtLessThanOrEqualTo(Date)
+ Criteria andSentAtIn(List<Date>)
+ Criteria andSentAtNotIn(List<Date>)
+ Criteria andSentAtBetween(Date,Date)
+ Criteria andSentAtNotBetween(Date,Date)
+ Criteria andMessageIdIsNull()
+ Criteria andMessageIdIsNotNull()
+ Criteria andMessageIdEqualTo(String)
+ Criteria andMessageIdNotEqualTo(String)
+ Criteria andMessageIdGreaterThan(String)
+ Criteria andMessageIdGreaterThanOrEqualTo(String)
+ Criteria andMessageIdLessThan(String)
+ Criteria andMessageIdLessThanOrEqualTo(String)
+ Criteria andMessageIdLike(String)
+ Criteria andMessageIdNotLike(String)
+ Criteria andMessageIdIn(List<String>)
+ Criteria andMessageIdNotIn(List<String>)
+ Criteria andMessageIdBetween(String,String)
+ Criteria andMessageIdNotBetween(String,String)
+ Criteria andResultDescIsNull()
+ Criteria andResultDescIsNotNull()
+ Criteria andResultDescEqualTo(String)
+ Criteria andResultDescNotEqualTo(String)
+ Criteria andResultDescGreaterThan(String)
+ Criteria andResultDescGreaterThanOrEqualTo(String)
+ Criteria andResultDescLessThan(String)
+ Criteria andResultDescLessThanOrEqualTo(String)
+ Criteria andResultDescLike(String)
+ Criteria andResultDescNotLike(String)
+ Criteria andResultDescIn(List<String>)
+ Criteria andResultDescNotIn(List<String>)
+ Criteria andResultDescBetween(String,String)
+ Criteria andResultDescNotBetween(String,String)
+ Criteria andCreatedAtIsNull()
+ Criteria andCreatedAtIsNotNull()
+ Criteria andCreatedAtEqualTo(Date)
+ Criteria andCreatedAtNotEqualTo(Date)
+ Criteria andCreatedAtGreaterThan(Date)
+ Criteria andCreatedAtGreaterThanOrEqualTo(Date)
+ Criteria andCreatedAtLessThan(Date)
+ Criteria andCreatedAtLessThanOrEqualTo(Date)
+ Criteria andCreatedAtIn(List<Date>)
+ Criteria andCreatedAtNotIn(List<Date>)
+ Criteria andCreatedAtBetween(Date,Date)
+ Criteria andCreatedAtNotBetween(Date,Date)
+ Criteria andUpdatedAtIsNull()
+ Criteria andUpdatedAtIsNotNull()
+ Criteria andUpdatedAtEqualTo(Date)
+ Criteria andUpdatedAtNotEqualTo(Date)
+ Criteria andUpdatedAtGreaterThan(Date)
+ Criteria andUpdatedAtGreaterThanOrEqualTo(Date)
+ Criteria andUpdatedAtLessThan(Date)
+ Criteria andUpdatedAtLessThanOrEqualTo(Date)
+ Criteria andUpdatedAtIn(List<Date>)
+ Criteria andUpdatedAtNotIn(List<Date>)
+ Criteria andUpdatedAtBetween(Date,Date)
+ Criteria andUpdatedAtNotBetween(Date,Date)
}
class com.welab.message.model.PushMessageExample$Criterion {
- String condition
- Object value
- Object secondValue
- boolean noValue
- boolean singleValue
- boolean betweenValue
- boolean listValue
- String typeHandler
# <<Create>> Criterion(String)
# <<Create>> Criterion(String,Object,String)
# <<Create>> Criterion(String,Object)
# <<Create>> Criterion(String,Object,Object,String)
# <<Create>> Criterion(String,Object,Object)
+ String getCondition()
+ Object getValue()
+ Object getSecondValue()
+ boolean isNoValue()
+ boolean isSingleValue()
+ boolean isBetweenValue()
+ boolean isListValue()
+ String getTypeHandler()
}
class com.welab.message.model.PushMessageExample$Criteria {
# <<Create>> Criteria()
}
class com.welab.message.controller.AppTokenController {
- {static} Logger log
- AppTokenService appTokenService
- AppTokenServiceImpl appTokenServiceImpl
+ Response query(String,String)
+ Response save(Long,String,String)
+ Response qyeryByUserId(Long)
+ Response saveTokenBeforeRegister(AppTokenDTO,Long)
}
class com.welab.message.service.impl.AppTokenServiceImpl {
- {static} ReentrantLock lock
- Logger logger
- AppTokenMapper appTokenMapper
+ Response<AppTokenDTO> query(String,String)
+ Response save(AppTokenDTO)
- void saveToken(AppTokenDTO)
+ Response<Void> saveUnregisteredToken(AppTokenDTO)
- AppToken getAppToken(String,String)
+ Response<AppTokenDTO> qyeryByUserId(Long)
+ Response<AppTokenDTO> queryAppTokenById(Long)
+ Long countPushNum(List<Long>)
+ List<AppTokenDTO> getBatchToken(List<Long>)
+ List<AppTokenDTO> getBatchTokenById(List<Long>)
}
class com.welab.message.dto.mq.KeredoRepaymentDto {
- String msgJson
}
class com.welab.message.app.manager.template.CmsgTemplateManager {
- BaseCmsgTemplateService baseCmsgTemplateService
+ void setContentByTemplate(Map<String,Object>,MsgTemplateDTO)
}
class com.welab.message.model.ext.TimingMsgExt {
- Date beforDate
- Date afterDate
}
class com.welab.message.app.base.BaseMsgVcodeService {
- MessageVcodeLogExtMapper messageVcodedLogExtMapper
+ MessageVcodeLog lastVcode(MessageVcodeLog)
+ Long countSend(MessageVcodeLog)
}
class com.welab.message.command.msg.AppMessageReadCmd {
- {static} long serialVersionUID
- Long userId
- Boolean isH5
- String ids
}
class com.welab.message.service.impl.MessageMqServiceImplTest {
- MessageMqService messageMqService
- AmqpAdmin amqpAdmin
+ void send()
+ void send1()
+ void sendFanout()
+ void declareFanoutExchange()
}
enum com.welab.message.enmu.MessagePushTypeEnum {
+  LOAN_STATE_UPDATE
+  PAYMENT_RECEIVED
+  DISBURSE_SUCCESS
+  PAGE_JUMP
+  ACCOUNT_INFO_UPDATE
- String value
- String name
- <<Create>> MessagePushTypeEnum(String,String)
+ String getValue()
+ String getName()
+ {static} MessagePushTypeEnum getType(String)
}
class com.welab.message.job.TimingMsgJob {
- TimingMsgServiceImpl timingMsgServiceImpl
- JedisCluster jedisCluster
- Byte getMsgType(ShardingContext)
+ void execute(ShardingContext)
}
class com.welab.message.utils.StrUtil {
- <<Create>> StrUtil()
+ {static} String getStrs(String)
+ {static} boolean isNumeric(String)
+ {static} void main(String[])
}
class com.welab.message.service.impl.MessagePushServiceImplTest {
- MessagePushService messagePushService
~ TimingMsgJob timingMsgJob
+ void messagePush()
+ void messagePushWithTemplate()
+ void messagePushWithTemplate2()
+ void batchMessagePushWithTemplate()
+ void messagesPushWithTemplate2()
+ void batchMessagePush()
}
class com.welab.message.app.manager.template.EmailMessageTemplateManager {
- EmailTemplateConfExtMapper emailTemplateConfMapper
+ void handTmplMail(MailDTO)
+ void handTmplMail(TemplateMailDTO)
}
class com.welab.message.model.CmsgGroup {
- Long id
- String groupName
- String groupKey
- String qywxRobotKey
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ String getGroupName()
+ void setGroupName(String)
+ String getGroupKey()
+ void setGroupKey(String)
+ String getQywxRobotKey()
+ void setQywxRobotKey(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.model.SpecialSendConfig {
- Long id
- Byte type
- String busiCode
- String title
- String desc
- String source
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Byte getType()
+ void setType(Byte)
+ String getBusiCode()
+ void setBusiCode(String)
+ String getTitle()
+ void setTitle(String)
+ String getDesc()
+ void setDesc(String)
+ String getSource()
+ void setSource(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.vo.EmailFileVO {
- {static} long serialVersionUID
- String url
- String fileName
}
class com.welab.message.service.whatsapp.WhatsAppTemplateConfService {
- String contactsReplyMobile
- WhatsappTemplateConfMapper whatsappTemplateConfMapper
+ WhatsappTemplateConf findByTmpName(Long,String,AppTagsEnum)
+ List<WhatsappTemplateConf> findByTmpNameList(Long,String,AppTagsEnum)
+ List<WhatsappTemplateConf> selectByExample(WhatsappTemplateConfExample)
+ WhatsappTemplateConf findByNoReplyTmp(Long,String)
+ WhatsappTemplateConf findById(Long)
+ WhatsappDialogueTypeEnum getDialogueType(String)
}
class com.welab.message.service.email.BaseEmailService {
- MessageConfig messageConfig
- ConcurrentMap<String,JavaMailSenderImpl> mailSenderMap
- ConcurrentMap<String,AtomicPositiveInteger> sequencesMap
- ConcurrentMap<String,AtomicPositiveInteger> weightSequencesMap
- EmailErrorHandler emailErrorHandler
- JedisCluster jedis
+ EmailSendResEnum send(EmailMqInfo)
- Properties initMailProperties(MessageConfig.SeaMailProperties)
- JavaMailSenderImpl initJavaMailSender(MessageConfig.SeaMailProperties)
- MessageConfig.SeaMailProperties doSelect(EmailMqInfo,List<MessageConfig.SeaMailProperties>)
# void baseSend(JavaMailSenderImpl,String,EmailMqInfo)
- Response checkMailEvent(EmailMqInfo)
- int getWeight(MessageConfig.SeaMailProperties)
+ List<Map<String,String>> getEmailAccount()
}
class com.welab.message.email.EmailServiceTest {
- EmailTemplateConfExtMapper emailTemplateConfMapper
- MessageEmailService messageEmailService
- BaseEmailService baseMultiAccountEmailService
+ void testSendMail()
+ void testSendMailByTmplName()
+ void testEmail()
+ void testConfig()
+ {static} void main(String[])
}
enum com.welab.message.enmu.EmailTaskEnum {
+  COLLECTION_FIF_TASK
+  COLLECTION_AWDA_TASK
+  COLLECTION_KREDDO_TASK
+  COLLECTION_KREDDO_REPAYMENT_TASK
+  ALFAMART_DISBURSE_TASK
+  OVERDUE_CALCULATION_TASK
+  OFFLINE_LEND_TASK
+  OFFLINE_REPAYMENT_TASK
+  OFFLINE_SIGNING_TASK
+  REFUND_TASK
+  UNLEND_TASK
+  SIGAP_REPAYMENT_TASK
+  LOAN_REVERSAL_TASK
+  LEND_REVERSAL_TASK
+  REPAYMENT_TO_PARTNER_REPORT_TASK
+  LOAN_DAILY_STATISTICS_TASK
+  NIK_DAILY_STATISTICS_TASK
+  FIF_STAFF_LOAN_TASK
+  PROMOTION_CODE_TASK
+  GOJECK_STAFF_LOAN_TASK
+  SIGAP_STAFF_LOAN_TASK
+  SPEKTRA_APPROVAL_TASK
+  UVF_APPROVAL_TASK
+  USER_APPLY_DEL_TASK
+  CUSTOMER_APPLY_DEL_TASK
+  PAY_GATEWAY_RALARM_TASK
+  SEND_ORDER_APPROVAL_TASK
+  AUTO_APPROVAL_TASK
+  SPEKTRA_APPLY_NOTICE_TASK
+  ASLI_RALARM_TASK
+  TEMP_STAFF_LOGIN_TASK
+  ACTIVE_USER_TASK
+  LOAN_STATUS_UPDATE_ERROR
+  LOAN_MANAGEMENT_LIST
+  SPEKTRA_REJECTED_TASK
+  OJK_REPORT
+  ACUE_REPORT
+  EMERGENCY_CONTACT_REPORT
+  LOAN_REPORT
+  OUTSTANDING_REPORT
+  MGM_INVITER_NOTICE
+  SYSTEM_MONITORING_TASK
+  REFUND_SUCCESS
+  FLEXIFIT_MONTHLY_DUE_LIST
+  FLEXIFIT_ALL_DUE_LIST
+  FLEXIFIT_ACC_MONTHLY_DUE_LIST
+  FLEXIFIT_ACC_ALL_DUE_LIST
+  APPLICATION_JUMBO_DISBURSED_LIMIT_EMAIL
+  APPROVAL_RESTOCK_BACK_EMAIL
+  APPROVAL_TAPP_BACK_EMAIL
+  UFI_ALERT_EMAIL
+  UFI_ALERT_USE_CREDIT_EMAIL
+  AID_WHITELIST_TASK_EMAIL
+  BCA_TRANSFER_EMAIL_REPORT
- String busi
- String desc
- String source
}
class com.welab.message.enmu.EmailTaskUserMails {
- String[] toUserMails
- String[] ccUserMails
- String[] bccUserMails
}
class com.welab.message.utils.LuaUtil {
- {static} String rate_limit_script
- <<Create>> LuaUtil()
+ {static} void accquire(String,int,int)
+ {static} boolean accquire(String,int,int,int)
+ {static} boolean tryAccquire(String,int,int)
+ {static} JedisCluster getJedisCluster()
}
class com.welab.message.service.whatsapp.task.WhatsAppSendMsgTask {
- WhatsMsgReq whatsMsgReq
- Map<String,String> token
- String sendMsgUrl
- Long wpId
- WhatsappTemplateConf tmpConf
- WhatsAppMsgService whatsAppMsgService
+ <<Create>> WhatsAppSendMsgTask(WhatsMsgReq,Map<String,String>,String,WhatsAppMsgService,WhatsappTemplateConf)
+ void run()
+ boolean start()
- WhatsappMessage buildMessage()
- String getWhatsappContent()
+ List<Map> getLocalList()
+ Map<String,Object> getSendMap()
+ Long handle()
+ void end(String)
+ {static} void main(String[])
}
class com.welab.message.service.impl.DelEmailTest {
- DeleteMailJob deleteMailJob
+ void del()
+ {static} void main(String[])
+ {static} void resceive()
+ {static} void deleteMessage(Message)
+ {static} void parseMessage(Message)
+ {static} String getSubject(MimeMessage)
+ {static} String getFrom(MimeMessage)
+ {static} String getReceiveAddress(MimeMessage,Message.RecipientType)
+ {static} String getSentDate(MimeMessage,String)
+ {static} boolean isContainAttachment(Part)
+ {static} boolean isSeen(MimeMessage)
+ {static} boolean isReplySign(MimeMessage)
+ {static} String getPriority(MimeMessage)
+ {static} void getMailTextContent(Part,StringBuffer)
+ {static} void saveAttachment(Part,String)
- {static} void saveFile(InputStream,String,String)
+ {static} String decodeText(String)
}
class com.welab.message.test.MessageTest {
- MessagePushConfService messagePushConfService
- MessageAppController messageAppController
+ void getPushTmplConfByPage()
+ void pushMsg()
+ void countMsg()
}
interface com.welab.message.service.Sms.SmsService {
~ SendSmsCommonResponse send(String,String,String)
}
class com.welab.message.service.push.DefaultMsgPush {
# PushAuthBean buildAuth()
}
class com.welab.message.whatsapp.WhatsAppTest {
- WhatsAppService whatsAppService
- KreddoSendMsgServiceImpl kreddoSendMsgService
- JedisCluster jedisCluster
- KreddoSendMsgServiceImpl kreddoSendMsgService2
- WhatsAppController whatsAppController
- WhatsAppMsgService whatsAppMsgService
- WhatsAppController wac
+ void testKreddoToken()
+ void kreddo()
+ void testMobile()
+ void testSendOTP()
+ void testSend()
+ void testM()
+ void testQry()
+ void testCache()
+ void testCheckStatus()
+ void testCheckReplyMsm()
}
class com.welab.message.app.impl.CmsgServiceImpl {
- CmsgSendCmdExe cmsgSendCmdExe
+ void sendCmsgService(CmsgDTO)
}
enum com.welab.message.dto.whatsapp.WhatsMsgStatusEnum {
+  UNSEND
+  SEND
+  READ
+  DELIVERD
+  FAILED
+  DELETED
+  UN_DELIVERD
- int type
- String val
~ <<Create>> WhatsMsgStatusEnum(int,String)
+ int getType()
+ String getVal()
+ {static} WhatsMsgStatusEnum getByVal(String)
}
class com.welab.message.service.impl.MessageSmsServiceImpl {
- Logger logger
- MessageTemplateConfMapper messageTemplateConfMapper
- MessageVcodeLogExtMapper messageVcodedLogExtMapper
- MessageSmsLogMapper messageSmsLogMapper
- SmsService smsService
- UserService userService
- ApplicationService applicationService
- MessageEmailService messageEmailService
- VcodeChannelChooseCmdExe vcodeChannelChooseCmdExe
- {static} String VCODE_TMPL_NAME
- {static} String ADA_VCODE_TMPL_NAME
- {static} String SMS_NORMAL
- {static} String SMS_ALERT
- {static} String SMS_OTP
- Boolean debugMsgCode
- {static} String REPALCE_CODE
- String messageSmsSwitch
- String MESSAGE_SMS_MOBILE_WHITELIST
- String smsCode
- String appId
- {static} String SMS_SWITCH_OPEN
- {static} String VCODE_PREX_KEY
- {static} String VCODE_ID_PREX_KEY
- KreddoSendMsgServiceImpl kreddoSendMsgService
- ADASendMsgService adaSendMsgService
- JedisCluster jedisCluster
- JatisSmsServiceImpl jatisSmsServiceImpl
- TimingMsgDubboService timingMsgDubboService
- Integer timesCount
- Integer effectiveTime
- ApiConfig apiConfig
- {static} Set<Long> ALLOW_ORG_ID_SET
- VcodeConfigManager vcodeConfigManager
+ Response<Long> sendVCode(SendSmsRequestVCode)
+ MessageVcodeLog buildVcodeLogRecord(SendSmsRequestVCode,String,String)
- void sendOtpMail(SendSmsRequestVCode,String)
- MailDTO buildMailDTO(SendSmsRequestVCode,UserProfileVO,String)
- MessageSmsServiceImpl getThis()
+ void saveMessageVcodeLog(MessageVcodeLog)
+ void updateMessageVcodeLog(MessageVcodeLog)
+ void saveMessageSmsLog(MessageSmsLog)
+ void updateMessageSmsLog(MessageSmsLog)
+ Response<String> checkVCode(Long,String,String)
- Response<String> checkVcodeCore(String,String,MessageVcodeLog)
+ Response<String> sendWithTags(SendSmsRequestTags)
+ Response<String> sendTemplateWithTags(SendSmsRequestTemplate)
- Response checkSendSmsRequest(SendSmsRequest)
- String getSMSContent(String,String,Long)
- String getMsgTemplateBean(String,Long)
+ {static} String replaceBlank(String)
+ String getVPK(Long,String,String,String)
+ Response<String> checkVCodeByObject(SendSmsRequestVCode)
}
class com.welab.message.service.impl.MessagePushServiceImpl {
- TimingMsgDubboService timingMsgDubboService
+ void messagePush(MessagePushDTO)
+ void batchMessagePush(MessagePushBatchDTO)
+ void messagePushWithTemplate(Long,Long,String,Map<String,String>)
+ void messagePushWithTemplate(Long,Long,String,Map<String,String>,Map<String,Object>)
+ void messagePushWithTemplate(TemplatePushDTO)
+ void batchMessagePushWithTemplate(List<Long>,Long,String,Map<String,String>)
+ void pushMsg(AppPushMsgDTO)
}
interface com.welab.message.mapper.SpecialSendConfigMapper {
~ long countByExample(SpecialSendConfigExample)
~ int deleteByExample(SpecialSendConfigExample)
~ int deleteByPrimaryKey(Long)
~ int insert(SpecialSendConfig)
~ int insertSelective(SpecialSendConfig)
~ List<SpecialSendConfig> selectByExample(SpecialSendConfigExample)
~ SpecialSendConfig selectByPrimaryKey(Long)
~ int updateByExampleSelective(SpecialSendConfig,SpecialSendConfigExample)
~ int updateByExample(SpecialSendConfig,SpecialSendConfigExample)
~ int updateByPrimaryKeySelective(SpecialSendConfig)
~ int updateByPrimaryKey(SpecialSendConfig)
}
class com.welab.message.dto.push.MessagePushDTO {
- {static} long serialVersionUID
- Long id
- Byte msgType
- Long userId
- Long orgId
- String title
- String body
- String imageUrl
- Map<String,Object> eventMap
- String buttonCode
- Long msgServiceId
- Byte msgServiceType
- String templateName
- Boolean msgButton
- String buttonName
- String jumpPage
}
class com.welab.message.dto.push.MessagePushBatchDTO {
- {static} long serialVersionUID
- Long orgId
- Long msgServiceId
- Byte msgServiceType
- String templateName
- Boolean msgButton
- String buttonName
- Byte msgType
- List<Long> ids
- List<Long> listUserId
- String title
- String body
- String imageUrl
- String jumpPage
- Boolean jingle
- String buttonTitle
- String h5Url
- String appCode
- String buttonCode
}
interface com.welab.message.mapper.MessageSmsLogMapper {
~ int deleteByPrimaryKey(Long)
~ int insert(MessageSmsLog)
~ int insertSelective(MessageSmsLog)
~ MessageSmsLog selectByPrimaryKey(Long)
~ int updateByPrimaryKeySelective(MessageSmsLog)
~ int updateByPrimaryKey(MessageSmsLog)
}
class com.welab.message.model.CmsgContacts {
- Long id
- Long cmsgUserId
- String cmsgUserMobile
- String userName
- Date createdAt
- Date updatedAt
+ Long getId()
+ void setId(Long)
+ Long getCmsgUserId()
+ void setCmsgUserId(Long)
+ String getCmsgUserMobile()
+ void setCmsgUserMobile(String)
+ String getUserName()
+ void setUserName(String)
+ Date getCreatedAt()
+ void setCreatedAt(Date)
+ Date getUpdatedAt()
+ void setUpdatedAt(Date)
}
class com.welab.message.dto.app.AppMsgQry {
- {static} long serialVersionUID
- Long userId
- Byte msgType
- String keyword
- Long orgId
}
class com.welab.message.service.impl.msg.SmsServiceImpl {
- MessageSmsService smsService
# void processMsg(SendSmsRequestTemplate)
}
class com.welab.message.vo.SmsTemplateConfVO {
- {static} long serialVersionUID
- Long tmplConfId
- Long orgId
- String tmplName
- String tmplDesc
- String tmplContent
- Boolean state
- Date createdAt
- Date updatedAt
}
enum com.welab.message.enmu.mq.DirectMessageMetaInfoEnum {
+  MESSAGE_KREDDO_REPAYMENT_SYNC
- MessageTypeEnum messageTypeEnum
+ String queueName
+ String bindExchangeName
+ String routingKey
+ String deadExchangeName
+ String deadRoutingKey
+ String tag
+ String listenerContainerFactoryBeanId
}
enum com.welab.message.enmu.ButtonCodeEnum {
+  ADVANCE_TYPE
+  APPLY_CREDIT_ADD_INFO
- String value
- String desc
}
class com.welab.message.dto.cmsg.MsgTemplateDTO {
- {static} long serialVersionUID
- String templateName
- Map<String,Object> params
}
interface com.welab.message.mapper.WhatsappMessageMapper {
~ long countByExample(WhatsappMessageExample)
~ int deleteByExample(WhatsappMessageExample)
~ int deleteByPrimaryKey(Long)
~ int insert(WhatsappMessage)
~ int insertSelective(WhatsappMessage)
~ List<WhatsappMessage> selectByExample(WhatsappMessageExample)
~ WhatsappMessage selectByPrimaryKey(Long)
~ int updateByExampleSelective(WhatsappMessage,WhatsappMessageExample)
~ int updateByExample(WhatsappMessage,WhatsappMessageExample)
~ int updateByPrimaryKeySelective(WhatsappMessage)
~ int updateByPrimaryKey(WhatsappMessage)
}
class com.welab.message.vo.MessagePushVO {
- {static} long serialVersionUID
- String loanNumber
- String state
- String body
+ String getLoanNumber()
+ void setLoanNumber(String)
+ String getState()
+ void setState(String)
+ String getBody()
+ void setBody(String)
}
class com.welab.message.exception.AppTokenException {
- {static} long serialVersionUID
+ <<Create>> AppTokenException(Integer,String)
+ <<Create>> AppTokenException(ResponseErrorCode.MessageResponsCodeTypeEnum)
}
class com.welab.message.TestMain {
- {static} ExecutorService fixedThreadPool
+ {static} void main(String[])
+ {static} void execute(int)
+ {static} void add(int)
}
interface com.welab.message.mapper.ext.PushMessageExtMapper {
~ int batchSavePushMessage(List<PushMessage>)
~ int batchUpdatePushMessage(List<PushMessage>)
}
enum com.welab.message.enmu.AppMessageStateEnum {
+  READ
+  UNREAD
- String value
- String name
- <<Create>> AppMessageStateEnum(String,String)
+ String getValue()
+ String getName()
+ {static} AppMessageStateEnum getType(String)
}
interface com.welab.message.service.MessageAppService {
~ Response<Long> send(AppMessageDTO)
~ Response read(Long,String)
~ Response<List<AppMessageDTO>> getListAppMessage(Long,Byte)
~ Response<PageInfo<AppMessageDTO>> getPageAppMessage(Long,Byte,int,int)
~ Response<PageInfo<AppMessageDTO>> getPageAppMessage(AppMsgQry)
~ Response<Integer> getUnreadNumber(Long)
~ Response<Integer> getUnreadNumber(AppMsgQry)
~ Response<Object> readMsgPush(Long,String)
~ Response<Object> readInbox(AppMessageReadCmd)
}


com.welab.message.app.manager.template.VcodeConfigManager +.. com.welab.message.app.manager.template.VcodeConfigManager$VcodeConfig
java.io.Serializable <|.. com.welab.message.dto.email.EmailTemplateConfDTO
com.welab.message.vo.Serializable <|.. com.welab.message.vo.WhatsAppMessageVo
com.welab.message.service.impl.msg.AbstractMsgProcessService <|-- com.welab.message.service.impl.msg.AppServiceImpl
java.io.Serializable <|.. com.welab.message.dto.push.AppPushMsgDTO
com.welab.message.service.MessageSmsConfService <|.. com.welab.message.service.impl.MessageSmsConfServiceImpl
java.io.Serializable <|.. com.welab.message.vo.EmailTemplateConfVO
com.welab.message.model.AddresseeWhiteListExample +.. com.welab.message.model.AddresseeWhiteListExample$GeneratedCriteria
com.welab.message.model.AddresseeWhiteListExample +.. com.welab.message.model.AddresseeWhiteListExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.AddresseeWhiteListExample$Criteria
com.welab.message.model.AddresseeWhiteListExample +.. com.welab.message.model.AddresseeWhiteListExample$Criterion
com.welab.message.model.AppMessage <|-- com.welab.message.model.ext.AppMessageExt
org.springframework.amqp.core.MessageListener <|.. com.welab.message.core.mq.AppPushMqListener
java.io.Serializable <|.. com.welab.message.dto.push.PushTemplateConfDTO
com.welab.message.common.Urls +.. com.welab.message.common.Urls$AppMessage
com.welab.message.common.Urls +.. com.welab.message.common.Urls$SmsMessage
com.welab.message.common.Urls +.. com.welab.message.common.Urls$PushMessage
com.welab.message.common.Urls +.. com.welab.message.common.Urls$AppToken
com.welab.message.common.Urls +.. com.welab.message.common.Urls$AppTokenUnregistered
com.welab.message.common.Urls +.. com.welab.message.common.Urls$WhatsApp
com.welab.message.common.Urls +.. com.welab.message.common.Urls$WebSocket
com.welab.message.model.CmsgTemplateExample +.. com.welab.message.model.CmsgTemplateExample$GeneratedCriteria
com.welab.message.model.CmsgTemplateExample +.. com.welab.message.model.CmsgTemplateExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.CmsgTemplateExample$Criteria
com.welab.message.model.CmsgTemplateExample +.. com.welab.message.model.CmsgTemplateExample$Criterion
com.welab.message.model.AddresseeWhiteList <|-- com.welab.message.model.ext.AddresseeWhiteListExt
com.welab.message.service.MessageSmsReportService <|.. com.welab.message.service.impl.MessageSmsReportServiceImpl
org.springframework.web.socket.server.HandshakeInterceptor <|.. com.welab.message.interceptor.websocket.WhatsAppWebSocketInterceptor
com.welab.message.model.CmsgContactsExample +.. com.welab.message.model.CmsgContactsExample$GeneratedCriteria
com.welab.message.model.CmsgContactsExample +.. com.welab.message.model.CmsgContactsExample$Criterion
com.welab.message.model.CmsgContactsExample +.. com.welab.message.model.CmsgContactsExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.CmsgContactsExample$Criteria
java.io.Serializable <|.. com.welab.message.dto.mq.FifCashierRejectedDto
com.welab.message.core.config.AbstractConfig <|-- com.welab.message.core.config.MultiServiceConfiguration
com.welab.message.service.AppTemplateMessageService <|.. com.welab.message.app.impl.AppTemplateMessageServiceImpl
com.welab.message.utils.WebSocketHolder +.. com.welab.message.utils.WebSocketHolder$WebSocketNoticeMsg
com.welab.message.utils.WebSocketHolder +.. com.welab.message.utils.WebSocketHolder$HeartbeatInfo
com.welab.message.dto.whatsapp.Serializable <|.. com.welab.message.dto.whatsapp.QryWhatsMsgReq
com.welab.message.model.SpecialSendConfigExample +.. com.welab.message.model.SpecialSendConfigExample$GeneratedCriteria
com.welab.message.model.SpecialSendConfigExample +.. com.welab.message.model.SpecialSendConfigExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.SpecialSendConfigExample$Criteria
com.welab.message.model.SpecialSendConfigExample +.. com.welab.message.model.SpecialSendConfigExample$Criterion
java.io.Serializable <|.. com.welab.message.dto.app.AppMessageTemplateDTO
java.io.Serializable <|.. com.welab.message.dto.mq.FifCashierSendbackDto
com.welab.message.test.SimpleTest <|-- com.welab.message.service.impl.MessageAppServiceImplTest
com.welab.message.dto.mq.BaseMqDto <|-- com.welab.message.dto.mq.InvoiceDto
com.welab.message.service.WhatsAppService <|.. com.welab.message.service.impl.WhatsAppServiceImpl
com.welab.message.dto.mq.BaseMqDto <|-- com.welab.message.dto.mq.DisbursementDto
java.io.Serializable <|.. com.welab.message.dto.mq.BaseMqDto
com.welab.message.mapper.MessageVcodeLogMapper <|-- com.welab.message.mapper.ext.MessageVcodeLogExtMapper
com.welab.message.core.config.ApiConfig +.. com.welab.message.core.config.ApiConfig$Config
com.welab.sea.util.mq.api.MqMetaInfoRegistry <|.. com.welab.message.config.MqMetaInfoRegistryImpl
com.welab.message.utils.HttpUtil +.. com.welab.message.utils.HttpUtil$HttpResponseSimpleData
com.welab.message.service.Sms.SmsService <|.. com.welab.message.service.Sms.JatisSmsServiceImpl
com.welab.message.dto.whatsapp.Serializable <|.. com.welab.message.dto.whatsapp.WhatsMsgReq
com.welab.message.service.init.Runnable <|.. com.welab.message.service.init.AbstractInitService
com.welab.message.service.push.AbsPushService <|-- com.welab.message.service.push.maucash.MaucashMsgPush
com.welab.message.service.init.AbstractInitService <|-- com.welab.message.service.init.AddresseeWhiteListInitService
com.welab.message.service.IAddresseeWhiteListDubboService <|.. com.welab.message.service.dubbo.AddresseeWhiteListDubboServiceImpl
java.io.Serializable <|.. com.welab.message.dto.sms.SmsTemplateConfDTO
org.springframework.boot.CommandLineRunner <|.. com.welab.message.core.config.InitServiceConfiguration
com.welab.message.service.MessageAppService <|.. com.welab.message.service.impl.MessageAppServiceImpl
com.welab.message.mapper.ServicePushMessageMapper <|-- com.welab.message.mapper.ext.ServicePushMessageExtMapper
com.welab.message.service.push.AbsPushService <|-- com.welab.message.service.push.maucash.MaumodalMsgPush
com.welab.message.model.PushTemplateConf <|-- com.welab.message.model.ext.PushTemplateConfExt
com.welab.message.dto.whatsapp.Serializable <|.. com.welab.message.dto.whatsapp.WhatsAppMq
com.welab.message.service.push.AbsPushService <|-- com.welab.message.service.push.spektra.SpektraMsgPush
com.welab.message.mapper.EmailTemplateConfMapper <|-- com.welab.message.mapper.ext.EmailTemplateConfExtMapper
com.welab.message.test.SimpleTest <|-- com.welab.message.marketing.BackstageService
com.welab.message.test.SimpleTest <|-- com.welab.message.redis.RedisTest
com.welab.message.service.MessageEmailConfService <|.. com.welab.message.service.impl.MessageEmailConfServiceImpl
com.welab.message.dto.mq.BaseMqDto <|-- com.welab.message.dto.mq.BankAcountValidatorDto
java.io.Serializable <|.. com.welab.message.dto.email.MailDTO
com.welab.sea.util.dto.DTO <|-- com.welab.message.dto.cmsg.CmsgDTO
com.welab.message.core.config.MessageConfig +.. com.welab.message.core.config.MessageConfig$ProductInfo
com.welab.message.core.config.MessageConfig +.. com.welab.message.core.config.MessageConfig$SendMailAccountInfo
com.welab.message.core.config.ProductInfo <|-- com.welab.message.core.config.MessageConfig$SendMailAccountInfo
com.welab.message.core.config.MessageConfig +.. com.welab.message.core.config.MessageConfig$SeaMailProperties
com.welab.message.core.config.MailProperties <|-- com.welab.message.core.config.MessageConfig$SeaMailProperties
com.welab.message.dto.whatsapp.Serializable <|.. com.welab.message.dto.whatsapp.ContactDto
com.welab.message.service.IKreddoSendMsgService <|.. com.welab.message.service.whatsapp.KreddoSendMsgServiceImpl
com.welab.sea.email.service.EmailConfigService <|.. com.welab.message.app.impl.EmailConfigServiceImpl
com.welab.message.dto.sms.SendSmsRequest <|-- com.welab.message.dto.sms.SendSmsRequestTags
java.io.Serializable <|.. com.welab.message.vo.PushTemplateVO
com.welab.message.service.impl.msg.AbstractMsgProcessService <|-- com.welab.message.service.impl.msg.EmailServiceImpl
com.welab.message.test.SimpleTest <|-- com.welab.message.service.impl.MessageEmailServiceImplTest
java.io.Serializable <|.. com.welab.message.dto.app.AppMessageDTO
java.io.Serializable <|.. com.welab.message.dto.sms.SmsDTO
com.welab.message.model.AppTokenExample +.. com.welab.message.model.AppTokenExample$GeneratedCriteria
com.welab.message.model.AppTokenExample +.. com.welab.message.model.AppTokenExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.AppTokenExample$Criteria
com.welab.message.model.AppTokenExample +.. com.welab.message.model.AppTokenExample$Criterion
com.welab.message.dto.app.Serializable <|.. com.welab.message.dto.app.AppTokenDTO
com.welab.message.service.MessagePushConfService <|.. com.welab.message.service.impl.MessagePushConfServiceImpl
com.welab.message.model.WhatsappMessageExample +.. com.welab.message.model.WhatsappMessageExample$GeneratedCriteria
com.welab.message.model.WhatsappMessageExample +.. com.welab.message.model.WhatsappMessageExample$Criterion
com.welab.message.model.WhatsappMessageExample +.. com.welab.message.model.WhatsappMessageExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.WhatsappMessageExample$Criteria
com.welab.message.model.EmailMessageLog <|-- com.welab.message.model.EmailMessageLogWithBLOBs
com.welab.message.service.MessageEmailService <|.. com.welab.message.service.impl.MessageEmailServiceImpl
com.welab.message.dto.sms.SendSmsRequest <|-- com.welab.message.dto.sms.SendSmsRequestVCode
com.welab.message.dto.sms.SendSmsRequest <|-- com.welab.message.dto.sms.SendSmsRequestTemplate
com.welab.message.model.WhatsappTemplateConfExample +.. com.welab.message.model.WhatsappTemplateConfExample$GeneratedCriteria
com.welab.message.model.WhatsappTemplateConfExample +.. com.welab.message.model.WhatsappTemplateConfExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.WhatsappTemplateConfExample$Criteria
com.welab.message.model.WhatsappTemplateConfExample +.. com.welab.message.model.WhatsappTemplateConfExample$Criterion
com.welab.message.email.EmailTest +.. com.welab.message.email.EmailTest$EmailWork
com.welab.message.email.Runnable <|.. com.welab.message.email.EmailTest$EmailWork
com.welab.message.model.AppMessageExample +.. com.welab.message.model.AppMessageExample$GeneratedCriteria
com.welab.message.model.AppMessageExample +.. com.welab.message.model.AppMessageExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.AppMessageExample$Criteria
com.welab.message.model.AppMessageExample +.. com.welab.message.model.AppMessageExample$Criterion
java.io.Serializable <|.. com.welab.message.vo.MessagePushByUserIdVO
com.welab.message.test.SimpleTest <|-- com.welab.message.mongo.MongoTest
com.welab.message.service.push.IMessagePushService <|.. com.welab.message.service.push.AbsPushService
java.io.Serializable <|.. com.welab.message.dto.push.TemplatePushDTO
com.welab.message.app.service.AbstractEmailSender <|-- com.welab.message.app.service.NormalEmailSender
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.message.job.DeleteMailJob
com.welab.message.mapper.PushTemplateConfMapper <|-- com.welab.message.mapper.ext.PushTemplateConfExtMapper
com.welab.message.dto.whatsapp.Serializable <|.. com.welab.message.dto.whatsapp.WhatsappTmplConfReq
com.welab.message.model.CmsgGroupExample +.. com.welab.message.model.CmsgGroupExample$GeneratedCriteria
com.welab.message.model.CmsgGroupExample +.. com.welab.message.model.CmsgGroupExample$Criterion
com.welab.message.model.CmsgGroupExample +.. com.welab.message.model.CmsgGroupExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.CmsgGroupExample$Criteria
com.welab.message.app.manager.template.AbstractMessageTemplate <|-- com.welab.message.app.manager.template.AppMessageTemplateManager
org.springframework.web.socket.config.annotation.WebSocketConfigurer <|.. com.welab.message.config.WebSocketConfig
org.springframework.amqp.core.MessageListener <|.. com.welab.message.core.mq.WebSocketMqListener
org.springframework.web.socket.handler.TextWebSocketHandler <|-- com.welab.message.handler.websocket.WhatsAppWebSocketHander
org.springframework.web.filter.OncePerRequestFilter <|-- com.welab.message.filter.LogFilter
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.message.job.TransferData2MonthTableJob
com.welab.message.dto.mq.BaseMqDto <|-- com.welab.message.dto.mq.VirtualAccountCreateDto
org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests <|-- com.welab.message.test.TestMybatis
com.welab.message.service.whatsapp.task.Runnable <|.. com.welab.message.service.whatsapp.task.WhatsAppReplyMsgTask
java.io.Serializable <|.. com.welab.message.dto.sms.SendSmsRequest
com.welab.sea.email.service.FastMessageEmailService <|.. com.welab.message.app.impl.FastMessageEmailServiceImpl
org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests <|-- com.welab.message.test.LuaTest
com.welab.message.service.MessageMqService <|.. com.welab.message.service.mq.MessageMqServiceImpl
java.io.Serializable <|.. com.welab.message.vo.PushTemplateConfVO
com.welab.message.dto.email.MailDTO <|-- com.welab.message.model.ext.EmailMqInfo
com.welab.message.mapper.AddresseeWhiteListMapper <|-- com.welab.message.mapper.ext.AddresseeWhiteListExtMapper
com.welab.message.model.ServicePushMessageExample +.. com.welab.message.model.ServicePushMessageExample$GeneratedCriteria
com.welab.message.model.ServicePushMessageExample +.. com.welab.message.model.ServicePushMessageExample$Criterion
com.welab.message.model.ServicePushMessageExample +.. com.welab.message.model.ServicePushMessageExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.ServicePushMessageExample$Criteria
java.io.Serializable <|.. com.welab.message.dto.email.SpecialEmailSourceDTO
java.io.Serializable <|.. com.welab.message.dto.email.SpecialEmailReceiverDTO
org.springframework.context.ApplicationContextAware <|.. com.welab.message.utils.SpringUtils
com.welab.common.exception.FastRuntimeException <|-- com.welab.message.exception.MessageException
com.welab.message.dto.mq.BaseMqDto <|-- com.welab.message.dto.mq.VirtualAccountPaymentDto
com.welab.message.test.SimpleTest <|-- com.welab.message.service.impl.MessageSmsServiceImplTest
com.welab.message.model.EmailMessageLogExample +.. com.welab.message.model.EmailMessageLogExample$GeneratedCriteria
com.welab.message.model.EmailMessageLogExample +.. com.welab.message.model.EmailMessageLogExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.EmailMessageLogExample$Criteria
com.welab.message.model.EmailMessageLogExample +.. com.welab.message.model.EmailMessageLogExample$Criterion
com.welab.message.mapper.TimingMsgMapper <|-- com.welab.message.mapper.ext.TimingMsgExtMapper
com.welab.message.exception.RuntimeException <|-- com.welab.message.exception.SMSException
com.welab.message.model.EmailMessageExample +.. com.welab.message.model.EmailMessageExample$GeneratedCriteria
com.welab.message.model.EmailMessageExample +.. com.welab.message.model.EmailMessageExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.EmailMessageExample$Criteria
com.welab.message.model.EmailMessageExample +.. com.welab.message.model.EmailMessageExample$Criterion
java.io.Serializable <|.. com.welab.message.dto.TimingMsgDTO
com.welab.message.app.service.AbstractEmailSender <|-- com.welab.message.app.service.BaseEmailSender
com.welab.message.service.TimingMsgDubboService <|.. com.welab.message.service.dubbo.TimingMsgDubboServiceImpl
com.welab.message.vo.Serializable <|.. com.welab.message.vo.WhatsappTemplateConfVo
com.welab.message.model.PushTemplateConfExample +.. com.welab.message.model.PushTemplateConfExample$GeneratedCriteria
com.welab.message.model.PushTemplateConfExample +.. com.welab.message.model.PushTemplateConfExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.PushTemplateConfExample$Criteria
com.welab.message.model.PushTemplateConfExample +.. com.welab.message.model.PushTemplateConfExample$Criterion
java.io.Serializable <|.. com.welab.message.dto.app.PushTemplateDTO
com.welab.message.model.PushMessageExample +.. com.welab.message.model.PushMessageExample$GeneratedCriteria
com.welab.message.model.PushMessageExample +.. com.welab.message.model.PushMessageExample$Criterion
com.welab.message.model.PushMessageExample +.. com.welab.message.model.PushMessageExample$Criteria
com.welab.message.model.GeneratedCriteria <|-- com.welab.message.model.PushMessageExample$Criteria
com.welab.message.service.AppTokenService <|.. com.welab.message.service.impl.AppTokenServiceImpl
com.welab.common.msg.BaseMessageBody <|-- com.welab.message.dto.mq.KeredoRepaymentDto
com.welab.message.app.manager.template.AbstractMessageTemplate <|-- com.welab.message.app.manager.template.CmsgTemplateManager
com.welab.message.model.TimingMsg <|-- com.welab.message.model.ext.TimingMsgExt
com.welab.sea.util.dto.Command <|-- com.welab.message.command.msg.AppMessageReadCmd
com.welab.message.test.SimpleTest <|-- com.welab.message.service.impl.MessageMqServiceImplTest
com.dangdang.ddframe.job.api.simple.SimpleJob <|.. com.welab.message.job.TimingMsgJob
com.welab.message.test.SimpleTest <|-- com.welab.message.service.impl.MessagePushServiceImplTest
com.welab.message.app.manager.template.AbstractMessageTemplate <|-- com.welab.message.app.manager.template.EmailMessageTemplateManager
java.io.Serializable <|.. com.welab.message.vo.EmailFileVO
com.welab.message.test.SimpleTest <|-- com.welab.message.email.EmailServiceTest
com.welab.message.service.whatsapp.task.Runnable <|.. com.welab.message.service.whatsapp.task.WhatsAppSendMsgTask
com.welab.message.test.SimpleTest <|-- com.welab.message.service.impl.DelEmailTest
com.welab.message.test.SimpleTest <|-- com.welab.message.test.MessageTest
com.welab.message.service.push.AbsPushService <|-- com.welab.message.service.push.DefaultMsgPush
com.welab.message.test.SimpleTest <|-- com.welab.message.whatsapp.WhatsAppTest
com.welab.message.service.CmsgService <|.. com.welab.message.app.impl.CmsgServiceImpl
com.welab.message.service.MessageSmsService <|.. com.welab.message.service.impl.MessageSmsServiceImpl
com.welab.message.service.MessagePushService <|.. com.welab.message.service.impl.MessagePushServiceImpl
java.io.Serializable <|.. com.welab.message.dto.push.MessagePushDTO
java.io.Serializable <|.. com.welab.message.dto.push.MessagePushBatchDTO
com.welab.sea.util.dto.PageQuery <|-- com.welab.message.dto.app.AppMsgQry
com.welab.message.service.impl.msg.AbstractMsgProcessService <|-- com.welab.message.service.impl.msg.SmsServiceImpl
java.io.Serializable <|.. com.welab.message.vo.SmsTemplateConfVO
com.welab.sea.util.dto.DTO <|-- com.welab.message.dto.cmsg.MsgTemplateDTO
java.io.Serializable <|.. com.welab.message.vo.MessagePushVO
com.welab.common.exception.FastRuntimeException <|-- com.welab.message.exception.AppTokenException
@enduml