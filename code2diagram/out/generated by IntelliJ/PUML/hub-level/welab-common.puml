@startuml
class com.welab.common.utils.FileUtils {
- {static} int BUFFER
- {static} double KB_SIZE
- {static} double MB_SIZE
- {static} double GB_SIZE
- {static} String B
- {static} String KB
- {static} String MB
- {static} String GB
+ {static} InputStream getInputStreamFromClassPath(String)
+ boolean copyTo(String,String)
+ {static} boolean delete(String)
+ boolean moveFile(String,String)
+ {static} boolean makedir(String)
+ boolean rmdir(String)
+ {static} void uploadFile(InputStream,String)
+ {static} String getFileSizeStr(long)
}
class com.welab.security.util.MD5Util {
- {static} char[] hexDigits
+ {static} String md5(String)
+ {static} String md5(String,String)
- {static} String leftPad(String,int,char)
+ {static} String md5salt(String,Object)
+ {static} void main(String[])
}
class com.welab.security.util.RSAUtil {
- {static} KeyFactory keyFactory
- {static} Cipher cipher
+ {static} void main(String[])
+ {static} String decrypt(String,String)
- {static} byte[] decrypt(String,String,String,String)
}
interface com.welab.common.msg.BaseQueueEnum {
~ String TAG_NAME
~ MessageTypeEnum getMessageTypeEnum()
~ String getQueueName()
~ String getBindExchangeName()
~ String getRoutingKey()
~ String getDeadExchangeName()
~ String getDeadRoutingKey()
~ String getTag()
~ String getListenerContainerFactoryBeanId()
}
class com.welab.common.utils.YamlUtil {
+ {static} Map<String,Object> getMaps(String)
+ {static} Properties getProperties(String)
+ {static} OrderSafeProperties getOrderSafeProperties(String)
}
class com.welab.common.utils.BeanCopierUtil {
- {static} Map<String,BeanCopier> BEANCOPIER_MAP
+ {static} void copy(Object,Object)
}
interface com.welab.common.exception.BaseException {
~ Integer getCode()
~ String[] getArgs()
~ void setTime(Date)
~ Date getTime()
~ void setClassName(String)
~ String getClassName()
~ void setMethodName(String)
~ String getMethodName()
~ void setParameters(String[])
~ String[] getParameters()
~ void setHandled(boolean)
~ boolean isHandled()
~ String getMessage()
~ void setI18nMessage(String)
~ String getI18nMessage()
}
class com.welab.common.response.Response {
- {static} long serialVersionUID
- Integer code
- String message
- T result
+ {static} Map<Integer,String> RESPONSE_MAP
+ <<Create>> Response(Integer)
+ <<Create>> Response(Integer,T)
+ <<Create>> Response(Integer,String,T)
+ <<Create>> Response()
+ {static} boolean isSuccess(Response<?>)
+ Integer getCode()
+ String getMessage()
+ T getResult()
+ void setCode(Integer)
+ void setMessage(String)
+ void setResult(T)
+ boolean equals(Object)
+ String toString()
}
class com.welab.common.utils.AnnotationUtil {
+ {static} Map<String,Object> getAnnotationAttributes(Annotation)
+ {static} Map<String,Object> getAnnotationAttributes(Annotation,boolean)
+ {static} LinkedHashMap<String,Object> getAnnotationAttributes(Annotation,boolean,boolean)
~ {static} Object adaptValue(Object,boolean,boolean)
}
class com.welab.common.config.Sanitizer {
- {static} String[] REGEX_PARTS
- Pattern[] keysToSanitize
~ <<Create>> Sanitizer()
~ <<Create>> Sanitizer(String)
+ void setKeysToSanitize(String)
- Pattern getPattern(String)
- boolean isRegex(String)
+ Object sanitize(String,Object)
}
class com.welab.common.exception.WeLabException {
- {static} long serialVersionUID
- String code
- String message
- Object[] args
+ <<Create>> WeLabException()
+ <<Create>> WeLabException(String,Throwable)
+ <<Create>> WeLabException(Throwable)
+ <<Create>> WeLabException(String)
+ <<Create>> WeLabException(String,Object)
+ <<Create>> WeLabException(String,String,Object)
}
class com.welab.common.executor.PoolExecutorEngine {
- ThreadPoolExecutor executor
+ void ThreadPoolExecutor(ThreadPoolExecutor)
}
class com.welab.common.keygen.GeneratorConnectorFactory {
- Snowflake snowflake
- RegisterCenter register
- boolean working
- boolean connecting
+ <<Create>> GeneratorConnectorFactory(RegisterCenter)
+ void close()
+ void suspend()
+ boolean isWorking()
+ boolean isConnecting()
+ void init()
+ void connect()
}
class com.welab.common.factory.DefaultThreadFactory {
- {static} Map<String,DefaultThreadFactory> mapOfNameAndThreadFactory
- {static} Map<String,AtomicInteger> mapOfNameAndAtomicInteger
- String threadPoolName
- int priority
+ {static} DefaultThreadFactory getInstance(String)
+ {static} DefaultThreadFactory getInstance(String,Integer)
+ String getThreadPoolName()
+ Thread newThread(Runnable)
+ void setThreadName(String)
}
class com.welab.xdao.context.page.Page {
- {static} long serialVersionUID
+ {static} int DEFAULT_SIZE
- Integer currentPage
- Integer totalPage
- Integer rowsPerPage
- Integer totalRows
- List<T> list
- int visualSize
+ Integer getStartPage()
+ Integer getEndPage()
+ boolean isLastPage()
+ Integer getCurrentPage()
+ void setCurrentPage(Integer)
+ Integer getTotalPage()
+ void setTotalPage(Integer)
+ Integer getRowsPerPage()
+ void setRowsPerPage(Integer)
+ Integer getTotalRows()
+ void setTotalRows(Integer)
+ List<T> getList()
+ void setList(List<T>)
+ int getVisualSize()
+ void setVisualSize(int)
+ {static} Page<T> initPage(List<T>,int,int,int)
}
class com.welab.common.registry.zookeeper.ZookeeperConnectionStateListener {
- GeneratorConnector connector
+ <<Create>> ZookeeperConnectionStateListener(GeneratorConnector)
+ void stateChanged(CuratorFramework,ConnectionState)
# void doReconnecting()
}
class com.welab.common.serializer.support.HessianSerializer {
+ byte[] serialize(Object)
+ T deserialize(byte[])
- void closeQuietly(Closeable)
}
class com.welab.common.spring.SpringContextHolder {
- {static} ApplicationContext applicationContext
+ <<Create>> SpringContextHolder()
+ void setApplicationContext(ApplicationContext)
+ {static} ApplicationContext getApplicationContext()
+ {static} Object getBean(String)
+ {static} T getBean(Class<T>)
+ {static} T getBean(String,Class<T>)
}
class com.welab.common.utils.IDUtil {
+ {static} String uuid()
+ {static} void main(String[])
}
class com.welab.common.config.OrderSafeProperties {
- {static} long serialVersionUID
- LinkedHashSet<Object> keys
+ Enumeration<Object> keys()
+ Set<Object> keySet()
+ Object put(Object,Object)
+ Object remove(Object)
+ void clear()
+ void putAll(Map<? extends Object,? extends Object>)
+ Set<Map.Entry<Object,Object>> entrySet()
}
class com.welab.common.config.OrderSafeProperties$Entry {
- Object key
- Object value
- <<Create>> Entry(Object,Object)
+ Object getKey()
+ Object getValue()
+ Object setValue(Object)
}
class com.welab.common.utils.MathsUtil {
+ {static} int divisor(Integer[])
}
class com.welab.security.util.SHA1 {
- {static} MessageDigest sha1()
+ {static} void reset()
+ {static} void update(byte[])
+ {static} void update(byte[],int,int)
+ {static} int Final(byte[],int)
+ {static} byte[] Final()
+ {static} byte[] digest(byte[],int,int)
+ {static} void digest(byte[],int,int,byte[],int)
+ {static} byte[] digest(byte[])
}
class com.welab.test.Demo {
+ {static} void main(String[])
}
class com.welab.common.utils.http.Utils {
- {static} Logger LOG
+ {static} String ENTITY_STRING
+ {static} String ENTITY_FILE
+ {static} String ENTITY_BYTES
+ {static} String ENTITY_INPUTSTREAM
+ {static} String ENTITY_SERIALIZABLE
+ {static} String ENTITY_MULTIPART
- {static} List<String> SPECIAL_ENTITIY
+ {static} String checkHasParas(String,List<NameValuePair>,String)
+ {static} HttpEntity map2HttpEntity(List<NameValuePair>,Map<String,Object>,String)
- {static} String getMultipartFileName(String,int,int)
- {static} void removeContentTypeChraset(String,HttpEntity)
+ {static} Map<String,Object> buildParas(String)
+ {static} Map<String,Object> buildParas(String[][])
}
class com.welab.common.utils.NumberUtil {
+ {static} double formatDouble(double,int)
+ {static} float formatFloat(float,int)
+ {static} float formatFloat(float)
+ {static} int roundHalfUp(Object)
}
class com.welab.common.factory.NamedThreadFactory {
- AtomicInteger threadNum
- String prefix
- boolean daemo
- ThreadGroup group
+ <<Create>> NamedThreadFactory(String,boolean)
+ Thread newThread(Runnable)
+ ThreadGroup getThreadGroup()
+ String toString()
}
class com.welab.common.utils.ReportMaker {
- {static} Configuration cfg
- {static} Configuration getCfg()
+ {static} void exeute(Map<String,Object>,String,String)
+ {static} String exeute4Content(Map<String,Object>,String)
}
class com.welab.common.keygen.SnowflakeWorkerRegister {
- {static} long MAX_WORKER_NUM
- {static} int MAX_LOCK_WAIT_TIME_MS
- CoordinatorRegistryCenter regCenter
- NodePath nodePath
+ <<Create>> SnowflakeWorkerRegister(CoordinatorRegistryCenter,String)
+ long register()
+ void addConnectionLJistener(ConnectionStateListener)
+ void logout()
- String toJSON(NodeInfo)
}
class com.welab.common.utils.http.HttpClientUtil {
- {static} HttpClient client4HTTP
- {static} HttpClient client4HTTPS
- {static} Header[] headers
- {static} void create(HttpConfig)
+ {static} String get(HttpClient,String,Header[],HttpContext,String)
+ {static} String get(HttpConfig)
+ {static} String post(HttpClient,String,Header[],Map<String,Object>,HttpContext,String)
+ {static} String post(HttpConfig)
+ {static} String postJson(String,String)
+ {static} String getJson(String,String)
+ {static} String post(String,Map<String,Object>)
+ {static} String get(String,Map<String,Object>)
+ {static} String get(String)
+ {static} String post(String)
+ {static} String put(HttpClient,String,Map<String,Object>,Header[],HttpContext,String)
+ {static} String put(HttpConfig)
+ {static} String delete(HttpClient,String,Header[],HttpContext,String)
+ {static} String delete(HttpConfig)
+ {static} String patch(HttpClient,String,Map<String,Object>,Header[],HttpContext,String)
+ {static} String patch(HttpConfig)
+ {static} String head(HttpClient,String,Header[],HttpContext,String)
+ {static} String head(HttpConfig)
+ {static} String options(HttpClient,String,Header[],HttpContext,String)
+ {static} String options(HttpConfig)
+ {static} String trace(HttpClient,String,Header[],HttpContext,String)
+ {static} String trace(HttpConfig)
+ {static} OutputStream down(HttpClient,String,Header[],HttpContext,OutputStream)
+ {static} OutputStream down(HttpConfig)
+ {static} String upload(HttpClient,String,Header[],HttpContext)
+ {static} String upload(HttpConfig)
+ {static} int status(HttpClient,String,Header[],HttpContext,HttpMethods)
+ {static} int status(HttpConfig)
+ {static} String send(HttpConfig)
- {static} HttpResponse execute(HttpConfig)
- {static} String fmt2String(HttpResponse,String)
- {static} int fmt2Int(HttpResponse)
+ {static} OutputStream fmt2Stream(HttpResponse,OutputStream)
- {static} HttpRequestBase getRequest(String,HttpMethods)
- {static} void close(HttpResponse)
- {static} List<NameValuePair> getNameValuePairsFromMap(Map<String,Object>)
- {static} boolean isEmptyCollection(Map<?,?>)
}
class com.welab.common.executor.ExecutorEngine {
- {static} ListeningExecutorService executorService
+ <<Create>> ExecutorEngine()
+ <<Create>> ExecutorEngine(String)
+ <<Create>> ExecutorEngine(String,RejectedExecutionHandler,Integer)
+ <<Create>> ExecutorEngine(ThreadPoolExecutor)
- void executor(String,ThreadPoolExecutor,RejectedExecutionHandler,Integer)
+ List<O> execute(Collection<I>,ExecuteUnit<I,O>)
+ O execute(Collection<I>,ExecuteUnit<I,M>,MergeUnit<M,O>)
- ListenableFuture<List<O>> submitFutures(Collection<I>,ExecuteUnit<I,O>)
- void addCallback(ListenableFuture<T>)
- O getFutureResults(ListenableFuture<O>)
}
class com.welab.common.utils.BeanUtil {
+ {static} boolean isPrimitive(Object)
+ {static} Object getRealVal(Class<?>,String)
+ {static} String toString(Object)
+ {static} Object getPropertie(Object,String)
+ {static} boolean isNull(T)
}
class com.welab.common.utils.CollectionUtil {
+ {static} List<String> split(String)
+ {static} List<List<T>> split(Collection<T>,int)
+ {static} T[] concat(T[],T[])
+ {static} List<T> concat(List<T>,List<T>)
+ {static} Set<T> concat(Set<T>,Set<T>)
+ {static} List<List<Object>> split(Object[],int)
+ {static} void addAll(Collection,Object[])
+ {static} boolean isNull(Collection<?>)
+ {static} boolean isNull(Map<String,String>)
+ {static} boolean isNull(Object[])
}
class com.welab.common.registry.zookeeper.ZookeeperRegistryCenter {
- ZookeeperConfiguration zkConfig
- Map<String,TreeCache> caches
- CuratorFramework client
+ <<Create>> ZookeeperRegistryCenter(ZookeeperConfiguration)
+ void init()
+ void close()
- void waitForCacheClose()
+ String get(String)
- TreeCache findTreeCache(String)
+ String getDirectly(String)
+ List<String> getChildrenKeys(String)
+ int getNumChildren(String)
+ boolean isExisted(String)
+ void persist(String,String)
+ void update(String,String)
+ void persistEphemeral(String,String)
+ String persistSequential(String,String)
+ void persistEphemeralSequential(String)
+ void remove(String)
+ long getRegistryCenterTime(String)
+ Object getRawClient()
+ void addCacheData(String)
+ void evictCacheData(String)
+ Object getRawCache(String)
}
class com.welab.common.utils.AnnUtil {
+ {static} Set<Class<?>> getAllClasses(String)
+ {static} Set<String> getClassName(String,boolean)
- {static} Set<String> getClassNameByFile(String,Set<String>,boolean)
- {static} List<String> getClassNameByJar(String,boolean)
- {static} List<String> getClassNameByJars(URL[],String,boolean)
+ {static} Set<Class<?>> getClasses(String)
+ {static} void findAndAddClassesInPackageByFile(String,String,boolean,Set<Class<?>>)
+ {static} void main(String[])
}
class com.welab.common.utils.http.HttpHeader {
- Map<String,Header> headerMaps
- <<Create>> HttpHeader()
+ {static} HttpHeader custom()
+ HttpHeader other(String,String)
+ HttpHeader accept(String)
+ HttpHeader acceptCharset(String)
+ HttpHeader acceptEncoding(String)
+ HttpHeader acceptLanguage(String)
+ HttpHeader acceptRanges(String)
+ HttpHeader authorization(String)
+ HttpHeader cacheControl(String)
+ HttpHeader connection(String)
+ HttpHeader cookie(String)
+ HttpHeader contentLength(String)
+ HttpHeader contentType(String)
+ HttpHeader date(String)
+ HttpHeader expect(String)
+ HttpHeader from(String)
+ HttpHeader host(String)
+ HttpHeader ifMatch(String)
+ HttpHeader ifModifiedSince(String)
+ HttpHeader ifNoneMatch(String)
+ HttpHeader ifRange(String)
+ HttpHeader ifUnmodifiedSince(String)
+ HttpHeader maxForwards(String)
+ HttpHeader pragma(String)
+ HttpHeader proxyAuthorization(String)
+ HttpHeader range(String)
+ HttpHeader referer(String)
+ HttpHeader te(String)
+ HttpHeader upgrade(String)
+ HttpHeader userAgent(String)
+ HttpHeader warning(String)
+ HttpHeader via(String)
+ HttpHeader keepAlive(String)
+ String accept()
+ String acceptCharset()
+ String acceptEncoding()
+ String acceptLanguage()
+ String acceptRanges()
+ String authorization()
+ String cacheControl()
+ String connection()
+ String cookie()
+ String contentLength()
+ String contentType()
+ String date()
+ String expect()
+ String from()
+ String host()
+ String ifMatch()
+ String ifModifiedSince()
+ String ifNoneMatch()
+ String ifRange()
+ String ifUnmodifiedSince()
+ String maxForwards()
+ String pragma()
+ String proxyAuthorization()
+ String referer()
+ String te()
+ String upgrade()
+ String userAgent()
+ String via()
+ String warning()
+ String keepAlive()
- String get(String)
+ Header[] build()
}
class com.welab.common.utils.http.HttpHeader$HttpReqHead {
+ {static} String ACCEPT
+ {static} String ACCEPT_CHARSET
+ {static} String ACCEPT_ENCODING
+ {static} String ACCEPT_LANGUAGE
+ {static} String ACCEPT_RANGES
+ {static} String AUTHORIZATION
+ {static} String CACHE_CONTROL
+ {static} String CONNECTION
+ {static} String COOKIE
+ {static} String CONTENT_LENGTH
+ {static} String CONTENT_TYPE
+ {static} String DATE
+ {static} String EXPECT
+ {static} String FROM
+ {static} String HOST
+ {static} String IF_MATCH
+ {static} String IF_MODIFIED_SINCE
+ {static} String IF_NONE_MATCH
+ {static} String IF_RANGE
+ {static} String IF_UNMODIFIED_SINCE
+ {static} String KEEP_ALIVE
+ {static} String MAX_FORWARDS
+ {static} String PRAGMA
+ {static} String PROXY_AUTHORIZATION
+ {static} String RANGE
+ {static} String REFERER
+ {static} String TE
+ {static} String UPGRADE
+ {static} String USER_AGENT
+ {static} String VIA
+ {static} String WARNING
}
class com.welab.common.utils.http.HttpHeader$Headers {
+ {static} String APP_FORM_URLENCODED
+ {static} String TEXT_PLAIN
+ {static} String TEXT_HTML
+ {static} String TEXT_XML
+ {static} String TEXT_JSON
+ {static} String APPLICATION_JSON
+ {static} String CONTENT_CHARSET_ISO_8859_1
+ {static} String CONTENT_CHARSET_UTF8
+ {static} String DEF_PROTOCOL_CHARSET
+ {static} String CONN_CLOSE
+ {static} String KEEP_ALIVE
+ {static} String EXPECT_CONTINUE
}
class com.welab.security.util.SecurityUtil {
+ {static} boolean isBlank(String)
}
interface com.welab.common.registry.CoordinatorRegistryCenter {
~ String getDirectly(String)
~ List<String> getChildrenKeys(String)
~ int getNumChildren(String)
~ void persistEphemeral(String,String)
~ String persistSequential(String,String)
~ void persistEphemeralSequential(String)
~ void addCacheData(String)
~ void evictCacheData(String)
~ Object getRawCache(String)
}
class com.welab.common.utils.http.HttpClientException {
- {static} long serialVersionUID
+ <<Create>> HttpClientException()
+ <<Create>> HttpClientException(String,Throwable,boolean,boolean)
+ <<Create>> HttpClientException(String,Throwable)
+ <<Create>> HttpClientException(String)
+ <<Create>> HttpClientException(Throwable)
}
class com.welab.common.utils.BytesUtil {
+ {static} void main(String[])
+ {static} byte[] integer2Bytes(int)
+ {static} byte[] get2Bytes(int)
+ {static} byte[] get1Bytes(int)
+ {static} int bytes2Integer(byte[])
+ {static} int anybytes2Integer(byte[])
+ {static} void putShort(byte[],short,int)
+ {static} int getOneByteValue(byte)
+ {static} short getShort(byte[],int)
+ {static} void putInt(byte[],int,int)
+ {static} int getInt(byte[],int)
+ {static} void putLong(byte[],long,int)
+ {static} long getLong(byte[],int)
+ {static} byte[] getNewByteByTwo(byte[],byte[])
+ {static} String byte2hex(byte[])
+ {static} void printHexString(String,byte[])
+ {static} String bytes2HexString(byte[])
+ {static} String bytes2HexString(byte[],int,int)
+ {static} byte uniteBytes(byte,byte)
+ {static} byte[] hexString2Bytes(String)
+ {static} byte[] bytes2Bytes(byte[],byte[])
+ {static} byte[] copyBytes(byte[],int,int)
+ {static} int indexOfBytes(byte[],byte[])
+ {static} void putBytes(byte[],byte[],int)
+ {static} void putZero(byte[],int)
}
abstract class com.welab.common.StartServer {
+ {abstract}void execute()
+ void start()
}
class com.welab.common.utils.ThreadUtil {
+ {static} void sleep(long)
+ {static} ThreadGroup getRootThreadGroup()
+ {static} String stackTrace()
}
class com.welab.security.util.SignUtil {
- {static} String CHARACTER
+ {static} boolean validateSign(String,String)
+ {static} boolean validateSign(String,String,String)
+ {static} String sign(String,String)
+ {static} void main(String[])
}
class com.welab.common.utils.http.HttpCookies {
- HttpClientContext context
- CookieStore cookieStore
- <<Create>> HttpCookies()
+ {static} HttpCookies custom()
+ HttpClientContext getContext()
+ HttpCookies setContext(HttpClientContext)
+ CookieStore getCookieStore()
+ HttpCookies setCookieStore(CookieStore)
}
class com.welab.common.utils.http.SSLs {
- {static} SSLHandler SIMPLE_VERIFIER
- {static} SSLSocketFactory sslFactory
- {static} SSLConnectionSocketFactory sslConnFactory
- {static} SSLIOSessionStrategy sslIOSessionStrategy
- {static} SSLs sslutil
- SSLContext sc
+ {static} SSLs getInstance()
+ {static} SSLs custom()
+ {static} HostnameVerifier getVerifier()
+ SSLSocketFactory getSSLSF(SSLProtocolVersion)
+ SSLConnectionSocketFactory getSSLCONNSF(SSLProtocolVersion)
+ SSLIOSessionStrategy getSSLIOSS(SSLProtocolVersion)
+ SSLs customSSL(String,String)
+ SSLContext getSSLContext(SSLProtocolVersion)
}
class com.welab.common.utils.http.SSLs$SSLHandler {
+ java.security.cert.X509Certificate[] getAcceptedIssuers()
+ void checkServerTrusted(java.security.cert.X509Certificate[],String)
+ void checkClientTrusted(java.security.cert.X509Certificate[],String)
+ boolean verify(String,SSLSession)
}
enum com.welab.common.utils.http.SSLProtocolVersion {
+  SSL
+  SSLv3
+  TLSv1
+  TLSv1_1
+  TLSv1_2
- String name
- <<Create>> SSLProtocolVersion(String)
+ String getName()
+ {static} SSLProtocolVersion find(String)
}
class com.welab.common.utils.CRC16 {
- {static} int[] TABLE
- int sum
+ long getValue()
+ void reset()
+ void update(byte[],int,int)
+ void update(int)
+ {static} long checksum(byte[],int,int)
+ {static} void main(String[])
+ {static} Double getLatitude(String,String)
+ {static} Double getLongitude(String,String)
}
abstract class com.welab.common.utils.IDCardUtils {
- {static} String REGPEX_18_BIT
- {static} String REGPEX_15_BIT
- {static} String BIRTHDAY_18_BIT
- {static} String BIRTHDAY_15_BIT
- {static} char[] CHINA_ID_CARD_VALIDATE_BIT
+ {static} boolean validateIdCard(String)
+ {static} boolean validateIdCardOf18(String)
- {static} boolean checkDate(String)
- {static} boolean validateFormate(String)
- {static} boolean validateLastBit(String)
- {static} int[] getEveryBitWeightValue()
- {static} int getValidateValue(String)
- {static} boolean validateBirthday(String)
- {static} int getDaysOfMonth(int,int)
+ {static} boolean isLeAgeByCnid(String,int)
+ {static} boolean isAgeRangeByCnid(String,int,int)
+ {static} Integer getAgeWithCnid(String)
+ {static} Date getBirthdayWithCnid(String,String)
- {static} String parseBirthday(String)
}
class com.welab.common.exception.BaseRuntimeException {
- {static} long serialVersionUID
- Integer code
- Date time
- String[] args
- String className
- String methodName
- String[] parameters
- boolean handled
- String i18nMessage
+ <<Create>> BaseRuntimeException(Integer,String,Object[])
+ <<Create>> BaseRuntimeException(Integer,String,Throwable,Object[])
+ <<Create>> BaseRuntimeException(String,Throwable)
+ <<Create>> BaseRuntimeException(String)
+ Integer getCode()
+ Date getTime()
+ void setTime(Date)
+ String getClassName()
+ void setClassName(String)
+ String getMethodName()
+ void setMethodName(String)
+ String[] getParameters()
+ void setParameters(String[])
+ void setHandled(boolean)
+ boolean isHandled()
+ void setI18nMessage(String)
+ String getI18nMessage()
+ String[] getArgs()
}
class com.welab.common.utils.PropUtil {
- {static} Map<String,OrderSafeProperties> propMap
+ {static} OrderSafeProperties loadProperty(String)
+ {static} Map<String,String> getPropertieMaps(String)
+ {static} OrderSafeProperties getProperties(String)
+ {static} String getProp(String,String,boolean)
}
class com.welab.common.utils.JSONFormatUtil {
+ {static} void main(String[])
+ {static} String formatJson(String)
- {static} String getToken(String)
- {static} void doFill(StringBuilder,int,String)
}
class com.welab.common.registry.zookeeper.RegistryExceptionHandler {
+ {static} void handleException(Exception)
- {static} boolean isIgnoredException(Throwable)
}
class com.welab.common.exception.SecurityException {
- {static} long serialVersionUID
+ <<Create>> SecurityException()
+ <<Create>> SecurityException(String,Throwable)
+ <<Create>> SecurityException(String)
+ <<Create>> SecurityException(Throwable)
}
enum com.welab.common.utils.enums.BigDecimalType {
+  ROUND_HALF_UP
+  ROUND_HALF_DOWN
- int value
~ <<Create>> BigDecimalType(int)
+ int getValue()
}
class com.welab.common.utils.IntegerUtil {
+ {static} Integer defaultIfZero(Integer,Integer)
+ {static} Integer defaultIfError(String,Integer)
+ {static} Integer defaultIfError(Integer,Integer)
+ {static} Integer defaultIfSmallerThan0(Integer,Integer)
+ {static} Integer exceptionIfSmallerThan0(String)
+ {static} boolean isBiggerThan0(int)
+ {static} Integer maxIfTooBig(Integer,Integer)
}
interface com.welab.common.executor.ExecuteUnit {
~ O execute(I)
}
interface com.welab.common.executor.MergeUnit {
~ O merge(List<I>)
}
class com.welab.common.exception.FastRuntimeException {
- {static} long serialVersionUID
+ <<Create>> FastRuntimeException()
+ <<Create>> FastRuntimeException(String)
+ <<Create>> FastRuntimeException(Integer,String,Object[])
+ <<Create>> FastRuntimeException(Integer,String)
+ <<Create>> FastRuntimeException(String,Throwable)
+ <<Create>> FastRuntimeException(Integer,String,Throwable)
+ Throwable fillInStackTrace()
}
class com.welab.common.config.ClassLoaderUtils {
+ {static} void printJars()
}
interface com.welab.common.keygen.KeyGenerator {
~ long generateKey()
~ long[] generateKey(int)
}
enum com.welab.common.response.enums.ResponsCodeTypeEnum {
+  SUCCESS
+  SYSTEM_BUSY
+  REQUEST_TIME_OUT
+  PARAMETER_ERROR
+  NETWORK_ERROR
+  DATA_NOT_EXISTS
+  FILE_OVERSIZED
+  FAILURE
- Integer code
- String message
- <<Create>> ResponsCodeTypeEnum(Integer,String)
+ Integer getCode()
+ String getMessage()
}
class com.welab.common.utils.DELSVN {
+ {static} void main(String[])
+ {static} void delSVN(String)
+ {static} void getFiles(File,List<File>)
}
class com.welab.common.config.DefaultConfigService {
- {static} String appId
- {static} String fileNames
- {static} Boolean isConsoleClose
- Sanitizer sanitizer
- {static} boolean isLocal
- {static} String log_PATH
- {static} String log_LEVEL
- {static} OrderSafeProperties properties
- {static} String APOLLO_PROPERTY_SOURCE_NAME
- {static} String APP_PROPERTIES_CLASSPATH
- {static} String IGNORE_NAMESPACE
- List<String> namespaces
+ <<Create>> DefaultConfigService()
+ <<Create>> DefaultConfigService(String,String)
- boolean isInLocalMode()
- InputStream getInputStream()
- void reloadLogback(String,boolean)
+ void closeConsoleAppender()
+ OrderSafeProperties init()
- void appRepository()
- OrderSafeProperties remoteProperties()
- void setLogLevel(OrderSafeProperties)
- OrderSafeProperties loadProperties()
- void writeProperties()
- OrderSafeProperties getInit()
- PropertySourcesPlaceholderConfigurer placeSourcesPlaceholderConfigurer()
+ String getAppId()
+ void setAppId(String)
+ String getFileNames()
+ void setFileNames(String)
+ Map<String,String> getProperty()
+ Map<String,String> getPropertys()
+ String getProperty(String)
+ String getProperty(String,String)
+ Integer getIntProperty(String)
+ Integer getIntProperty(String,Integer)
+ Long getLongProperty(String)
+ Long getLongProperty(String,Long)
+ Short getShortProperty(String)
+ Short getShortProperty(String,Short)
+ Float getFloatProperty(String)
+ Float getFloatProperty(String,Float)
+ Double getDoubleProperty(String)
+ Double getDoubleProperty(String,Double)
+ Byte getByteProperty(String)
+ Byte getByteProperty(String,Byte)
+ Boolean getBooleanProperty(String)
+ Boolean getBooleanProperty(String,Boolean)
+ String[] getArrayProperty(String,String)
+ String[] getArrayProperty(String,String,String[])
+ Date getDateProperty(String,Date)
+ Date getDateProperty(String,String)
+ Date getDateProperty(String,String,Date)
+ Date getDateProperty(String,String,Locale,Date)
+ T getEnumProperty(String,Class<T>)
+ T getEnumProperty(String,Class<T>,T)
+ long getDurationProperty(String,long)
+ void addChangeListener(ConfigChangeListener)
+ void addChangeListener(String,ConfigChangeListener)
+ Set<String> getPropertyNames()
+ DefaultConfig getConfig()
+ DefaultConfig getConfig(String)
+ void initialize(ConfigurableApplicationContext)
- void loadParameter()
- List<String> getNamespaces()
+ void onApplicationEvent(ContextRefreshedEvent)
}
class com.welab.common.utils.ApolloUtil {
+ {static} void configUploadBatch(String,String,String,String)
}
class com.welab.common.utils.ArithmeticUtil {
- {static} int DEF_DIV_SCALE
+ {static} double add(double,double)
+ {static} boolean doubleEq(Double,double)
+ {static} BigDecimal add(String,String)
+ {static} String strAdd(String,String,int)
+ {static} double sub(double,double)
+ {static} BigDecimal sub(String,String)
+ {static} BigDecimal round(String,int)
+ {static} BigDecimal round(String,int,BigDecimalType)
+ {static} void main(String[])
+ {static} String strSub(String,String,int)
+ {static} double mul(double,double)
+ {static} BigDecimal mul(String,String)
+ {static} double mul2(double,double,int)
+ {static} String strMul2(String,String,int)
+ {static} BigDecimal div(String,String)
+ {static} double div(double,double)
+ {static} double div(double,double,int)
+ {static} BigDecimal div(String,String,int)
+ {static} String strDiv(String,String,int)
+ {static} BigDecimal bigDiv(String,String,int)
+ {static} BigDecimal strRemainder(String,String,int)
+ {static} String strRemainder2Str(String,String,int)
+ {static} boolean strcompareTo(String,String)
+ {static} boolean strcompareTo2(String,String)
+ {static} boolean strcompareTo3(String,String)
+ {static} BigDecimal bigRemainder(BigDecimal,BigDecimal,int)
+ {static} double round(double,int)
+ {static} String strRound(String,int)
}
class com.welab.common.exception.GlobalExceptionHandler {
- Logger log
+ <<Create>> GlobalExceptionHandler()
+ Response<Map<String,String>> MethodArgumentNotValidHandler(Exception)
}
interface com.welab.common.serializer.ISerializer {
~ byte[] serialize(Object)
~ T deserialize(byte[])
}
class com.welab.test.TestKey {
+ void assertGenerateKey()
}
class com.welab.security.util.AESUtil {
- {static} byte[] iv
+ {static} String encrypt(String,String)
+ {static} String encrypt(byte[],byte[],byte[])
+ {static} String decrypt(String,String)
+ {static} String decrypt(byte[],byte[],byte[])
- {static} String getPwdKey(Integer)
+ {static} void main(String[])
}
class com.welab.common.pinyin.PinyinResource {
- {static} Properties getResource(String)
# {static} Properties getPinyinTable()
# {static} Properties getMutilPintinTable()
# {static} Properties getChineseTable()
}
class com.welab.common.domain.MavenProject {
- String groupId
- String artifactId
- String version
}
class com.welab.common.utils.CharsetUtil {
+ {static} String decode(String)
+ {static} String encode(String)
+ {static} Integer getIntParam(String)
+ {static} Boolean getBooleanParam(String)
}
enum com.welab.common.utils.http.HttpMethods {
+  GET
+  POST
+  HEAD
+  PUT
+  DELETE
+  TRACE
+  PATCH
+  OPTIONS
- int code
- String name
- <<Create>> HttpMethods(int,String)
+ String getName()
+ int getCode()
}
interface com.welab.common.registry.RegistryCenter {
~ void init()
~ void close()
~ String get(String)
~ boolean isExisted(String)
~ void persist(String,String)
~ void update(String,String)
~ void remove(String)
~ long getRegistryCenterTime(String)
~ Object getRawClient()
}
class com.welab.test.JsonTest {
+ {static} void main(String[])
}
enum com.welab.common.msg.MessageTypeEnum {
+  DIRECT
+  FANOUT
+  DELAY
+  TOPIC
}
class com.welab.security.util.IDTransUtil {
- {static} long LONGMASK
- {static} int A_NUMBER
- {static} Map<Integer,Integer> HEX_SWITCH_MAP
- {static} int[] INT_MASK
- {static} long[] LONG_MASK
+ {static} void main(String[])
+ {static} Long encodeId(long,long)
+ {static} Long decodeId(long,long)
}
class com.welab.common.registry.zookeeper.NodeInfo {
- {static} long serialVersionUID
- Long sessionId
- Integer workerId
- String ip
- String hostName
- String pid
- Date updateTime
- Date createTime
+ <<Create>> NodeInfo(Long,Integer)
+ int hashCode()
+ boolean equals(Object)
}
class com.welab.common.utils.ReflectUtil {
- {static} Map<String,Field[]> fieldMap
- {static} Map<Class<?>,Map<String,Field>> fieldMaps
+ {static} Field[] getFields(Class<T>,boolean)
+ {static} Field[] getFields(T,boolean)
- {static} Field[] getClassFields(Class<?>,boolean)
+ {static} Map<String,Field> getFieldMap(Class<?>)
+ {static} Object getFieldValue(Object,String)
+ {static} void setFieldValue(Object,Field,Object)
}
class com.welab.common.registry.zookeeper.NodePath {
- {static} long serialVersionUID
- {static} String WORKER_NODE
- String groupName
- long workerId
- long sessionId
+ <<Create>> NodePath(String)
+ String getGroupPath()
+ String getWorkerPath()
+ String getWorkerIdPath()
+ int hashCode()
+ boolean equals(Object)
}
class com.welab.security.util.Rc4Util {
+ {static} void main(String[])
+ {static} String decrypt(String,String)
+ {static} String encrypt(String,String)
- {static} byte[] encryptByte(String,String)
- {static} String asString(byte[])
- {static} byte[] initKey(String)
- {static} String toHexString(String)
- {static} byte[] hexString2Bytes(String)
- {static} byte uniteBytes(byte,byte)
- {static} byte[] rc4(byte[],String)
}
class com.welab.common.utils.MurmurHash {
+ {static} int hash(byte[],int)
+ {static} int hash(byte[],int,int,int)
+ {static} int hash(ByteBuffer,int)
+ {static} long hash64A(byte[],int)
+ {static} long hash64A(byte[],int,int,int)
+ {static} long hash64A(ByteBuffer,int)
+ {static} long hash(byte[])
}
class com.welab.common.utils.JSONUtil {
- {static} ObjectSerializer longSerializer
+ {static} String toCompatibleJson(Object,String)
+ {static} String toCompatibleJson(Object)
+ {static} String toJson(Object,SerializerFeature)
+ {static} T fromJson(String,Class<T>)
+ {static} List<T> getList(String,Class<T>)
+ {static} Map<Object,Object> fromJson(String)
+ {static} List<Map<Object,Object>> fromJsonList(String)
}
class com.welab.common.pinyin.PinyinHelper {
- {static} Properties PINYIN_TABLE
- {static} Properties MUTIL_PINYIN_TABLE
- {static} String PINYIN_SEPARATOR
- {static} String ALL_UNMARKED_VOWEL
- {static} String ALL_MARKED_VOWEL
- {static} String[] convertWithToneNumber(String)
- {static} String[] convertWithoutTone(String)
- {static} String[] formatPinyin(String,PinyinFormat)
+ {static} String[] convertToPinyinArray(char,PinyinFormat)
+ {static} String[] convertToPinyinArray(char)
+ {static} String convertToPinyinString(String,String,PinyinFormat)
+ {static} String convertToPinyinString(String,String)
+ {static} boolean hasMultiPinyin(char)
+ {static} String getShortPinyin(String)
~ {static} String string2Unicode(String)
~ {static} String unicode2String(String)
+ {static} void main(String[])
}
class com.welab.common.serializer.support.KryoSerializer {
+ byte[] serialize(Object)
+ T deserialize(byte[])
}
class com.welab.common.serializer.support.KryoSerializer$KryoHolder {
- Kryo kryo
~ {static} int BUFFER_SIZE
- Output output
- Input input
~ <<Create>> KryoHolder(Kryo)
}
interface com.welab.common.serializer.support.KryoSerializer$KryoPool {
~ KryoHolder get()
~ void offer(KryoHolder)
}
class com.welab.common.serializer.support.KryoSerializer$KryoPoolImpl {
- {static} Deque<KryoHolder> deques
+ {static} KryoPool getInstance()
+ KryoHolder get()
+ KryoHolder creatInstnce()
+ void offer(KryoHolder)
}
class com.welab.common.serializer.support.KryoSerializer$KryoPoolImpl$Singleton {
- {static} KryoPool pool
}
class com.welab.common.utils.http.HttpConfig {
+ boolean isSetPool
- SSLProtocolVersion sslpv
- SSLs ssls
- HttpClient client
- Header[] headers
- boolean isReturnRespHeaders
- HttpMethods method
- String methodName
- HttpContext context
- Map<String,Object> map
- String json
- String xml
- String encoding
- String inenc
- String outenc
- int requestTimeout
- int connectTimeout
- int socketTimeout
- {static} ThreadLocal<OutputStream> outs
- {static} ThreadLocal<String> urls
- <<Create>> HttpConfig()
+ HttpConfig timeout(int)
+ HttpConfig timeout(int,boolean)
+ HttpConfig ssl()
+ HttpConfig ssl(String)
+ HttpConfig ssl(String,String)
+ HttpConfig pool(int,int)
+ HttpConfig proxy(String,int)
+ HttpConfig retry(int)
+ HttpConfig retry(int,boolean)
+ HttpConfig sslpv(String)
+ HttpConfig sslpv(SSLProtocolVersion)
+ {static} HttpConfig custom()
+ HttpConfig client(HttpClient)
+ HttpConfig connectTimeout(int)
+ HttpConfig requestTimeout(int)
+ HttpConfig socketTimeout(int)
+ HttpConfig url(String)
+ HttpConfig headers(Header[])
+ HttpConfig headers(Header[],boolean)
+ HttpConfig method(HttpMethods)
+ HttpConfig methodName(String)
+ HttpConfig context(HttpContext)
+ HttpConfig map(Map<String,Object>)
+ HttpConfig json(String)
+ HttpConfig xml(String)
+ HttpConfig files(String[])
+ HttpConfig files(String[],String)
+ HttpConfig files(String[],String,boolean)
+ HttpConfig encoding(String)
+ HttpConfig inenc(String)
+ HttpConfig outenc(String)
+ HttpConfig out(OutputStream)
+ HttpClient client()
+ Header[] headers()
+ boolean isReturnRespHeaders()
+ String url()
+ HttpMethods method()
+ String methodName()
+ HttpContext context()
+ Map<String,Object> map()
+ String json()
+ String xml()
+ String encoding()
+ String inenc()
+ String outenc()
+ OutputStream out()
+ int requestTimeout()
+ int connectTimeout()
+ int socketTimeout()
}
class com.welab.common.keygen.KeyGeneratorFactory {
- GeneratorConnectorFactory connector
- String zookeeperUrl
- String username
- String password
- String appId
+ <<Create>> KeyGeneratorFactory(String)
+ <<Create>> KeyGeneratorFactory(String,String,String,String)
+ void setZookeeperUrl(String)
+ void setUsername(String)
+ void setPassword(String)
- void init()
+ long generateKey()
+ long[] generateKey(int)
}
class com.welab.common.exception.util.ExceptionUtils {
+ <<Create>> ExceptionUtils()
+ {static} String[] convertArgsToString(Object[])
+ {static} String toString(Throwable)
+ {static} String toString(String,Throwable)
}
class com.welab.security.SecurityKey {
+ {static} int ID_KEY
+ {static} String AES_IV
+ {static} String MOBILE_PHONE_KEY
+ {static} String MOBILE_NAME_KEY
+ {static} String RSA_N
+ {static} String RSA_E
+ {static} String RSA_D
+ {static} int getIdKey()
}
class com.welab.common.utils.EntityUtil {
- {static} boolean isEmpty(Collection<?>)
+ {static} List<Object> getOneFieldValues(Collection<?>,String)
+ {static} List<T> getOneFieldValues(Collection<?>,String,Class<T>)
+ {static} Map<Object,T> getField2EntityMap(List<T>,String)
+ {static} Map<T2,T> getField2EntityMap(List<T>,String,Class<T2>)
+ {static} Map<String,String> entity2Map(Object)
}
class com.welab.common.utils.StringUtil {
+ {static} String EMPTY_STRING
+ {static} String[] EMPTY_STRING_ARRAY
+ {static} String WORD_SEPARATOR
+ {static} boolean isBlank(String)
+ {static} String trimToEmpty(String)
}
class com.welab.common.utils.RowMapperUtil {
~ {static} Map<Class<?>,Map<String,String>> SQL_FIELD_MAP
- {static} Map<Class<?>,TypeEnum> TYPE_MAP
~ {static} void init()
+ {static} T map2Entity(Map<String,Object>,Class<T>)
- {static} Object getRealValue(Field,Object)
- {static} Object getValueByClass(Class<?>,String)
- {static} Object getValueByClass(Class<?>,Number)
+ {static} List<T> map2List(List<Map<String,Object>>,Class<T>)
- {static} boolean isUpperEnglishChar(char)
- {static} boolean isNumberChar(char)
- {static} String getMysqlStandField(String)
}
enum com.welab.common.utils.TypeEnum {
+  Integer
+  Long
+  Float
+  Double
+  Boolean
+  String
+  Date
+  Object
}
class com.welab.security.encoding.Base64 {
- {static} byte[] ENC_TAB
- {static} byte[] DEC_TAB
+ {static} void main(String[])
- {static} byte[] DEC_TAB()
+ {static} byte[] encode(byte[])
+ {static} byte[] decode(byte[])
+ {static} byte[] decode(String)
- {static} byte[] discardNonBase64Bytes(byte[])
- {static} String discardNonBase64Chars(String)
- {static} boolean isValidBase64Byte(byte)
}
interface com.welab.common.executor.PoolExecutor {
~ ThreadPoolExecutor getExecutor()
}
class com.welab.common.msg.BaseMessageBody {
- String uniqueId
}
class com.welab.common.utils.DateUtil {
+ {static} long DAY_TIMES
+ {static} int DAY_HOUR_TIMES
+ {static} int DAY_MIN_TIMES
+ {static} int DAY_SEC_TIMES
+ {static} Date getCurrentDateTime()
+ {static} boolean contains(Date,Date,Date)
+ {static} String dateToString(Date,String)
+ {static} String dateToString(Long,String)
+ {static} String currentDateStr()
+ {static} Date stringToDate(String,String)
+ {static} Date stringToDate(String)
+ {static} boolean isYesterday(long)
+ {static} long timePre(Date,Date)
+ {static} long timePre(String,String)
+ {static} boolean isBeforeToday(long)
+ {static} boolean isBefore(Date,Date)
+ {static} Date plusHours(Date,int)
+ {static} String plusDays(Date,int,String)
+ {static} Date plusDays(Date,int)
+ {static} String plusHours(Date,int,String)
+ {static} String plusMins(Date,int,String)
+ {static} Date plusMins(Date,int)
+ {static} String plusMonths(Date,int,String)
+ {static} Date plusMonths(Date,int)
+ {static} String plusSeconds(Date,int,String)
+ {static} Date plusSeconds(Date,int)
+ {static} boolean isAfterToday(long)
+ {static} boolean isAfter(Date,Date)
+ {static} DateTime getToday(int,int,int)
+ {static} Date getTodayDate(int,int,int)
+ {static} DateTime getDateTime(int,int,int,int,int,int)
+ {static} Date getDate(int,int,int,int,int,int)
+ {static} Date getDateTime(Date)
+ {static} boolean isToday(long)
+ {static} int getWeekDay()
+ {static} boolean isWorkDay()
+ {static} long getToday()
+ {static} long getTodayTime(int,int,int)
+ {static} int getMonth()
+ {static} int getPreMonth()
+ {static} int getDay()
+ {static} int getDay(Date)
+ {static} int getMaxDayInMon()
+ {static} int getMaxDayInMon(Date)
+ {static} int getYear()
+ {static} int getPerMonth()
+ {static} long getDaysBetween(Date,Date)
+ {static} long getYearsBetween(Date,Date)
+ {static} long getDaysBetween(String,String)
+ {static} long getDaysBetweenInTimeLevelCase(Date,Date)
+ {static} long getDaysBetweenInDateLevelCase(Date,Date)
+ {static} long containMonths(Date,Date)
+ {static} long containDays(Date,Date)
+ {static} String dateToString(Date,int,String)
+ {static} String getFomaterTime(long)
+ {static} Date getMonday()
+ {static} Date getDateByDay(int)
+ {static} Date getDateByYear(int)
+ {static} String getGMT(Date)
+ {static} void main(String[])
}
class com.welab.common.utils.DateUtil$TimeFormatter {
+ {static} String YYYY_MM_DD_HH_MM_SS
+ {static} String YYYY_MM_DD_HH_MM
+ {static} String YYYY_MM_DD
+ {static} String YYYYMMDD
+ {static} String YYYYMM
+ {static} String HH_MM_SS
}
interface com.welab.common.registry.GeneratorConnector {
~ void init()
~ void connect()
~ void suspend()
~ boolean isWorking()
~ boolean isConnecting()
}
class com.welab.security.util.HexUtil {
+ {static} String bytesToHexString(byte[])
+ {static} byte[] hexToBinary(String)
}
class com.welab.common.registry.zookeeper.ZookeeperConfiguration {
- String serverLists
- String namespace
- int baseSleepTimeMilliseconds
- int maxSleepTimeMilliseconds
- int maxRetries
- int sessionTimeoutMilliseconds
- int connectionTimeoutMilliseconds
- String digest
}
class com.welab.common.utils.NetUtil {
- {static} Logger logger
+ {static} String LOCALHOST
+ {static} String ANYHOST
- {static} int RND_PORT_START
- {static} int RND_PORT_RANGE
- {static} Random RANDOM
- {static} int MIN_PORT
- {static} int MAX_PORT
- {static} Pattern ADDRESS_PATTERN
- {static} Pattern LOCAL_IP_PATTERN
- {static} Pattern IP_PATTERN
- {static} Pattern IP_INTRANET_PATTERN
- {static} InetAddress LOCAL_ADDRESS
- {static} ConcurrentHashMap<String,String> HOST_IP_CACHE
+ {static} int getRandomPort()
+ {static} int getAvailablePort()
+ {static} int getAvailablePort(int)
+ {static} boolean isInvalidPort(int)
+ {static} boolean isValidAddress(String)
+ {static} boolean isLocalHost(String)
+ {static} boolean isAnyHost(String)
+ {static} boolean isInvalidLocalHost(String)
+ {static} boolean isValidLocalHost(String)
+ {static} InetSocketAddress getLocalSocketAddress(String,int)
- {static} boolean isValidAddress(InetAddress)
- {static} boolean isValidIntranetAddress(InetAddress)
+ {static} String getLocalHost()
+ {static} String getLocalHostName()
+ {static} InetAddress getLocalAddress()
+ {static} String getLogHost()
- {static} InetAddress getLocalAddress0()
- {static} InetAddress getLocalAddress1()
+ {static} String getIpByHost(String)
+ {static} String toAddressString(InetSocketAddress)
+ {static} InetSocketAddress toAddress(String)
+ {static} String toURL(String,String,int,String)
}
class com.welab.common.pinyin.PinyinFormat {
- String name
+ {static} PinyinFormat WITH_TONE_MARK
+ {static} PinyinFormat WITHOUT_TONE
+ {static} PinyinFormat WITH_TONE_NUMBER
# <<Create>> PinyinFormat(String)
# String getName()
}
class com.welab.common.serializer.support.StringSerializer {
+ String deserialize(byte[])
+ byte[] serialize(String)
}
class com.welab.common.utils.FreemarkerUtil {
- {static} Configuration cfg
- {static} Logger logger
+ {static} void exeute(Object,String,String)
+ {static} String exeute4Content(Object,String)
}
class com.welab.common.serializer.support.SpringSerializer {
+ byte[] serialize(Object)
+ T deserialize(byte[])
}
class com.welab.common.keygen.Snowflake {
- long workerId
- long epoch
- long workerIdBits
- long maxWorkerId
- long workerIdShift
- long timestampLeftShift
- long sequenceBits
- long sequenceMask
- long sequence
- long lastTimestamp
- int HUNDRED_K
- <<Create>> Snowflake(long)
+ {static} Snowflake create(long)
+ long nextId()
+ long[] nextId(int)
- long tilNextMillis(long)
- long timeGen()
}
class com.welab.common.exception.UnKnownVerifyException {
- {static} long serialVersionUID
+ <<Create>> UnKnownVerifyException(String)
}
class com.welab.security.encoding.Base16 {
+ {static} char[] ENC_TAB
+ {static} byte[] DEC_TAB
+ {static} void main(String[])
+ {static} String encode(byte[])
+ {static} String encode(byte[],int,int)
+ {static} byte[] decode(String)
+ {static} void decode(String,byte[],int)
}
interface com.welab.common.registry.RegisterCenter {
~ long register()
~ void logout()
}
class com.welab.common.pinyin.ChineseHelper {
- {static} Properties CHINESE_TABLE
+ {static} char convertToSimplifiedChinese(char)
+ {static} char convertToTraditionalChinese(char)
+ {static} String convertToSimplifiedChinese(String)
+ {static} String convertToTraditionalChinese(String)
+ {static} boolean isTraditionalChinese(char)
+ {static} boolean isChinese(char)
}


java.io.Serializable <|.. com.welab.common.response.Response
com.welab.common.exception.RuntimeException <|-- com.welab.common.exception.WeLabException
com.welab.common.executor.PoolExecutor <|.. com.welab.common.executor.PoolExecutorEngine
com.welab.common.registry.GeneratorConnector <|.. com.welab.common.keygen.GeneratorConnectorFactory
java.util.concurrent.ThreadFactory <|.. com.welab.common.factory.DefaultThreadFactory
java.io.Serializable <|.. com.welab.xdao.context.page.Page
org.apache.curator.framework.state.ConnectionStateListener <|.. com.welab.common.registry.zookeeper.ZookeeperConnectionStateListener
com.welab.common.serializer.ISerializer <|.. com.welab.common.serializer.support.HessianSerializer
org.springframework.context.ApplicationContextAware <|.. com.welab.common.spring.SpringContextHolder
java.util.Properties <|-- com.welab.common.config.OrderSafeProperties
com.welab.common.config.OrderSafeProperties +.. com.welab.common.config.OrderSafeProperties$Entry
com.welab.common.config.Entry <|.. com.welab.common.config.OrderSafeProperties$Entry
org.apache.commons.lang3.math.NumberUtils <|-- com.welab.common.utils.NumberUtil
java.util.concurrent.ThreadFactory <|.. com.welab.common.factory.NamedThreadFactory
com.welab.common.registry.RegisterCenter <|.. com.welab.common.keygen.SnowflakeWorkerRegister
com.welab.common.registry.CoordinatorRegistryCenter <|.. com.welab.common.registry.zookeeper.ZookeeperRegistryCenter
com.welab.common.utils.http.HttpHeader +.. com.welab.common.utils.http.HttpHeader$HttpReqHead
com.welab.common.utils.http.HttpHeader +.. com.welab.common.utils.http.HttpHeader$Headers
com.welab.common.registry.RegistryCenter <|-- com.welab.common.registry.CoordinatorRegistryCenter
com.welab.common.utils.http.RuntimeException <|-- com.welab.common.utils.http.HttpClientException
com.welab.common.utils.http.SSLs +.. com.welab.common.utils.http.SSLs$SSLHandler
com.welab.common.utils.http.X509TrustManager <|.. com.welab.common.utils.http.SSLs$SSLHandler
com.welab.common.utils.http.HostnameVerifier <|.. com.welab.common.utils.http.SSLs$SSLHandler
java.util.zip.Checksum <|.. com.welab.common.utils.CRC16
com.welab.common.exception.BaseException <|.. com.welab.common.exception.BaseRuntimeException
org.springframework.core.NestedRuntimeException <|-- com.welab.common.exception.BaseRuntimeException
com.welab.common.exception.RuntimeException <|-- com.welab.common.exception.SecurityException
com.welab.common.exception.BaseRuntimeException <|-- com.welab.common.exception.FastRuntimeException
org.springframework.context.ApplicationContextInitializer <|.. com.welab.common.config.DefaultConfigService
org.springframework.context.ApplicationListener <|.. com.welab.common.config.DefaultConfigService
java.io.Serializable <|.. com.welab.common.registry.zookeeper.NodeInfo
java.io.Serializable <|.. com.welab.common.registry.zookeeper.NodePath
com.welab.common.serializer.ISerializer <|.. com.welab.common.serializer.support.KryoSerializer
com.welab.common.serializer.support.KryoSerializer +.. com.welab.common.serializer.support.KryoSerializer$KryoHolder
com.welab.common.serializer.support.KryoSerializer +.. com.welab.common.serializer.support.KryoSerializer$KryoPool
com.welab.common.serializer.support.KryoSerializer +.. com.welab.common.serializer.support.KryoSerializer$KryoPoolImpl
com.welab.common.serializer.support.KryoPool <|.. com.welab.common.serializer.support.KryoSerializer$KryoPoolImpl
com.welab.common.serializer.support.KryoSerializer$KryoPoolImpl +.. com.welab.common.serializer.support.KryoSerializer$KryoPoolImpl$Singleton
org.apache.http.impl.client.HttpClientBuilder <|-- com.welab.common.utils.http.HttpConfig
com.welab.common.keygen.KeyGenerator <|.. com.welab.common.keygen.KeyGeneratorFactory
com.welab.common.exception.util.ExceptionUtils <|-- com.welab.common.exception.util.ExceptionUtils
org.apache.commons.lang3.StringUtils <|-- com.welab.common.utils.StringUtil
java.io.Serializable <|.. com.welab.common.msg.BaseMessageBody
com.welab.common.utils.DateUtil +.. com.welab.common.utils.DateUtil$TimeFormatter
java.io.Closeable <|-- com.welab.common.registry.GeneratorConnector
com.welab.common.serializer.ISerializer <|.. com.welab.common.serializer.support.SpringSerializer
com.welab.common.exception.RuntimeException <|-- com.welab.common.exception.UnKnownVerifyException
@enduml